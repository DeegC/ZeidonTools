TRANSFORMATION OPERATION
zoTZWDGRWO_LoadOrInitialize( RETURNED VIEW pvGRW BASED ON LOD TZWDGRWO,
                             VIEW vDlg BASED ON LOD TZWDLGSO )

// This routine returns a view to the "dialog graphic work" object.
// It will attempt to load it from a DOS file and create an empty one
//   if the file doesn't exist.  There is no pretense of keeping the
//   graphic information in the repository so that it will be the same on
//   each workstation.
// The GRW object is then "syncronized" with the DIALOG that was passed in.
//   Note that the "ReInit" function attempts to keep any graphical placement
//   that is valid in the loaded GRW object.

   VIEW vLPLR based on lod TZCMWKSO
   SHORT RESULT
   SHORT nRC
   STRING( 127 ) szFileName

/* Get Access to LPLR for Directory */
   GET VIEW vLPLR NAMED "TaskLPLR"
   if RESULT > 0
      szFileName = vLPLR.LPLR.MetaSrcDir + "\\"
   else
      szFileName = ""
   end
   szFileName = szFileName + vDlg.Dialog.Tag + ".dgr"

// Activate file for graph
   nRC = ActivateOI_FromFile( pvGRW, "TZWDGRWO", vDlg, szFileName,
                              zNOI_OKAY )
   IF nRC < 0
      NAME VIEW pvGRW "DlgGraph"
      CREATE ENTITY pvGRW.Dialog
      pvGRW.Dialog.Tag = vDlg.Dialog.Tag
      pvGRW.Dialog.Desc = vDlg.Dialog.Desc
      pvGRW.Dialog.ZKey = vDlg.Dialog.ZKey
   else
      NAME VIEW pvGRW "DlgGraph"
      FOR each pvGRW.ER_RelType
         DELETE ENTITY pvGRW.ER_RelType none
      END
//      delete ENTITY pvGRW.Dialog NONE
//      CREATE ENTITY pvGRW.Dialog
//      pvGRW.Dialog.Tag = vDlg.Dialog.Tag
//      pvGRW.Dialog.Desc = vDlg.Dialog.Desc
//      pvGRW.Dialog.ZKey = vDlg.Dialog.ZKey
   END

// add or merge any "dialog" info into the graphics
   zoTZWDGRWO_ReInit( pvGRW, vDlg )

   OrderEntityForView( pvGRW, "ER_Entity",
                       "OwningArea A Type D Name A" )

// DisplayObjectInstance( pvGRW, "Dialog" )
// CommitOI_ToFile( pvGRW, szFileName, zASCII )

   return 0
END

TRANSFORMATION OPERATION
zoTZWDGRWO_Save( VIEW vGRW BASED ON LOD TZWDGRWO )

   VIEW vLPLR based on lod TZCMWKSO
   SHORT RESULT
   SHORT nRC
   STRING( 127 ) szFileName

/* Get Access to LPLR for Directory */
   GET VIEW vLPLR NAMED "TaskLPLR"
   if RESULT > 0
      szFileName = vLPLR.LPLR.MetaSrcDir + "\\"
   else
      szFileName = ""
   end
   szFileName = szFileName + vGRW.Dialog.Tag + ".dgr"

   nRC = CommitOI_ToFile( vGRW, szFileName, zASCII )

   return nRC
END

TRANSFORMATION OPERATION
zoTZWDGRWO_ReInit( VIEW vGRW_in BASED ON LOD TZWDGRWO,
                   VIEW vDlg_in BASED ON LOD TZWDLGSO )

   VIEW vGRW BASED ON LOD TZWDGRWO
   VIEW vDlg BASED ON LOD TZWDLGSO
   String( 63 ) szName
   SHORT nFound

   CreateViewFromView( vGRW, vGRW_in )
   CreateViewFromView( vDlg, vDlg_in )

// Start by deleting any GRW refs to non-existing Windows, Actions, Mappings
   FOR each vGRW.ER_Entity
      IF vGRW.ER_Entity.Type = "W"
         SET CURSOR FIRST vDlg.Window
             where vDlg.Window.ZKey = vGRW.ER_Entity.ZKey
         IF RESULT < zCURSOR_SET
            DELETE ENTITY vGRW.ER_Entity NONE
         END
      else
      IF vGRW.ER_Entity.Type = "A"
         SET CURSOR FIRST vDlg.Action within vDlg.Dialog
             where vDlg.Action.ZKey = vGRW.ER_Entity.ZKey
         IF RESULT < zCURSOR_SET
            DELETE ENTITY vGRW.ER_Entity NONE
         END
      else
      IF vGRW.ER_Entity.Type = "D"
         // find if external window is still referenced via an action
         nFound = 0
         set cursor first vDlg.Action within vDlg.Dialog
             where vDlg.Action.Type >= 30
               and vDlg.Action.Type <= 59
         LOOP WHILE RESULT >= zCURSOR_SET and nFound = 0
            if vDlg.Action.DialogName = vGRW.Dialog.Tag
                  or vDlg.Action.DialogName = ""
               if vDlg.Action.WindowName = ""
                  szName = "'default'"
               else
                  szName = vDlg.Action.WindowName
               end
            else
               if vDlg.Action.WindowName = ""
                  szName = vDlg.Action.DialogName + ": 'default'"
               else
                  szName = vDlg.Action.DialogName + ":" + vDlg.Action.WindowName
               end
            end
//    The next statement generate incorrectly, but inverse works!! $$$$$$$$$$$
//          if szName = vGRW.ER_Entity.Name
            if vGRW.ER_Entity.Name = szName
               nFound = 1
            END
//    The next statement generate incorrectly ( initial SetCursor )$$$$$$$$$$$
//            set cursor next vDlg.Action within vDlg.Dialog
//                where vDlg.Action.Type >= 30
//                  and vDlg.Action.Type <= 59
//    work-around is to not use where first?????
            set cursor next vDlg.Action within vDlg.Dialog
            set cursor next vDlg.Action within vDlg.Dialog
                where vDlg.Action.Type >= 30
                  and vDlg.Action.Type <= 59
         END
         if nFound = 0
            DELETE ENTITY vGRW.ER_Entity NONE
         END
      else // unknown so delete
         DELETE ENTITY vGRW.ER_Entity NONE
      END // "D" - window in different Dialog
      END // "A" - Action
      END // "W" - Window in this dialog

   END // for each Entity ( node )

   FOR each vDlg.Window
      zoTZWDGRWO_NodeWindowSync( vGRW, vDlg )
   END
   FOR each vDlg.Action within vDlg.Dialog
      zoTZWDGRWO_NodeActionSync( vGRW, vDlg )
   END

   DropView( vGRW )
   DropView( vDlg )
   return 0
END

TRANSFORMATION OPERATION
zoTZWDGRWO_NodeWindowSync( VIEW vGRW BASED ON LOD TZWDGRWO,
                           VIEW vDlg BASED ON LOD TZWDLGSO )

   SET CURSOR FIRST vGRW.ER_Entity
         where vGRW.ER_Entity.ZKey = vDlg.Window.ZKey
   IF RESULT < zCURSOR_SET
      CREATE ENTITY vGRW.ER_Entity LAST
      vGRW.ER_Entity.ZKey = vDlg.Window.ZKey
   end
   vGRW.ER_Entity.Name = vDlg.Window.Tag
   vGRW.ER_Entity.Desc = "Window -- " + vDlg.Dialog.Tag + ":" + vDlg.Window.Tag
   vGRW.ER_Entity.Purpose = "F"
   IF vDlg.DfltWnd.ZKey = vDlg.Window.ZKey
      vGRW.ER_Entity.OwningArea = "$dlft:" + vDlg.Window.Tag
   else
      vGRW.ER_Entity.OwningArea = vDlg.Window.Tag
   END
   vGRW.ER_Entity.Type = "W"

   return 0
END

TRANSFORMATION OPERATION
zoTZWDGRWO_NodeActionSync( VIEW vGRW BASED ON LOD TZWDGRWO,
                           VIEW vDlg BASED ON LOD TZWDLGSO )

   VIEW vGRW_Win BASED ON LOD TZWDGRWO
   STRING( 32) szName
   Integer zWAB
   SHORT nEvents

   SET CURSOR FIRST vGRW.ER_Entity
       where vGRW.ER_Entity.ZKey = vDlg.Action.ZKey
   IF RESULT < zCURSOR_SET
      CREATE ENTITY vGRW.ER_Entity LAST
      vGRW.ER_Entity.ZKey = vDlg.Action.ZKey
   end
   vGRW.ER_Entity.Name = vDlg.Action.Tag
   vGRW.ER_Entity.Desc = "Action -- " + vDlg.Window.Tag + ":" + vDlg.Action.Tag
   IF vDlg.DfltWnd.ZKey = vDlg.Window.ZKey
      vGRW.ER_Entity.OwningArea = "$dlft:" + vDlg.Window.Tag
   else
      vGRW.ER_Entity.OwningArea = vDlg.Window.Tag
   END
   vGRW.ER_Entity.Type = "A"

   CreateViewFromView( vGRW_Win, vGRW )

// create an arc for the action going to a window
   zWAB = vDlg.Action.Type
   IF zWAB < 30 or zWAB > 59  // doesn't transfer to new window
      vGRW.ER_Entity.Purpose = "W"     // work
   ELSE
      vGRW.ER_Entity.Purpose = "D"     // derived
      if vDlg.Action.DialogName = vGRW.Dialog.Tag
            or vDlg.Action.DialogName = ""
         if vDlg.Action.WindowName = ""
            szName = "'default'"
         else
            szName = vDlg.Action.WindowName
         end
      else
         if vDlg.Action.WindowName = ""
            szName = vDlg.Action.DialogName + ": 'default'"
         else
            szName = vDlg.Action.DialogName + ":" + vDlg.Action.WindowName
         end
      end
      SET CURSOR FIRST vGRW_Win.ER_Entity
            where vGRW_Win.ER_Entity.Name = szName
      IF RESULT < zCURSOR_SET
         CreateMetaEntity( vGRW_Win, "ER_Entity", zPOS_LAST )
         vGRW_Win.ER_Entity.Name = szName
         vGRW_Win.ER_Entity.Desc = "Window -- " + szName
         vGRW_Win.ER_Entity.Purpose = "A"     // attributive
         IF vDlg.DfltWnd.ZKey = vDlg.Window.ZKey
            vGRW_Win.ER_Entity.OwningArea = "$dlft:" + vDlg.Window.Tag
         else
            vGRW_Win.ER_Entity.OwningArea = vDlg.Window.Tag
         END
         vGRW_Win.ER_Entity.Type = "D"   // dialog transfer
      END
      zoTZWDGRWO_ArcActionWindow( vGRW, vGRW_Win, vDlg )
   END

// create an arc for each way that the owning window invokes the action
   nEvents = 0
   szName = vDlg.Window.Tag
   SET CURSOR FIRST vGRW_Win.ER_Entity
         where vGRW_Win.ER_Entity.Name = szName
   FOR each vDlg.ActWndEvent
      zoTZWDGRWO_ArcWindowAction( vGRW_Win, vGRW, vDlg, 1 )
      nEvents = nEvents + 1
   END
   FOR each vDlg.ActEvent
      zoTZWDGRWO_ArcWindowAction( vGRW_Win, vGRW, vDlg, 2 )
      nEvents = nEvents + 1
   END
   FOR each vDlg.ActOpt
      zoTZWDGRWO_ArcWindowAction( vGRW_Win, vGRW, vDlg, 3 )
      nEvents = nEvents + 1
   END
   FOR each vDlg.ActHot
      zoTZWDGRWO_ArcWindowAction( vGRW_Win, vGRW, vDlg, 4 )
      nEvents = nEvents + 1
   END

   IF nEvents = 0
      vGRW.ER_Entity.Name = vDlg.Window.Tag + ":" + vDlg.Action.Tag
   else
      IF nEvents > 1
         zoTZWDGRWO_ArcGroupEvents( vGRW_Win, vGRW, vDlg, nEvents )
      END
   END

   DropView( vGRW_Win )
   return 0
END

TRANSFORMATION OPERATION
zoTZWDGRWO_ArcActionWindow( VIEW vGRW_Action BASED ON LOD TZWDGRWO,
                            VIEW vGRW_Window BASED ON LOD TZWDGRWO,
                            view vDlg based on lod TZWDLGSO )
   string(127) zWAB_Text
   INTEGER nLth

   CreateMetaEntity( vGRW_Action, "ER_RelType", zPOS_LAST )
   vGRW_Action.ER_RelType.Fact = "Action to Window"
   vGRW_Action.ER_RelType.Type = "W"  // window invocation

   CreateMetaEntity( vGRW_Action, "ER_RelLink_2", zPOS_LAST )
   GetVariableFromAttribute( zWAB_Text, nLth, zTYPE_STRING, 127,
                             vDlg, "Action", "Type",
                             "", zUSE_DEFAULT_CONTEXT )
   vGRW_Action.ER_RelLink_2.Name = zWAB_Text
   vGRW_Action.ER_RelLink_2.CardMin = "0"
   vGRW_Action.ER_RelLink_2.CardMax = "1"
   INCLUDE vGRW_Action.ER_Entity_2 FROM vGRW_Action.ER_Entity AFTER
   SET CURSOR FIRST vGRW_Action.ER_RelLink
              where vGRW_Action.ER_RelLink.ZKey = vGRW_Action.ER_RelLink_2.ZKey

   CreateMetaEntity( vGRW_Action, "ER_RelLink_2", zPOS_LAST )
   vGRW_Action.ER_RelLink_2.CardMin = "1"
   vGRW_Action.ER_RelLink_2.CardMax = "1"
   INCLUDE vGRW_Action.ER_Entity_2 FROM vGRW_Window.ER_Entity AFTER
   SET CURSOR FIRST vGRW_Window.ER_RelLink
              where vGRW_Window.ER_RelLink.ZKey = vGRW_Action.ER_RelLink_2.ZKey
   vGRW_Window.ER_RelType_1.Type = vGRW_Action.ER_RelType.Type

   INCLUDE vGRW_Action.ER_RelLink_Other FROM vGRW_Action.ER_RelLink_2 AFTER
   SET CURSOR PREVIOUS vGRW_Action.ER_RelLink_2
   INCLUDE vGRW_Window.ER_RelLink_Other FROM vGRW_Action.ER_RelLink_2 AFTER

   return 0
END

TRANSFORMATION OPERATION
zoTZWDGRWO_ArcWindowAction( VIEW vGRW_Window BASED ON LOD TZWDGRWO,
                            VIEW vGRW_Action BASED ON LOD TZWDGRWO,
                            view vDlg based on lod TZWDLGSO,
                            SHORT nCtrlType )

   view vDlg2 based on lod TZWDLGSO
   string( 127 ) szToName
   string( 127 ) szFromName
   Integer zControl
   SHORT nRC

   CASE nCtrlType
      OF 1:   // Window Event
         szToName = "(Window)"
         szFromName = vDlg.ActWndEvent.EventName
      OF 2:   // Control Event
         szToName = "(Ctrl) " + vDlg.ActCtrl.Tag
         CreateViewFromView( vDlg2, vDlg )
         ResetView( vDlg2 )
         zControl = zPOS_FIRST + zQUAL_ENTITYATTR + zRECURS
         nRC = SetEntityCursor( vDlg2, "Event", "ZKey",
                                zControl,
                                vDlg, "ActEvent", "ZKey",
                                0, "Window", "" )
         if nRC > zCURSOR_UNCHANGED
            szFromName = vDlg2.ControlDef.Tag
         else
            szFromName = "unknown ctrl event"
         end
         DropView( vDlg2 )
      OF 3:   // Option select
         szToName = "(Opt) " + vDlg.ActOpt.Text
         szFromName = "option select"
      OF 4:   // Hotkey
         szToName = "(Shortcut Key) " + vDlg.ActHot.Tag
         szFromName = "keyed"
      OF 5:   // Group of events for presentation
         szToName = "n"
         szFromName = "multiple"
      otherwise :
         return -1
   END

   CreateMetaEntity( vGRW_Window, "ER_RelType", zPOS_LAST )
   if nCtrlType = 5
      vGRW_Window.ER_RelType.Fact = "Group: "
      vGRW_Window.ER_RelType.Type = "G"   // Group of events
   else
      vGRW_Window.ER_RelType.Fact = "Window to Action"
      vGRW_Window.ER_RelType.Type = "E"   // event
   end

   CreateMetaEntity( vGRW_Window, "ER_RelLink_2", zPOS_LAST )
   vGRW_Window.ER_RelLink_2.Name = szToName
   vGRW_Window.ER_RelLink_2.CardMin = "0"
   vGRW_Window.ER_RelLink_2.CardMax = "m"
   INCLUDE vGRW_Window.ER_Entity_2 FROM vGRW_Window.ER_Entity AFTER
   SET CURSOR FIRST vGRW_Window.ER_RelLink
              where vGRW_Window.ER_RelLink.ZKey = vGRW_Window.ER_RelLink_2.ZKey

   CreateMetaEntity( vGRW_Window, "ER_RelLink_2", zPOS_LAST )
   vGRW_Window.ER_RelLink_2.Name = szFromName
   vGRW_Window.ER_RelLink_2.CardMin = "1"
   vGRW_Window.ER_RelLink_2.CardMax = "1"
   INCLUDE vGRW_Window.ER_Entity_2 FROM vGRW_Action.ER_Entity AFTER
   SET CURSOR FIRST vGRW_Action.ER_RelLink
              where vGRW_Action.ER_RelLink.ZKey = vGRW_Window.ER_RelLink_2.ZKey
   vGRW_Action.ER_RelType_1.Type = vGRW_Window.ER_RelType.Type

   INCLUDE vGRW_Window.ER_RelLink_Other FROM vGRW_Window.ER_RelLink_2 AFTER
   SET CURSOR PREVIOUS vGRW_Window.ER_RelLink_2
   INCLUDE vGRW_Action.ER_RelLink_Other FROM vGRW_Window.ER_RelLink_2 AFTER

   return 0
END

TRANSFORMATION OPERATION
zoTZWDGRWO_ArcGroupEvents( VIEW vGRW_Win BASED ON LOD TZWDGRWO,
                           VIEW vGRW_Act BASED ON LOD TZWDGRWO,
                           view vDlg based on lod TZWDLGSO,
                           SHORT nEvents )

   VIEW vGRW_Tmp BASED ON LOD TZWDGRWO

   zoTZWDGRWO_ArcWindowAction( vGRW_Win, vGRW_Act, vDlg, 5 )
   vGRW_Win.ER_RelType.Fact = "Group: "

   CreateViewFromView( vGRW_Tmp, vGRW_Act )

/* Generate logic for the FOR doesn't work...  $$$$$$$$$$
   FOR each vGRW_Act.ER_Entity_2 within vGRW_Act.Dialog
            where vGRW_Act.ER_Entity_2.ZKey = vGRW_Act.ER_Entity.ZKey
              and vGRW_Act.ER_RelType.Type = "E"
*/
   FOR each vGRW_Act.ER_Entity_2 within vGRW_Act.Dialog
            where vGRW_Act.ER_Entity_2.ZKey = vGRW_Act.ER_Entity.ZKey
      IF  vGRW_Act.ER_RelType.Type = "E"
         SetViewFromView( vGRW_Tmp, vGRW_Act )
         SET CURSOR FIRST vGRW_Tmp.ER_RelLink_2
         vGRW_Win.ER_RelType.Fact = vGRW_Win.ER_RelType.Fact + " | "
                                  + vGRW_Tmp.ER_RelLink_2.Name
      end
   END

   DropView( vGRW_Tmp )
   return 0
END

TRANSFORMATION OPERATION
zoTZWDGRWO_NodeEntitySync( VIEW vGRW BASED ON LOD TZWDGRWO,
                   VIEW vDlg BASED ON LOD TZWDLGSO,
                   SHORT nAddOrMerge,
                   EntityName szMetaName )

   VIEW vDlg2 BASED ON LOD TZWDLGSO
   STRING( 32) szName
   AttributeName szAttr

   if nAddOrMerge = 0
      CREATE ENTITY vGRW.ER_Entity LAST
   end
   szAttr = "ZKey"
   vGRW.ER_Entity.ZKey = vDlg.szMetaName.szAttr
   szAttr = "Name"
   vGRW.ER_Entity.Name = vDlg.szMetaName.szAttr
   vGRW.ER_Entity.Desc = vDlg.szMetaName.szAttr
   vGRW.ER_Entity.Purpose = "A"     // attributive
   IF vGRW.ER_Entity.OwningArea = ""
      IF vDlg.DfltWnd.ZKey = vDlg.Window.ZKey
         vGRW.ER_Entity.OwningArea = "$dlft:" + vDlg.Window.Tag
      else
         vGRW.ER_Entity.OwningArea = vDlg.Window.Tag
      END
   END
   vGRW.ER_Entity.Type = "E"

   return 0
END

/*
CHANGE LOG
2000.10.20  SR  Z2000  Size of path variables
   Modified size of SourceFileName, SourceFileName1, SourceFileName2 and SourceName
   in function DialogMigrate because size of attributes ExecDir, MetaSrcDir and
   PgmSrcDir has been changed to 254 in datamodel.
2000.09.04  BL Z10  TB RAD 53256
   Modified DialogMigrate: before include DefaultWindow, check exits it
2000.04.27  DC Z10
   Added more information to error message for relink Action Mapping error and
   corrected some relink cases where there is a match on Name but not ZKey.
2000.02.03  BL Z10  new PPE handling
   Modified ControlRelinkDelete for relink ControlDef: 1. search ControlDef.Tag, if
   not found search ControlDef.Key (not ControlDef.ZKey, because merge PPE)
2000.01.12  BL Z10
   Modified ControlRelinkDelete for new PPE handling
2000.01.09  BL Z10
   Modified ControlRelinkDelete: search ZKey, if not found search Tag
1999.11.17  DC Z10
   Modifed ControlRelinkDelete again to get the TZPESRCO view dynamically so it
   would run under the Animator.
1999.11.10  DC Z10
   Modified ControlRelinkDelete to relink ControlDef and to NOT delete CtrlMap
   when a mapping error occurs, but instead just exclude the mapping information.
1999.08.14  DC 10a
   Modified ControlRelinkDelete so that it would handle link errors for Reports
   as well as Dialogs.
1999.08.02    DGC
   Fixed a message length to prevent truncation.
1997.11.13    DGC
   Changed CopyFile() to SysCopyFile().
1997.08.05  DonC
   Changed ControlRelinkDelete operation from LOCAL operation to TRANSFORMATION
   operations, including modifying the order of the parameters and changing
   message titles so they would be appropriate for Reports as well as Dialogs..
*/

// LAST MESSAGE ID: WD00514


/************************************************************************
   ENTRY:    DialogRelinkDelete
   PURPOSE:  This function checks all mapping for entities, attributes and
             ViewObjRefs to make sure the associated entity, attribute or
             LOD exists.  If it doesn't, it deletes the MapRef or the
             ViewObjRef.
             It also relinks entities to the corresponding entities in the
             LOD (and in the Domain for entity Context).  It does not at
             this time relink fonts, colors, ControlDef and other entities
             in the PE, as those characteristics can't change in the PE
             at this point.  This should continue to be re-evaluated.
***********************************************************************/
TRANSFORMATION OPERATION
DialogRelinkDelete( VIEW vDialog BASED ON LOD TZWDLGSO, VIEW vSubtask )

   VIEW         vLastLOD     BASED ON LOD TZZOLODO
   VIEW         vVOR         BASED ON LOD TZWDVORO
   VIEW         vLOD_LPLR    BASED ON LOD TZCMLPLO
   VIEW         vRecursive   BASED ON LOD TZWDLGSO
   INTEGER      LastViewZKey
   STRING (255) szMsg
   STRING ( 1 ) szContinueParseGen
   SHORT  nRC

   RetrieveViewForMetaList( vSubtask, vLOD_LPLR, zREFER_LOD_META )
   LastViewZKey = 0
   NAME VIEW vDialog "vDialog"

   FOR EACH vDialog.ViewObjRef
      IF LastViewZKey != 0
         DropMetaOI( vSubtask, vLastLOD )
         LastViewZKey = 0
      END

      nRC = ActivateMetaOI_ByZKey( vSubtask, vVOR, 0, zREFER_VOR_META,
                                   zSINGLE, vDialog.ViewObjRef.ZKey, 0 )
      IF nRC >= 0
         nRC = ActivateMetaOI_ByName( vSubtask, vLastLOD, 0, zREFER_LOD_META,
                                      zSINGLE, vVOR.LOD.Name, 0 )
         IF nRC >= 0
            LastViewZKey = vDialog.ViewObjRef.ZKey
            NAME VIEW vLastLOD "vLastLOD"
            // Relink ViewObjRef & LOD
            //RelinkInstanceToInstance( vDialog, "ViewObjRef", vVOR, "ViewObjRef" )
            //RelinkInstanceToInstance( vDialog, "LOD", vLastLOD, "LOD" )

            // Since RelinkInstanceToInstance does not reset the include flags,
            // use RelinkAllSubobjectsForOI for relinking entities that need those include
            // flags reset.  When a version of RelinkInstanceToInstance is created
            // that resets those flags, the following code can be removed.
            RelinkAllSubobjectsForOI( vDialog, "ViewObjRef", vVOR, "ViewObjRef" )
            RelinkAllSubobjectsForOI( vDialog, "CtrlMapLOD_Attribute", vLastLOD, "LOD_Attribute" )
            RelinkAllSubobjectsForOI( vDialog, "OptMapLOD_Attribute", vLastLOD, "LOD_Attribute" )
            RelinkAllSubobjectsForOI( vDialog, "ActMapLOD_Entity", vLastLOD, "LOD_Entity" )
         ELSE
            szMsg = "Deleting Dialog View: " + vDialog.ViewObjRef.Name +
                    "| Missing LOD: " + vDialog.LOD.Name
            SysReadZeidonIni( -1, "[Workstation]", "ContinueParseGen", szContinueParseGen )
            IF szContinueParseGen = "N"
               TraceLineS( szMsg, "" )
            ELSE
               MessageSend( vSubtask, "WD00501", "Dialog Relink",
                            szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            END
            EXCLUDE vDialog.ViewObjRef NONE
         END
         DropMetaOI( vSubtask, vVOR )
      ELSE
         nRC = ActivateMetaOI_ByName( vSubtask, vVOR, 0, zREFER_VOR_META,
                                      zSINGLE, vDialog.ViewObjRef.Name , 0 )
         IF nRC >= 0
            EXCLUDE vDialog.ViewObjRef NONE
            INCLUDE vDialog.ViewObjRef FROM vVOR.ViewObjRef
            DropMetaOI( vSubtask, vVOR )
         ELSE
            szMsg = "Deleting Dialog View: " + vDialog.ViewObjRef.Name +
                    "| Missing Registered View."
            SysReadZeidonIni( -1, "[Workstation]", "ContinueParseGen", szContinueParseGen )
            IF szContinueParseGen = "N"
               TraceLineS( szMsg, "" )
            ELSE
               MessageSend( vSubtask, "WD00502", "Dialog Relink",
                            szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            END
            EXCLUDE vDialog.ViewObjRef NONE
         END
      END
   END

   FOR EACH vDialog.Window
      CreateViewFromViewForTask( vRecursive, vDialog, 0 )
      NAME VIEW vRecursive "vRecursive"
      FOR EACH vRecursive.Control
         ControlRelinkDelete( vDialog, vRecursive, vLastLOD,
                              LastViewZKey, vLOD_LPLR, vSubtask )
      END

      FOR EACH vDialog.Action
         FOR EACH vDialog.ActMap
            IF vDialog.ActMapView  EXISTS
               IF LastViewZKey != vDialog.ActMapView.ZKey
                  SET CURSOR FIRST vDialog.ViewObjRef WHERE
                      vDialog.ViewObjRef.ZKey = vDialog.ActMapView.ZKey
                  IF RESULT < zCURSOR_SET
                     SET CURSOR FIRST vDialog.ViewObjRef WHERE
                         vDialog.ViewObjRef.Name = vDialog.ActMapView.Name
                     IF RESULT >= zCURSOR_SET

                        // If there was a match on Name but not on Zkey,
                        // reinclude the ActMapView.
                        EXCLUDE vDialog.ActMapView
                        INCLUDE vDialog.ActMapView FROM vDialog.ViewObjRef

                        // Activate the correct LOD for later processing.
                        IF LastViewZKey != 0
                           DropMetaOI( vSubtask, vLastLOD )
                           LastViewZKey = 0
                        END

                        nRC = ActivateMetaOI_ByZKey( vSubtask, vLastLOD, 0, zREFER_LOD_META,
                                                     zSINGLE, vDialog.LOD.ZKey, 0 )
                        IF nRC < 0
                           nRC = ActivateMetaOI_ByName( vSubtask, vLastLOD, 0, zREFER_LOD_META,
                                                        zSINGLE, vDialog.LOD.Name, 0 )
                        END

                        IF nRC < 0
                           // If we get here, we have a Zeidon error.
                           szMsg = "Deleting ActMap due to LOD load error.| Registered View Name: " +
                                   vDialog.ViewObjRef.Name
                           MessageSend( vSubtask, "WD00504", "Dialog Relink",
                                        szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                           DELETE ENTITY vDialog.ActMap NONE
                        ELSE
                           LastViewZKey = vDialog.ViewObjRef.ZKey
                           NAME VIEW vLastLOD "vLastLOD"
                        END

                     ELSE
                        // There was no match on either ZKey or Name.
                        szMsg = "Deleting Action Mapping due to missing View. | Registered View Name: " +
                                vDialog.ActMapView.Name
                        MessageSend( vSubtask, "WD00503", "Dialog Relink",
                                     szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        DELETE ENTITY vDialog.ActMap NONE
                     END
                  ELSE
                     // There was a match on ActMapView Zkey.  Make sure the corresponding
                     // LOD is activated.
                     IF LastViewZKey != 0
                        DropMetaOI( vSubtask, vLastLOD )
                        LastViewZKey = 0
                     END

                     nRC = ActivateMetaOI_ByZKey( vSubtask, vLastLOD, 0, zREFER_LOD_META,
                                                  zSINGLE, vDialog.LOD.ZKey, 0 )
                     IF nRC < 0
                        nRC = ActivateMetaOI_ByName( vSubtask, vLastLOD, 0, zREFER_LOD_META,
                                                     zSINGLE, vDialog.LOD.Name, 0 )
                     END

                     IF nRC < 0
                        // If we get here, we have a Zeidon error.
                        szMsg = "Deleting ActMap due to LOD load error.| Registered View Name: " +
                                vDialog.ViewObjRef.Name
                        MessageSend( vSubtask, "WD00504", "Dialog Relink",
                                     szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        DELETE ENTITY vDialog.ActMap NONE
                     ELSE
                        LastViewZKey = vDialog.ViewObjRef.ZKey
                        NAME VIEW vLastLOD "vLastLOD"
                     END
                  END
               END

               IF vDialog.ActMapLOD_Entity EXISTS
                  SET CURSOR FIRST vLastLOD.LOD_Entity WHERE
                      vLastLOD.LOD_Entity.ZKey = vDialog.ActMapLOD_Entity.ZKey
                  IF RESULT < zCURSOR_SET
                     SET CURSOR FIRST vLastLOD.LOD_Entity WHERE
                         vLastLOD.LOD_Entity.Name = vDialog.ActMapLOD_Entity.Name
                     IF RESULT >= zCURSOR_SET
                        // If there was a match on Name but not on Zkey,
                        // reinclude the LOD_Entity.
                        EXCLUDE vDialog.ActMapLOD_Entity
                        INCLUDE vDialog.ActMapLOD_Entity FROM vLastLOD.LOD_Entity
                     ELSE
                        // There was no match on either ZKey or Name.
                        szMsg = "Deleting Action Mapping due to missing LOD Entity.|   Registered View Name: " +
                                vDialog.ViewObjRef.Name + "|   LOD Entity Name: " +
                                vDialog.ActMapLOD_Entity.Name
                        MessageSend( vSubtask, "WD00505", "Dialog Relink",
                                     szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        DELETE ENTITY vDialog.ActMap NONE
                     END
                  END
               END
            END
         END
      END

      FOR EACH vRecursive.Menu
         FOR EACH vDialog.Option
            OptionRelinkDelete( vSubtask, vLOD_LPLR, vDialog, vRecursive,
                                vLastLOD, LastViewZKey )
         END
      END

      DropView( vRecursive )

   END
END

/************************************************************************
   ENTRY:    ControlRelinkDelete
   PURPOSE:  This function evalutes each attribute and entity within the
             CtrlMap subobject and deletes any that are no longer in the
             corresponding LOD.
***********************************************************************/
TRANSFORMATION OPERATION
ControlRelinkDelete( VIEW    vDialog     BASED ON LOD TZWDLGSO,
                     VIEW    vControl    BASED ON LOD TZWDLGSO,
                     VIEW    vLastLOD    BASED ON LOD TZZOLODO,
                     INTEGER LastViewZKey,
                     VIEW    vLOD_LPLR   BASED ON LOD TZCMLPLO,
                     VIEW    vSubtask )

   VIEW vDomain BASED ON LOD  TZDGSRCO
   VIEW vReport BASED ON LOD  TZRPSRCO
   VIEW vPE     BASED ON LOD  TZPESRCO
   VIEW PE_List BASED ON LOD  TZCMLPLO
   STRING ( 255 ) szMsg
   STRING ( 64 )  szWindowReportName
   STRING ( 1 )   szContinueParseGen
   INTEGER        nRemapFlag
   SHORT          nRC

   //  Get View to Presentation Environment.
   IF GetViewByName( vPE, "TZPESRCO", vSubtask, zLEVEL_TASK ) < 0
      RetrieveViewForMetaList( vSubtask, PE_List, zREFER_PENV_META )
      nRC = LoadZeidonPPE( vSubtask, vPE, zREFER_PENV_META, PE_List,
                           "Configuration Management", "" )
      DropView( PE_List )
      IF nRC < 0
         RETURN nRC
      END

      SetNameForView( vPE, "TZPESRCO", vSubtask, zLEVEL_TASK )
   END

   // Process each subcontrol.
   FOR EACH vControl.CtrlCtrl
      SetViewToSubobject( vControl, "CtrlCtrl" )
      ControlRelinkDelete( vDialog, vControl, vLastLOD,
                           LastViewZKey, vLOD_LPLR, vSubtask )
      ResetViewFromSubobject( vControl )
   END

   // Set szWindowReportName depending on whether or not view "Report" exists.
// GET VIEW vReport NAMED "vReport"
   GetViewByName( vReport, "vReport", vSubtask, zLEVEL_TASK )
   IF vReport != 0
      szWindowReportName = "Group: " + vReport.Group.Tag
   ELSE
      szWindowReportName = "Window: " + vDialog.Window.Tag
   END

   //BL, 2000.02.03 new search pfad
   SET CURSOR FIRST vPE.ControlDef WHERE
              vPE.ControlDef.Key = vControl.ControlDef.Key
   IF RESULT < zCURSOR_SET
      SET CURSOR FIRST vPE.ControlDef WHERE
                 vPE.ControlDef.Tag = vControl.ControlDef.Tag
      IF RESULT < zCURSOR_SET
         SET CURSOR FIRST vPE.ControlDef WHERE
                          vPE.ControlDef.ZKey = vControl.ControlDef.ZKey
      END
   END

   IF RESULT >= zCURSOR_SET
      EXCLUDE vControl.ControlDef
      INCLUDE vControl.ControlDef FROM vPE.ControlDef
   ELSE
      szMsg ="ControlDef doesn't exist: " + vControl.ControlDef.Tag
      MessageSend( vSubtask, "WD00204", "ControlRelinkDelete",
                   szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
   END

   /*  For each CtrlMap, check each attribute or entity against the corresponding
       LOD to make sure that attribute or entity exists in the LOD.  If it doesn't,
       delete the CtrlMap.  */
   FOR EACH vControl.CtrlMap
      IF vControl.CtrlMapView EXISTS
         IF LastViewZKey != vControl.CtrlMapView.ZKey
            SET CURSOR FIRST vDialog.ViewObjRef WHERE
                vDialog.ViewObjRef.ZKey = vControl.CtrlMapView.ZKey
            IF RESULT >= zCURSOR_SET
               nRemapFlag = 0
            ELSE
               SET CURSOR FIRST vDialog.ViewObjRef WHERE
                   vDialog.ViewObjRef.Name = vControl.CtrlMapView.Name
               IF RESULT >= zCURSOR_SET
                  // If there was a match on Name but not on Zkey,
                  // reinclude the CtrlMapView.
                  EXCLUDE vControl.CtrlMapView
                  INCLUDE vControl.CtrlMapView FROM vDialog.ViewObjRef
                  nRemapFlag = 0
               ELSE
                  nRemapFlag = -1
                  szMsg = "Deleting Control Mapping for:|   " + szWindowReportName +
                          "|   Control: " + vControl.Control.Tag +
                          "| because of missing View: " + vControl.CtrlMapView.Name
                  SysReadZeidonIni( -1, "[Workstation]", "ContinueParseGen", szContinueParseGen )
                  IF szContinueParseGen = "N"
                     TraceLineS( szMsg, "" )
                  ELSE
                     MessageSend( vSubtask, "WD00506", "Control Relink",
                                  szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                  END
                  DELETE ENTITY vControl.CtrlMap NONE
               END
            END
            IF nRemapFlag = 0
               // There was a match on CtrlMapView ZKey or Name.
               // Make sure the corresponding LOD is activated.
               IF LastViewZKey != 0
                  DropMetaOI( vSubtask, vLastLOD )
                  LastViewZKey = 0
               END

               nRC = ActivateMetaOI_ByZKey( vSubtask, vLastLOD, 0, zREFER_LOD_META,
                                            zSINGLE, vDialog.LOD.ZKey, 0 )
               IF nRC < 0
                  nRC = ActivateMetaOI_ByName( vSubtask, vLastLOD, 0, zREFER_LOD_META,
                                               zSINGLE, vDialog.LOD.Name, 0 )
               END

               IF nRC < 0
                  // If we get here, we have a Zeidon error.
                  szMsg = "Deleting CtrlMap due to LOD load error.| Registered View Name: " +
                          vDialog.ViewObjRef.Name
                  MessageSend( vSubtask, "WD00507", "Control Relink",
                               szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                  DELETE ENTITY vControl.CtrlMap NONE
               ELSE
                  LastViewZKey = vDialog.ViewObjRef.ZKey
                  NAME VIEW vLastLOD "vLastLOD"
               END
            END
         END

 //         IF vControl.CtrlMapView EXISTS
 //            RelinkInstanceToInstance( vControl, "CtrlMapView",
 //                                      vDialog, "ViewObjRef" )

         IF vControl.CtrlMapLOD_Attribute EXISTS
            SET CURSOR FIRST vLastLOD.LOD_Attribute WITHIN vLastLOD.LOD WHERE
                vLastLOD.LOD_Attribute.ZKey = vControl.CtrlMapLOD_Attribute.ZKey
            IF RESULT < 0
               // Since there was no match on ZKey, try to find a match on LOD Entity
               // name and ER Attribute name, in case the Attribute had been deleted
               // and recreated.  In this case, re-include the Attribute.
               SET CURSOR FIRST vLastLOD.LOD_Entity WHERE
                                vLastLOD.LOD_Entity.Name = vControl.CtrlMapRelatedEntity.Name
               IF RESULT >= zCURSOR_SET
                  SET CURSOR FIRST vLastLOD.ER_Attribute WITHIN vLastLOD.LOD_Entity WHERE
                                   vLastLOD.ER_Attribute.Name = vControl.CtrlMapER_Attribute.Name
                  IF RESULT >= zCURSOR_SET     //
                     nRemapFlag = 0
                  ELSE
                     nRemapFlag = -1
                  END
               ELSE
                  nRemapFlag = -1
               END
               IF nRemapFlag = 0  // We were able to remap to an attribute by same name.
                  EXCLUDE vControl.CtrlMapLOD_Attribute
                  INCLUDE vControl.CtrlMapLOD_Attribute FROM vLastLOD.LOD_Attribute
               ELSE
                  szMsg = "Deleting Control Mapping for:|   " + szWindowReportName +
                          "|   Control: " + vControl.Control.Tag +
                          "| because of missing Attribute: " + vControl.CtrlMapER_Attribute.Name
                  SysReadZeidonIni( -1, "[Workstation]", "ContinueParseGen", szContinueParseGen )
                  IF szContinueParseGen = "N"
                     TraceLineS( szMsg, "" )
                  ELSE
                     MessageSend( vSubtask, "WD00508", "Control Relink",
                                  szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                  END
                  IF vControl.CtrlMapLOD_Attribute EXISTS
                     EXCLUDE vControl.CtrlMapLOD_Attribute
                  END
                  IF vControl.CtrlMapLOD_Entity EXISTS
                     EXCLUDE vControl.CtrlMapLOD_Entity
                  END
                  IF vControl.CtrlMapContext EXISTS
                     EXCLUDE vControl.CtrlMapContext
                  END
                  IF vControl.CtrlMapView EXISTS
                     EXCLUDE vControl.CtrlMapView
                  END
               END
            ELSE
               // Relink or Re-Include CtrlMapLOD_Attribute, & subordinates & Context
               //RelinkInstanceToInstance( vControl, "CtrlMapLOD_Attribute",
               //                          vLastLOD, "LOD_Attribute" )
               //RelinkInstanceToInstance( vControl, "CtrlMapRelatedEntity",
               //                          vLastLOD, "LOD_Entity" )
               //RelinkInstanceToInstance( vControl, "CtrlMapER_Attribute",
               //                          vLastLOD, "ER_Attribute" )
               //RelinkInstanceToInstance( vControl, "CtrlMapER_Domain",
               //                          vLastLOD, "Domain" )

               // If ER_Attribute or ER_Domain don't match on ZKey,
               // reinclude the LOD_Attribute entity.
               IF vControl.CtrlMapER_Attribute.ZKey  != vLastLOD.ER_Attribute.ZKey OR
                  vControl.CtrlMapER_Domain.ZKey     != vLastLOD.Domain.ZKey

                  EXCLUDE vControl.CtrlMapLOD_Attribute
                  INCLUDE vControl.CtrlMapLOD_Attribute FROM vLastLOD.LOD_Attribute
               END

               IF vControl.CtrlMapContext EXISTS
                  // Try to find the Domain first by ZKey and then by name.
                  // If found, also find the Context by ZKey and then by name.
                  // If no match was finally found, exclude the Context.
                  nRC = ActivateMetaOI_ByZKey( vSubtask, vDomain, 0, zREFER_DOMAIN_META,
                                               zSINGLE, vControl.CtrlMapER_Domain.ZKey , 0 )
                  IF nRC >= 0
                     SET CURSOR FIRST vDomain.Context WHERE
                         vDomain.Context.ZKey = vControl.CtrlMapContext.ZKey
                     IF RESULT >= zCURSOR_SET
                        nRemapFlag = 0
                     ELSE
                        SET CURSOR FIRST vDomain.Context WHERE
                            vDomain.Context.Name = vControl.CtrlMapContext.Name
                        IF RESULT >= zCURSOR_SET
                           nRemapFlag = 1
                           EXCLUDE vControl.CtrlMapContext
                           INCLUDE vControl.CtrlMapContext FROM vDomain.Context
                        ELSE
                           nRemapFlag = -1
                        END
                     END
                  ELSE
                     nRC = ActivateMetaOI_ByName( vSubtask, vDomain, 0, zREFER_DOMAIN_META,
                                                  zSINGLE, vControl.CtrlMapER_Domain.Name , 0 )
                     IF nRC >= 0
                        SET CURSOR FIRST vDomain.Context WHERE
                            vDomain.Context.Name = vControl.CtrlMapContext.Name
                        IF RESULT >= zCURSOR_SET
                           nRemapFlag = 1
                           EXCLUDE vControl.CtrlMapContext
                           INCLUDE vControl.CtrlMapContext FROM vDomain.Context
                        ELSE
                           nRemapFlag = -1
                        END
                     ELSE
                        nRemapFlag = -1
                     END
                  END
                  IF nRemapFlag = -1
                     szMsg = "Excluding Context for:|   " + szWindowReportName +
                             "|   Control: " + vControl.Control.Tag +
                             "| because of missing Context: " + vControl.CtrlMapContext.Name
                     MessageSend( vSubtask, "WD00509", "Control Relink",
                                  szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     EXCLUDE vControl.CtrlMapContext NONE
                  ELSE
                     IF nRemapFlag = 0
                        RelinkInstanceToInstance( vControl, "CtrlMapContext",
                                                  vDomain, "Context" )
                     END
                     DropMetaOI( vSubtask, vDomain )
                  END
               END
            END
         END

         IF vControl.CtrlMapLOD_Entity EXISTS
            SET CURSOR FIRST vLastLOD.LOD_Entity WHERE
                vLastLOD.LOD_Entity.ZKey = vControl.CtrlMapLOD_Entity.ZKey
            IF RESULT < 0
               // Since there was no match on ZKey, try again on name in case the
               // LOD_Entity had been deleted and readded.
               SET CURSOR FIRST vLastLOD.LOD_Entity WHERE
                   vLastLOD.LOD_Entity.Name = vControl.CtrlMapLOD_Entity.Name
               IF RESULT >= zCURSOR_SET
                  EXCLUDE vControl.CtrlMapLOD_Entity
                  INCLUDE vControl.CtrlMapLOD_Entity FROM vLastLOD.LOD_Entity
               ELSE
                  szMsg = "Deleting Control Mapping for:|   " + szWindowReportName +
                          "|   Control: " + vControl.Control.Tag +
                          "| because of missing Entity: " + vControl.CtrlMapLOD_Entity.Name
                  SysReadZeidonIni( -1, "[Workstation]", "ContinueParseGen", szContinueParseGen )
                  IF szContinueParseGen = "N"
                     TraceLineS( szMsg, "" )
                  ELSE
                     MessageSend( vSubtask, "WD00510", "Control Relink",
                                  szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                  END
                  DELETE ENTITY vControl.CtrlMap NONE
               END
            ELSE
               // Relink CtrlMapLOD_Entity
               RelinkInstanceToInstance( vControl, "CtrlMapLOD_Entity",
                                         vLastLOD, "LOD_Entity" )
            END
         END

      END
   END

END

/************************************************************************
   ENTRY:    OptionRelinkDelete
   PURPOSE:  This function evalutes each entity within the ActMap
             subobject and deletes any that are no longer in the
             corresponding LOD.
***********************************************************************/
LOCAL OPERATION
OptionRelinkDelete( VIEW vSubtask,
                    VIEW vLOD_LPLR   BASED ON LOD TZCMLPLO,
                    VIEW vDialog     BASED ON LOD TZWDLGSO,
                    VIEW vOption     BASED ON LOD TZWDLGSO,
                    VIEW vLastLOD    BASED ON LOD TZZOLODO,
                    INTEGER LastViewZKey )

   VIEW         vDomain BASED ON LOD TZDGSRCO
   STRING (255) szMsg
   INTEGER      nRemapFlag
   SHORT  nRC

   // Process each subcontrol.
   FOR EACH vOption.OptOpt
      SetViewToSubobject( vOption, "OptOpt" )
      OptionRelinkDelete( vSubtask, vLOD_LPLR, vDialog, vOption, vLastLOD, LastViewZKey )
      ResetViewFromSubobject( vOption )
   END

   /*  For each OptMap, check each entity against the corresponding
       LOD to make sure that entity exists in the LOD.  If it doesn't,
       delete the OptMap.  */
   FOR EACH vOption.OptMap
      IF vOption.OptMapView EXISTS
         // Get the correct LOD, if the last one used isn't the one in this OptMap.
         IF LastViewZKey != vOption.OptMapView.ZKey
            SET CURSOR FIRST vDialog.ViewObjRef WHERE
                vDialog.ViewObjRef.ZKey = vOption.OptMapView.ZKey
            IF RESULT >= zCURSOR_SET
               nRemapFlag = 0
            ELSE
               SET CURSOR FIRST vDialog.ViewObjRef WHERE
                   vDialog.ViewObjRef.Name = vOption.OptMapView.Name
               IF RESULT >= zCURSOR_SET
                  // If there was a match on Name but not on Zkey,
                  // reinclude the OptMapView.
                  EXCLUDE vOption.OptMapView
                  INCLUDE vOption.OptMapView FROM vDialog.ViewObjRef
                  nRemapFlag = 0
               ELSE
                  szMsg = "Deleting Option Mapping for:|   Window: " + vDialog.Window.Tag +
                          "|   Option: " + vOption.Option.Tag +
                          "| because of missing View: " + vOption.OptMapView.Name
                  MessageSend( vSubtask, "WD00511", "Dialog Relink",
                               szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                  DELETE ENTITY vOption.OptMap NONE
                  nRemapFlag = -1
               END
            END
            IF nRemapFlag = 0
               // There was a match on OptMapView Zkey or Name.
               // Make sure the corresponding LOD is activated.
               IF LastViewZKey != 0
                  DropMetaOI( vSubtask, vLastLOD )
                  LastViewZKey = 0
               END

               nRC = ActivateMetaOI_ByZKey( vSubtask, vLastLOD, 0, zREFER_LOD_META,
                                            zSINGLE, vDialog.LOD.ZKey, 0 )
               IF nRC < 0
                  // If we get here, we have a Zeidon error.
                  szMsg = "Deleting OptMap due to LOD load error.| Registered View Name: " +
                          vDialog.ViewObjRef.Name
                  MessageSend( vSubtask, "WD00512", "Dialog Relink",
                               szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                  DELETE ENTITY vOption.OptMap NONE
               ELSE
                  LastViewZKey = vDialog.ViewObjRef.ZKey
                  NAME VIEW vLastLOD "vLastLOD"
                  // Relink OptMapView?? Is it necessary?
               END
            END
         END

 //         IF vOption.OptMapView EXISTS
 //            RelinkInstanceToInstance( vOption, "OptMapView",
 //                                      vDialog, "ViewObjRef" )


         IF vOption.OptMapLOD_Attribute EXISTS
            SET CURSOR FIRST vLastLOD.LOD_Attribute WITHIN vLastLOD.LOD WHERE
                vLastLOD.LOD_Attribute.ZKey  = vOption.OptMapLOD_Attribute.ZKey
            IF RESULT < 0
               // Since there was no match on ZKey, try to find a match on LOD Entity
               // name and ER Attribute name, in case the Attribute had been deleted
               // and recreated.  In this case, re-include the Attribute.
               SET CURSOR FIRST vLastLOD.LOD_Entity WHERE
                                vLastLOD.LOD_Entity.Name = vOption.OptMapRelatedEntity.Name
               IF RESULT >= zCURSOR_SET
                  SET CURSOR FIRST vLastLOD.ER_Attribute WITHIN vLastLOD.LOD_Entity WHERE
                                   vLastLOD.ER_Attribute.Name = vOption.OptMapER_Attribute.Name
                  IF RESULT >= zCURSOR_SET     //
                     nRemapFlag = 0
                  ELSE
                     nRemapFlag = -1
                  END
               ELSE
                  nRemapFlag = -1
               END
               IF nRemapFlag = 0  // We were able to remap to an attribute by same name.
                  EXCLUDE vOption.OptMapLOD_Attribute
                  INCLUDE  vOption.OptMapLOD_Attribute FROM vLastLOD.LOD_Attribute
               ELSE
                  szMsg = "Deleting Option Mapping for:|   Window: " + vDialog.Window.Tag +
                          "|   Option: " + vOption.Option.Tag +
                          "| because of missing Attribute: " + vOption.OptMapER_Attribute.Name
                  MessageSend( vSubtask, "WD00513", "Dialog Activate",
                               szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                  DELETE ENTITY vOption.OptMap NONE
               END
            ELSE
               // Relink OptMapLOD_Attribute, & subordinates & OptMapContext
               //RelinkInstanceToInstance( vOption,  "OptMapLOD_Attribute",
               //                          vLastLOD, "LOD_Attribute" )
               //RelinkInstanceToInstance( vOption,  "OptMapRelatedEntity",
               //                          vLastLOD, "LOD_Entity" )
               //RelinkInstanceToInstance( vOption,  "OptMapER_Attribute",
               //                          vLastLOD, "ER_Attribute" )
               //RelinkInstanceToInstance( vOption,  "OptMapER_Domain",
               //                          vLastLOD, "Domain" )
               IF vOption.OptMapContext EXISTS
                  // Try to find the Domain first by ZKey and then by name.
                  // If found, also find the Context by ZKey and then by name.
                  // If no match was finally found, exclude the Context.
                  nRC = ActivateMetaOI_ByZKey( vSubtask, vDomain, 0, zREFER_DOMAIN_META,
                                               zSINGLE, vOption.OptMapER_Domain.ZKey , 0 )
                  IF nRC >= 0
                     SET CURSOR FIRST vDomain.Context WHERE
                         vDomain.Context.ZKey = vOption.OptMapContext.ZKey
                     IF RESULT >= 0
                        nRemapFlag = 0
                     ELSE
                        SET CURSOR FIRST vDomain.Context WHERE
                            vDomain.Context.Name = vOption.OptMapContext.Name
                        IF RESULT >= zCURSOR_SET
                           nRemapFlag = 1
                           EXCLUDE vOption.OptMapContext
                           INCLUDE vOption.OptMapContext FROM vDomain.Context
                        ELSE
                           nRemapFlag = -1
                        END
                     END
                  ELSE
                     nRC = ActivateMetaOI_ByName( vSubtask, vDomain, 0, zREFER_DOMAIN_META,
                                                  zSINGLE, vOption.OptMapER_Domain.Name , 0 )
                     IF nRC >= 0
                        SET CURSOR FIRST vDomain.Context WHERE
                            vDomain.Context.Name = vOption.OptMapContext.Name
                        IF RESULT >= zCURSOR_SET
                           nRemapFlag = 1
                           EXCLUDE vOption.OptMapContext
                           INCLUDE vOption.OptMapContext FROM vDomain.Context
                        ELSE
                           nRemapFlag = -1
                        END
                     ELSE
                        nRemapFlag = -1
                     END
                  END
                  IF nRemapFlag = -1
                     szMsg = "Excluding Context for:|   Window: " + vDialog.Window.Tag +
                             "|   Option: " + vOption.Option.Tag +
                             "| because of missing Context: " + vOption.OptMapContext.Name
                     MessageSend( vSubtask, "WD00514", "Dialog Activate",
                                  szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     EXCLUDE vOption.OptMapContext NONE
                  ELSE
                     IF nRemapFlag = 0
                        RelinkInstanceToInstance( vOption, "OptMapContext",
                                               vDomain, "Context" )
                     END
                     DropMetaOI( vSubtask, vDomain )
                  END
               END
            END
         END
      END
   END

END

DERIVED ATTRIBUTE OPERATION
NLS_CaptionText( VIEW        vDialog BASED ON LOD TZWDLGSO,
                 STRING (32) lpEntity,
                 STRING (32) lpAttribute,
                 SHORT       GetOrSetFlag )

   SHORT        nLanguageCode
   STRING (255) szCaption

   SysGetLanguageCode ( nLanguageCode )

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Determine Caption text to use by checking the NLS Language Code for a match on
      // a CaptionNLS_Text entity.  If there is a match, use it.  Otherwise, use the Window.Caption
      // attribute.

      SET CURSOR FIRST vDialog.CaptionNLS_Text WHERE
                       vDialog.CaptionNLS_Text.LanguageIndex = nLanguageCode
      IF RESULT >= zCURSOR_SET
         szCaption = vDialog.CaptionNLS_Text.Text
      ELSE
         szCaption = vDialog.Window.Caption
      END

      StoreStringInRecord ( vDialog, lpEntity, lpAttribute, szCaption )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

      // As for zDERIVED_GET above, use the Language Code to store the data entered into
      // the derived attribute into the correct attribute.
      // If there is CaptionNLS_Text entity that matches the Language Code, then set the data there.
      // If not, set it into the Window.Caption attribute.

      GetStringFromRecord ( vDialog, lpEntity, lpAttribute, szCaption, 254 )

      SET CURSOR FIRST vDialog.CaptionNLS_Text WHERE
                       vDialog.CaptionNLS_Text.LanguageIndex = nLanguageCode
      IF RESULT >= zCURSOR_SET
         vDialog.CaptionNLS_Text.Text = szCaption
      ELSE
         vDialog.Window.Caption = szCaption
      END

        /* end zDERIVED_SET */
   END  /* case */

END


DERIVED ATTRIBUTE OPERATION
NLS_ControlText( VIEW        vDialog BASED ON LOD TZWDLGSO,
                 STRING (32) lpEntity,
                 STRING (32) lpAttribute,
                 SHORT       GetOrSetFlag )

   /*SHORT        nLanguageCode
   STRING (254) szControl

   SysGetLanguageCode ( nLanguageCode )

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Determine Control text to use by checking the NLS Language Code for a match on
      // a ControlNLS_Text entity.  If there is a match, use it.  Otherwise, use the Control.Text
      // attribute.

      SET CURSOR FIRST vDialog.ControlNLS_Text WHERE
                       vDialog.ControlNLS_Text.LanguageIndex = nLanguageCode
      IF RESULT >= zCURSOR_SET
         szControl = vDialog.ControlNLS_Text.Text
      ELSE
         szControl = vDialog.Control.Text
      END

      StoreStringInRecord ( vDialog, lpEntity, lpAttribute, szControl )

        // end zDERIVED_GET
   OF   zDERIVED_SET:

      // As for zDERIVED_GET above, use the Language Code to store the data entered into
      // the derived attribute into the correct attribute.
      // If there is ControlNLS_Text entity that matches the Language Code, then set the data there.
      // If not, set it into the Window.Control attribute.

      GetStringFromRecord ( vDialog, lpEntity, lpAttribute, szControl, 254 )

      SET CURSOR FIRST vDialog.ControlNLS_Text WHERE
                       vDialog.ControlNLS_Text.LanguageIndex = nLanguageCode
      IF RESULT >= zCURSOR_SET
         vDialog.ControlNLS_Text.Text = szControl
      ELSE
         vDialog.Control.Text = szControl
      END

        // end zDERIVED_SET
   END  // case */

END

DERIVED ATTRIBUTE OPERATION
NLS_OptionText( VIEW        vDialog BASED ON LOD TZWDLGSO,
                STRING (32) lpEntity,
                STRING (32) lpAttribute,
                SHORT       GetOrSetFlag )

   SHORT        nLanguageCode
   STRING (254) szOption

   SysGetLanguageCode ( nLanguageCode )

   CASE GetOrSetFlag
   OF   zDERIVED_GET:

      // Determine Option text to use by checking the NLS Language Code for a match on
      // a OptionNLS_Text entity.  If there is a match, use it.  Otherwise, use the Option.Text
      // attribute.

      SET CURSOR FIRST vDialog.OptionNLS_Text WHERE
                       vDialog.OptionNLS_Text.LanguageIndex = nLanguageCode
      IF RESULT >= zCURSOR_SET
         szOption = vDialog.OptionNLS_Text.Text
      ELSE
         szOption = vDialog.Option.Text
      END

      StoreStringInRecord ( vDialog, lpEntity, lpAttribute, szOption )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

      // As for zDERIVED_GET above, use the Language Code to store the data entered into
      // the derived attribute into the correct attribute.
      // If there is OptionNLS_Text entity that matches the Language Code, then set the data there.
      // If not, set it into the Window.Option attribute.

      GetStringFromRecord ( vDialog, lpEntity, lpAttribute, szOption, 254 )

      SET CURSOR FIRST vDialog.OptionNLS_Text WHERE
                       vDialog.OptionNLS_Text.LanguageIndex = nLanguageCode
      IF RESULT >= zCURSOR_SET
         vDialog.OptionNLS_Text.Text = szOption
      ELSE
         vDialog.Option.Text = szOption
      END

        /* end zDERIVED_SET */
   END  /* case */

END


DERIVED ATTRIBUTE OPERATION
NLS_ControlDIL_Text( VIEW        vDialog BASED ON LOD TZWDLGSO,
                     STRING (32) lpEntity,
                     STRING (32) lpAttribute,
                     SHORT       GetOrSetFlag )

   SHORT        nLanguageCode
   STRING (254) szDIL

   SysGetLanguageCode ( nLanguageCode )

   CASE GetOrSetFlag
   OF   zDERIVED_GET:
      // Determine Control.NLS_DIL_Text to use by checking the NLS Language Code for a match on
      // a ControlNLS_DIL_Text entity.  If there is a match, use it.  Otherwise, use the
      // Control.DIL_Text attribute.

      SET CURSOR FIRST vDialog.ControlNLS_DIL_Text WHERE
                       vDialog.ControlNLS_DIL_Text.LanguageIndex = nLanguageCode
      IF RESULT >= zCURSOR_SET
         szDIL = vDialog.ControlNLS_DIL_Text.Text
      ELSE
         szDIL = vDialog.Control.DIL_Text
      END

      StoreStringInRecord ( vDialog, lpEntity, lpAttribute, szDIL )

        /* end zDERIVED_GET */
   OF   zDERIVED_SET:

      // As for zDERIVED_GET above, use the Language Code to store the data entered into
      // the derived attribute into the correct attribute.
      // If there is ControlNLS_DIL_Text entity that matches the Language Code, then set the
      // data there.  If not, set it into the Window.Control attribute.

      GetStringFromRecord ( vDialog, lpEntity, lpAttribute, szDIL, 254 )

      SET CURSOR FIRST vDialog.ControlNLS_DIL_Text WHERE
                       vDialog.ControlNLS_DIL_Text.LanguageIndex = nLanguageCode
      IF RESULT >= zCURSOR_SET
         vDialog.ControlNLS_DIL_Text.Text = szDIL
      ELSE
         vDialog.Control.DIL_Text = szDIL
      END

        /* end zDERIVED_SET */
   END  /* case */

END
/////////////////////////////////////////////////////////////////////////////
// Build VML as part of TZLODOPR
//
//  OPERATION: GenerateJSP
//
// Lower Case Tag and Attribute Names
// Since XHTML is case sensitive, and since XHTML only accepts lower case
// HTML tags and attribute names, a general search and replace function was
// executed to replace all upper case tags with lowercase tags. The same was
// done for attribute names. We have always tried to use lower case names in
// our Web, so the replace function did not produce many real substitutions.
//
// All Attributes were Quoted
// Since the W3C XHTML 1.0 Recommendation states that all attribute values
// must be quoted, every page in the web was checked to see that attributes
// values were properly quoted. This was a time-consuming job, and we will
// surely never again forget to put quotes around our attribute values.
//
// Empty Tags: <hr> , <br> and <img>
// Empty tags are not allowed in XHTML. The <hr> and <br> tags should be
// replaced with <hr /> and <br />.
// This produced a problem with Netscape that misinterpreted the <br/> tags.
// We don't know why, but changing it to <br /> worked fine. After that
// discovery, a general search and replace function was executed to swap the
// tags.  A few other tags (like the <img> tag) were suffering from the same
// problem as above. We decided not to close the <img> tags with </img>, but
// with  /> at the end of the tag. This was done manually.
//

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: FlagUsedViewsGetFocusR
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
FlagUsedViewsGetFocusR( VIEW vDialog     BASED ON LOD TZWDLGSO,
                        VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                        STRING ( 32 )    szFocusCtrlTag,
                        INTEGER          lTabIndex,
                        STRING ( 32 )    szWysiwygEditor )

   STRING ( 50 ) szControlType
   STRING ( 1 )  szProcessControlFlag
   INTEGER       lTempIndex
   INTEGER       lSubtype
   INTEGER       lSubtypeX
   INTEGER       lSort
   INTEGER       nRC

   lSort = 0

   // This operation performs the following functions:
   // 1. It is used to identify any Named Views that have mapping on this window (sets flag wWindowUseFlag).
   // 2. It identifies if a Grid exists that uses sorting. (That is needed to pull in the proper .js files.)
   // 3. It identifies the Control that should be given focus by setting the szFocusCtrlTag value.
   // 4. It identifies each ComboBox on the Page. This is used to generate on OnChange event capture by the calling routine.
   // 5. It identifies if there is an MLE request for the wysiwygEditor files.

   FOR EACH vDialog.Control

      szControlType = vDialog.ControlDef.Tag

      szProcessControlFlag = ""
      IF szControlType = "GridEditCtl"
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
         IF RESULT >= zCURSOR_SET
            // For a GridEditCtl control, we have input mapping only if "Edit" property is requested.
            szProcessControlFlag = "Y"
         END
      END
      IF szControlType = "GroupBox"
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Survey Group"
         IF RESULT >= zCURSOR_SET
            // If we have a group box that has a web property of "Survey Group" then this is a survey and
            // we will need mapping for each survey question.
            szProcessControlFlag = "Y"
         END
      END
      IF szControlType = "EditBox" OR
         szControlType = "ComboBox" OR
         szControlType = "Text" OR
         szControlType = "CheckBox" OR
         szControlType = "ListBox" OR
         szControlType = "MLEdit" OR
         szControlType = "Outliner" OR
         szControlType = "RadioGrp" OR
         szControlType = "GridCheckCtl" OR
         szControlType = "Grid" OR
         szControlType = "Calendar" OR
         szProcessControlFlag = "Y"

         // 1.(above) Identify any Named Views that have mapping on this window.
         SET CURSOR FIRST vDialog.CtrlMapView WITHIN vDialog.Control
         IF RESULT >= zCURSOR_SET
            SET CURSOR FIRST vDialogRoot.ViewObjRef
                       WHERE vDialogRoot.ViewObjRef.ZKey = vDialog.CtrlMapView.ZKey
            IF RESULT >= zCURSOR_SET
               vDialogRoot.ViewObjRef.wWindowUseFlag = "Y"
            END

            IF szControlType = "ComboBox"
               SET CURSOR NEXT vDialog.CtrlMap
               IF vDialog.CtrlMapView EXISTS
                  SET CURSOR FIRST vDialogRoot.ViewObjRef
                             WHERE vDialogRoot.ViewObjRef.ZKey = vDialog.CtrlMapView.ZKey
                  IF RESULT >= zCURSOR_SET
                     vDialogRoot.ViewObjRef.wWindowUseFlag = "Y"
                  END
               END
            END
         END

         // 2.(above) For Grid, identify is Sort is requested.
         IF lSort = 0 AND szControlType = "Grid"

            lSubtypeX = vDialog.Control.ExtendedStyle

            // #define zSS_SORTEDHEADERS 0x00040000 = 262144
            // #define zSS_REMEMBERSORT  0x00020000 = 131072

            lSort = IsFlagSequenceSet( lSubtypeX, 262144 )
            IF lSort = 0
               lSort = IsFlagSequenceSet( lSubtypeX, 131072 )
            END

         END

         // 3.(above) Except for Grid, ListBox and Text, process for setting Focus.
         IF szControlType != "Grid" AND
            szControlType != "Text" AND
            szControlType != "ListBox"

            lTempIndex = vDialog.Control.SyncKey
            IF lTempIndex != 0 AND lTempIndex < lTabIndex

               szFocusCtrlTag = vDialog.Control.Tag
               lTabIndex = lTempIndex

            END
         END

         // 4.(above) Create entry for ComboBox.
         IF szControlType = "ComboBox"
            lSubtype = vDialog.Control.Subtype
            nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
            IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
               CREATE ENTITY vDialogRoot.ComboBoxEntry
               vDialogRoot.ComboBoxEntry.Name = vDialog.Control.Tag
            END
         END

         // 5.(above) Check for wysiwygEditor.
         IF szControlType = "MLEdit" AND vDialog.Control.WebCtrlType = "wysiwygEditor"
            szWysiwygEditor = vDialog.Control.JavaScript
            IF szWysiwygEditor = ""
               szWysiwygEditor = vDialog.Control.Tag
            END
         END

      ELSE
         // Continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            lTempIndex = FlagUsedViewsGetFocusR( vDialog, vDialogRoot, szFocusCtrlTag, lTabIndex, szWysiwygEditor )
            IF lTempIndex != 0
               lSort = 1
            END

            ResetViewFromSubobject( vDialog )

         END
      END
   END

   RETURN lSort
END

/*************************************************************************************************
**
**    OPERATION: GenJSP_FindTAB
**
**
*************************************************************************************************/
LOCAL OPERATION
GenJSP_FindTAB( VIEW vWindow BASED ON LOD TZWDLGSO )

   SHORT nRC

   // Determine if a Control with a TAB exists for a Control on the Window.
   // If so, return a 1.
   IF vWindow.Control.SyncKey < 9999
      RETURN 1
   END
   FOR EACH vWindow.CtrlCtrl
      SetViewToSubobject( vWindow, "CtrlCtrl" )
      nRC = GenJSP_FindTAB( vWindow )
      ResetViewFromSubobject( vWindow )
      IF nRC > 0
         RETURN nRC
      END
   END
   RETURN 0

END

/////////////////////////////////////////////////////////////////////////////
//
// Note: Globally change //UNDEF to /*DEF*/ and vice versa to enable/disable
//       generation of some debugging code.
//
/////////////////////////////////////////////////////////////////////////////

TRANSFORMATION OPERATION
GenerateJSP( VIEW vDialog BASED ON LOD TZWDLGSO,
             VIEW vSubtask )

   VIEW vLPLR        BASED ON LOD TZCMLPLO
   VIEW vDialogRoot  BASED ON LOD TZWDLGSO
   VIEW vDialogTemp  BASED ON LOD TZWDLGSO
   VIEW vDialogTemp2 BASED ON LOD TZWDLGSO
   VIEW vGroupParent BASED ON LOD TZWDLGSO
   VIEW vDfltMenu    BASED ON LOD TZWDLGSO
   STRING ( 32 )    szLPLR_Name
   STRING ( 1024 )  szJSP_FileName
   STRING ( 1024 )  szJS_FileName
   STRING ( 1024 )  szDirectoryName
   STRING ( 10000 ) szWriteBuffer
   STRING ( 10000 ) szJavaScript
   STRING ( 100 )   szIndent
   STRING ( 100 )   szIndentNext
   STRING ( 256 )   szMsg
   STRING ( 32 )    szWebDebugView
   STRING ( 32 )    szViewName
   STRING ( 32 )    szEntityName
   STRING ( 32 )    szCtrlTag
   STRING ( 32 )    szListCtrlTag
   STRING ( 32 )    szFocusCtrlTag
   STRING ( 34 )    szActionTag
   STRING ( 32 )    szDialogTag
   STRING ( 32 )    szWindowTag
   STRING ( 32 )    szAttributeName
   STRING ( 256 )   szClass
   STRING ( 64 )    szFormName
   STRING ( 34 )    szAction
   STRING ( 1 )     InitializationCode
   STRING ( 1 )     InsertBlankFlag
   STRING ( 1 )     szInsertPrebuildJavascriptInline
   STRING ( 1 )     WorkFlag
   STRING ( 100 )   szSizeF
   STRING ( 1024 )  szStyle
   STRING ( 1024 )  szFileName
   STRING ( 1 )     szBorder
   STRING ( 50 )    szCSS_Class
   STRING ( 50 )    szDivContentClass
   STRING ( 50 )    szControlType
   STRING ( 256 )   szBannerName
   STRING ( 10 )    szHeight
   STRING ( 10 )    szWidth
   STRING ( 64 )    szSystemIniApplName
   STRING ( 1 )     szTransferFileFlag
   STRING ( 1 )     szListButtonFlag
   STRING ( 1 )     szTrace
   STRING ( 50 )    szreCAPTCHAImport
   STRING ( 15 )    szIOImport
   STRING ( 50 )    szTempStr
   STRING ( 1 )     szUploadFile
   STRING ( 1 )     szDownloadFile
   STRING ( 1 )     szSideMenuExists
   STRING ( 1 )     szShowSideMenu
   STRING ( 1 )     szShowTopMenu
   STRING ( 1 )     szShowBanner
   STRING ( 1 )     szNoPositioning
   STRING ( 1 )     szWindowIsPopup
   STRING ( 1 )     szWindowIsForDashboard
   STRING ( 1 )     szNoAutoLogout
   STRING ( 1 )     szKeyRole
   STRING ( 10 )    szTimeout
// INTEGER          lHeight
// INTEGER          lWidth
   INTEGER          lFileJSP
   INTEGER          lControl
   INTEGER          lHeaderFile
   INTEGER          lLastPosY
   INTEGER          lSize
   INTEGER          X_Size
   INTEGER          Y_Size
   INTEGER          lExtentY
   INTEGER          lMinExtentY
   INTEGER          lTableRowCnt
   INTEGER          lTabIndex
   INTEGER          lSort
   INTEGER          lTrace
// INTEGER          lFloat
   STRING ( 32 )    szWysiwygEditor
   INTEGER          ReusableDialogZKey
   INTEGER          ReusableWindowZKey
   DECIMAL          DLUnits
   INTEGER          lLth
   SHORT            nRC

   // Generate a JSP file for formatting the Window that has current position.

   NAME VIEW vDialog "GenJSP_Dialog"
   szDialogTag = vDialog.Dialog.Tag
   szWindowTag = vDialog.Window.Tag
   szFormName = szDialogTag + szWindowTag

   // Initialize Output JSP File.
   GetViewByName( vLPLR, "TaskLPLR", vSubtask, zLEVEL_TASK )
   szLPLR_Name = vLPLR.LPLR.Name
   szSystemIniApplName = "[App." + szLPLR_Name + "]"
   SysReadZeidonIni( -1, szSystemIniApplName, "WebMinExtentY", szTempStr )
   lMinExtentY = zatol( szTempStr )

   szDirectoryName = ""
   szSystemIniApplName = "[App." + vLPLR.LPLR.Name + "]"
   SysReadZeidonIni( -1, szSystemIniApplName, "WebDebugView", szWebDebugView )
   SysReadZeidonIni( -1, szSystemIniApplName, "WebKeyRole", szKeyRole )
   SysReadZeidonIni( -1, szSystemIniApplName, "WebDirectory", szDirectoryName )
   IF szDirectoryName = ""
      szWriteBuffer = "Zeidon.ini file does not have WebDirectory entry in Application: " + szSystemIniApplName
      MessageSend( vSubtask, "", "JSP Generation",
                   szWriteBuffer,
                   zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      RETURN -1
   END

   SysReadZeidonIni( -1, szSystemIniApplName, "JSPTraceLevel", szTrace )
   TraceLineS("** TraceLevel ** ", szTrace)
   IF  szTrace = "1"
      lTrace = 1
   ELSE
      lTrace = 0
   END

   szFileName = szDirectoryName + szFormName + ".jsp"
   SysConvertEnvironmentString( szJSP_FileName, szFileName )

   TraceLineS( "GenerateJSP writing to file: ", szJSP_FileName )
   lFileJSP = SysOpenFile( vDialog, szJSP_FileName, COREFILE_WRITE )
   IF lFileJSP < 0
      MessageSend( vSubtask, "", "JSP Generation",
                   "Invalid JSP directory structure.",
                   zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      RETURN -1
   END

   CreateViewFromViewForTask( vDialogRoot, vDialog, 0 )
   NAME VIEW vDialogRoot "DialogRoot"

   // KJS 07/23/08 - Check if this dialog window will be built with all relative positioning or with absolute positioning
   IF  vDialog.Dialog.WEB_RelativePositionFlag = "Y" OR vDialog.Window.WEB_RelativePositionFlag = "Y"
      szNoPositioning = "Y"
   ELSE
      szNoPositioning = ""
   END

   // KJS 02/19/09 - Added WEB_AbsolutePositionFlag because I would like to use absolute positioning on my popup pages but the rest
   // I want to use relative positioning.  Since I think from now on we will probably only want to use relative positioning for most
   // pages, I think it will be easier to have this flag.
   IF  vDialog.Window.WEB_AbsolutePositionFlag = "Y"
      szNoPositioning = ""
   END

   // KJS 09/16/08 - Thinking that if WEB_NoBannerFlag = "Y" and WEB_NoTopMenuFlag = "Y" and
   // szNoPositioning = "Y" (using relative positioning) then we can assume that this window
   // is a popup window and so we can get rid of the div "wrapper" and "maincontents" so that
   // the only div will be the content div.  Currently you can still see the body background like all
   // other windows, and I'm not sure we want that.
   // KJS 10/30/08 - I added two styles to the "Window Style" (this is in zeidon.ppe) one for popup and
   // one for dashboard.
   IF vDialogRoot.WndStyle.Tag = "Popup Window"
      szWindowIsPopup = "Y"
   ELSE
   IF vDialogRoot.Window.WEB_NoBannerFlag = "Y" AND vDialogRoot.Window.WEB_NoTopMenuFlag = "Y" AND szNoPositioning = "Y"
      szWindowIsPopup = "Y"
   ELSE
      szWindowIsPopup = ""
   END
   END


   // Check to see if Window has any tab stops set and indicate so in the Window entity.
   nRC = 0
   FOR EACH vDialog.Control
      IF nRC = 0
         nRC = GenJSP_FindTAB( vDialog )
      END
   END
   IF nRC = 0
      vDialogRoot.Window.wWindowHasTabsFlag = "N"
   ELSE
      vDialogRoot.Window.wWindowHasTabsFlag = "Y"
   END

   // JSP HEADER

   // KJS 05/29/08 - We need to add a DOCTYPE to the jsp page.  Not exactly sure
   // which one to add and how often this might need to change (wondering if this should
   // be kept in the .ini file or something but for now I'll put it here.
   // Here is a website with a little info http://www.alistapart.com/stories/doctype/
   // Also this one http://htmlhelp.com/tools/validator/doctype.html
   //szWriteBuffer = "<!DOCTYPE HTML PUBLIC ^-//W3C//DTD HTML 4.01 Transitional//EN^ ^http://www.w3.org/TR/html4/loose.dtd^>"
   szWriteBuffer = "<!DOCTYPE HTML>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%-- " + szFormName + " --%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szIOImport = ""
   szreCAPTCHAImport = ""

   CreateViewFromView( vDialogTemp, vDialog )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "File Transfer to Server"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   // If we are uploading a file, we need to include "java.oi.*" in the import statement.
   IF nRC >= zCURSOR_SET
      szIOImport = "java.io.*"
      szUploadFile = "Y"
      TraceLineS("*** DOWNLOAD FILE Y *** ", "")
   END

   FOR EACH vDialogTemp.Action
      // If there is an action to download a file, we need to include "java.oi.*" in the import statement.
      IF vDialogTemp.Action.Type = zWAB_ProcessDownloadFile
         szIOImport = "java.io.*"
      END
      // If there is an action for the reCAPTCHA control, then we need
      // net.tanesha.recaptcha.* in the import statement
      IF vDialogTemp.Action.Type = 35 OR vDialogTemp.Action.Type = 55
         szreCAPTCHAImport = "net.tanesha.recaptcha.*"
      END
   END

   // If there is an groupbox for the reCAPTCHA control, then we need
   // net.tanesha.recaptcha.* in the import statement
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "reCAPTCHA"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )

   // If we are uploading a file, we need to include "java.oi.*" in the import statement.
   IF nRC >= zCURSOR_SET
      szreCAPTCHAImport = "net.tanesha.recaptcha.*"
   END

// szWriteBuffer = "<%@ page import=^java.util.*,javax.servlet.*,javax.servlet.http.*,zeidon.zView" + szIOImport + szreCAPTCHAImport + "^ %>"
   szWriteBuffer = "<%@ page import=^java.util.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^javax.servlet.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^javax.servlet.http.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^zeidon.zView^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   IF szIOImport != ""
      szWriteBuffer = "<%@ page import=^" + szIOImport + "^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   IF szreCAPTCHAImport != ""
      szWriteBuffer = "<%@ page import=^" + szreCAPTCHAImport + "^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   ELSE
      szWriteBuffer = "<%@ page import=^com.quinsoft." + szLPLR_Name + ".*^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // KJS 07/10/15 - Include for an import file for any extra imports.
   IF vDialog.Dialog.WEB_ImportInclude != ""
      szWriteBuffer = "<%@ include file=^" + vDialog.Dialog.WEB_ImportInclude  + "^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   /*
   IF szUploadFile = "Y" OR szDownloadFile = "Y"
      // Page Header when File Transfer exists on Window.
      szWriteBuffer = "<%@ page import=^java.util.*,javax.servlet.*,javax.servlet.http.*,java.io.*,zeidon.zView^ %>"
   ELSE
      // Page Header when File Transfer does not exist on Window.
      //KJS 12/11/07 - I'm going to put the java.io here as well, because we need this if there is file download
      //on the page.  This could be on a subcontrol (in a grid) so for now I'm just putting this in.
      szWriteBuffer = "<%@ page import=^java.util.*,javax.servlet.*,javax.servlet.http.*,zeidon.zView^ %>"
   END
   */
   DropView( vDialogTemp )
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /*
   // KJS 08/30/12 - Putting this in for Aadit... Show in seconds the page load time.
   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // Show the time in seconds it takes to load the page."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   Date tPageStart   = new Date();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   */

   szWriteBuffer = "<%! "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // FindOpenFile public function
   // KJS 10/31/08 - This function is now in kzoejava.c and we do not want it in the jsp code.
   /*
   szWriteBuffer = "public String FindOpenFile( String strSID, zeidon.zView vAS )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   zeidon.zView vTemp = new zeidon.zView( strSID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strFile = vAS.MakeWebFileName( strSID, 0 ) + ^.html^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int   nRC = vTemp.GetView( strSID, strFile, vAS );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vTemp.DropName( strSID, strFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return strFile;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "   return ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   */

   // INPUT MAPPING

   // First loop through controls and null out each Named View that is used.
   FOR EACH vDialog.ViewObjRef
      vDialog.ViewObjRef.wWindowUseFlag = ""
   END

   // Execute FlagUsedViewsGetFocusR for multiple functions, such as determining which views are used in mapping.
   FOR EACH vDialogRoot.ComboBoxEntry
      DELETE ENTITY vDialogRoot.ComboBoxEntry NONE
   END

   szWysiwygEditor = ""  // do not include widgEditor.js file
   szFocusCtrlTag = ""
   lTabIndex = 9999
   lSort = FlagUsedViewsGetFocusR( vDialog, vDialogRoot, szFocusCtrlTag, lTabIndex, szWysiwygEditor )
   TraceLineS( "Focus on Control: ", szFocusCtrlTag )

   /******************************  ReplaceXSSValues  ******************************/
   // To prevent cross-scripting attacks.
   szWriteBuffer = "public String ReplaceXSSValues( String szFieldValue )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String szOutput;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   szOutput = szFieldValue.replace(^<^,^&lt;^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   szOutput = szOutput.replace(^>^,^&gt;^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   szOutput = szOutput.replace(^\^^,^&quot;^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   szOutput = szOutput.replace(^\'^,^&apos;^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   return( szOutput );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /******************************  DoInputMapping  ******************************/

   // Create prototype and any definitions for views that are to be used.
   szWriteBuffer = "public int DoInputMapping( HttpServletRequest request,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                           HttpSession session,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                           ServletContext application )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strSID = session.getId( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   zeidon.zView vAS = (zeidon.zView) session.getAttribute( ^ZeidonSubtask^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   FOR EACH vDialog.ViewObjRef WHERE vDialog.ViewObjRef.wWindowUseFlag = "Y"
      szWriteBuffer = "   zeidon.zView " + vDialog.ViewObjRef.Name + " = new zeidon.zView( strSID );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "   zeidon.zView vGridTmp = new zeidon.zView( strSID ); // temp view to grid view"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   zeidon.zView vMsgQ = new zeidon.zView( strSID ); // view to Message Queue"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   zeidon.zView v = new zeidon.zView( strSID );     // view to Message Queue"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   String strError = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strDateFormat = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strMapValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    iView = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    lEntityKey = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strEntityKey = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTag = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTemp = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    iTableRowCnt = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strSuffix = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    nRelPos = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    nMapError = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   vAS.TraceLine( ^DoInputMapping for jsp =======>> ^, ^" + szFormName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   vAS.TraceLine( ^DoInputMapping Session ID: ^ + strSID, vAS );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // Generate mapping statements for each view and control.
   FOR EACH vDialog.ViewObjRef WHERE vDialog.ViewObjRef.wWindowUseFlag = "Y"

      szViewName = vDialog.ViewObjRef.Name
      szWriteBuffer = "   nRC = " + szViewName + ".GetView( strSID, ^" + szViewName + "^, vAS );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      szWriteBuffer = "   if ( nRC > 0 )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      OrderEntityForView( vDialog, "Control", "PSDLG_Y A PSDLG_X A" )
      GenJSP_InputMapRecurs( vDialog, szViewName, lFileJSP, szWriteBuffer, lTableRowCnt )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   szWriteBuffer = "   if ( nMapError < 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      iView = vAS.GetIntegerFromView( strSID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vAS.TraceLine( ^DoInputMapping ERROR =======>> ^, strError );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = vMsgQ.GetView( strSID, ^__MSGQ^, vAS );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         v.CreateViewFromView( strSID, vMsgQ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAS.TraceLine( ^DoInputMapping found __MSGQ^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         v.DisplayObjectInstance( strSID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAS.TraceLine( ^DoInputMapping __MSGQ View: ^, iView );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         nRC = v.SetCursorFirst( strSID, ^Task^, ^Id^, iView, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAS.TraceLine( ^DoInputMapping SetCursorFirst RC: ^, nRC );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nRC == 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            nRC = v.SetCursorFirst( strSID, ^QMsg^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if ( nRC == 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               vAS.TraceLine( ^DoInputMapping found QMsg Entity^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               v.SetAttributeFromVariable( strSID, ^QMsg^, ^Title^, strError, 'S',"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                                           strError.length( ) + 1, ^^, 8 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "            while ( nRC == 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               v.DisplayEntityInstance( strSID, ^QMsg^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               nRC = v.SetCursorNext( strSID, ^QMsg^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               vAS.TraceLine( ^DoInputMapping SetCursorNext RC: ^, nRC );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "            vAS.TraceLine( ^DoInputMapping after __MSGQ^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "         v.DisplayObjectInstance( strSID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         v.DropView( strSID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         nRC = -1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      return( nRC );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   return( 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /******************************  End of DoInputMapping  ******************************/

   // End of JSP functions.
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   /************************* MAIN SECTION INITIALIZATION  This is where action jsp code will be created. ***********************/

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "session = request.getSession( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strSessionId = session.getId( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "zeidon.zView vAppSubtask; // view to this subtask"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "zeidon.zView wWebXA = new zeidon.zView( strSessionId ); // view to web transfer area"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "zeidon.zView vMsgQ = new zeidon.zView( strSessionId ); // view to Message Queue"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "zView vKZXMLPGO = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strLastPage;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "short  nRepos = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int bDone = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int nPos = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int nOptRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "int nRCk = 0;  // temp fix for SetCursorEntityKey"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "int lEKey = 0; // temp fix for SetCursorEntityKey"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "String strKey = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strActionToProcess = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strURL = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strError = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strErrorFlag = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strErrorTitle = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strErrorMsg = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strFocusCtrl = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strBannerName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strOpenFile = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strOpenPopupWindow = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strPopupWindowSZX = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strPopupWindowSZY = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strDateFormat = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF szKeyRole = "Y"
      szWriteBuffer = "String strLoginName = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "String strKeyRole = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   IF szWebDebugView != ""
      szWriteBuffer = "String strFeedback = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "String strDialogName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strWindowName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strLastWindow = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strLastAction = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strFunctionCall = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strNextJSP_Name = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strInputFileName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int iFileLth = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // If this time through, this happens to be a refresh, then go to the logout screen.
   szWriteBuffer = "   strActionToProcess = (String) request.getParameter( ^zAction^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "strLastWindow = (String) session.getAttribute( ^ZeidonWindow^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "if ( strLastWindow == null ) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "strLastWindow = ^NoLastWindow^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "strLastAction = (String) session.getAttribute( ^ZeidonAction^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // If this is a log on page (like wStartupLogin) then we don't want to have the 'Unregister Zeidon' happen
   // if the user leaves the page or refreshes.  It causes problems.  So we won't go to the logout page here.
   IF ( vDialog.Window.WEB_RegisterZeidonWindow != "Y" )
      szWriteBuffer = "if ( strLastWindow.equals(^" + szFormName + "^) && strActionToProcess == null && strLastAction == null )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "{"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strURL = response.encodeRedirectURL( ^logout.jsp^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   response.sendRedirect( strURL );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   return;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "}"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // vAppSubtask
   szWriteBuffer = "// Check to see if the Zeidon subtask view already exists.  If not, create"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// it and copy it into the application object."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "vAppSubtask = (zeidon.zView) session.getAttribute( ^ZeidonSubtask^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "if ( vAppSubtask == null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 09/25/09 - Previously we were looking for the word "Login" in a window name to determine
   // if this window should have the RegisterZeidonApplication in it.  I will keep this code for now
   // but I really think this should be a property for the window.  I have added a checkbox to WND_UPD
   // for this.
   nRC = zSearchSubString( szFormName, "Login", "f", 0 )
   IF nRC >= 0 OR vDialog.Window.WEB_RegisterZeidonWindow = "Y" // "wStartUpLogin"

      szWriteBuffer = "   vAppSubtask = new zeidon.zView( strSessionId );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   vAppSubtask.RegisterZeidonApplication( strSessionId, ^//" + vLPLR.LPLR.Name + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   session.setAttribute( ^ZeidonSubtask^, vAppSubtask );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "}"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      szWriteBuffer = "if ( vAppSubtask == null )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "{"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   return; // something really bad has happened!!!"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   ELSE
   /*
      szWriteBuffer = "   strURL = response.encodeRedirectURL( ^wStartUpLogin.jsp^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strActionToProcess = ^?^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   bDone = 1;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC = 1;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   */
      szWriteBuffer = "   strURL = response.encodeRedirectURL( ^logout.jsp^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   response.sendRedirect( strURL );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   return; // something really bad has happened!!!"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   END

   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   vAppSubtask.TraceLine( ^Initialize ========>>> Session ID: ^ + strSessionId, vAppSubtask );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // KJS 02/29/2008 - We would like to delete report files when they are generated.  Here is code
   // that sort of does the trick but the problem is that I need to know the exact file where the
   // jsp code is kept.  How should we do this.  I can try and get the current directory and then
   // figure it from there (I believe when I tried, current directory was
   // c:\program file...\webapps\" but then I need to know whether we are \zencas or \noa etc and
   // would this work in all cases.  Can't do theory like timout.inc cause this is jsp.  Do I hard
   // code the directory in the .ini file and assume all noa users would have the same tomcat directory
   // structure.  Need to talk to Aadit and Jeff.
   // Also, do I only want to create this code if this page contains a report or should I just do it all the
   // time?  Action.Type = 41 seems to be the action for start Browser HTML...
   /*
   CreateViewFromView( vDialogTemp, vDialog )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogTemp, "Action", "Type", lControl,
                          "41", "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      strOpenFile = request.getParameter( "zOpenFile" );
      if ( strOpenFile != null && strOpenFile != "" )
      {
         strOpenFile = "C:\\Program Files\\Apache Group\\Tomcat 5.5\\webapps\\ROOT\\zencas\\" + strOpenFile;
         File f = new File(strOpenFile);
         //USE szSystemIniApplName????!!!!
         //strOpenFile = "/zencas/kellytext.txt";
         //File f = new File(request.getRealPath(strOpenFile));
         f.delete();
      }
   END
   DropView( vDialogTemp )
   */

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   vAppSubtask.TraceLine( ^Page Name ========>>> ^ + ^" + szFormName + "^, vAppSubtask );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      szWriteBuffer = "   vAppSubtask.TraceLine( ^zAction ========>>> ^ + strActionToProcess, vAppSubtask );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // Generate Transfer File to Server logic if there is a GroupBox of type "File Transfer to Server".
   CreateViewFromView( vDialogTemp, vDialog )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "File Transfer to Server"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      GenJSP_ProcessFileIn( vDialog, lFileJSP, szWriteBuffer )
   END
   DropView( vDialogTemp )

   // vKZXMLPGO
   szWriteBuffer = "   if ( vKZXMLPGO == null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vKZXMLPGO = new zeidon.zView( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   nRC = vKZXMLPGO.GetView( strSessionId, ^KZXMLPGO^, vAppSubtask );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( nRC <= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vKZXMLPGO.InitWebSessionObject( strSessionId, vAppSubtask, ^TestUserID^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vKZXMLPGO.SetName( strSessionId, ^KZXMLPGO^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   nRC = vMsgQ.GetView( strSessionId, ^__MSGQ^, vAppSubtask );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

/* DKS_TRACE_START
   // Temporary traces to understand how Error Object is used.
   szWriteBuffer = "   if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vAppSubtask.TraceLine( ^***Message Object Check: FOUND __MSGQ^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vAppSubtask.TraceLine( ^***Message Object Check: NOT found __MSGQ^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
DKS_TRACE_END */

   szWriteBuffer = "   vAppSubtask.SetDefaultViewForActiveTask( strSessionId, 2 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // MAIN SECTION ACTION PROCESSING

   szWriteBuffer = "   strURL = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   bDone = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "vAppSubtask.TraceLine(^*** " + szFormName + " strActionToProcess *** ^, strActionToProcess );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "vAppSubtask.TraceLine(^*** " + szFormName + " LastWindow *** ^, strLastWindow );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "strLastAction = (String) session.getAttribute( ^ZeidonAction^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "vAppSubtask.TraceLine(^*** " + szFormName + " LastAction *** ^, strLastAction );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "if ( strActionToProcess != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   if ( vAppSubtask != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "      vAppSubtask.TraceLine( ^Process Action: ^, strActionToProcess );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   // Process Error Object.
   szWriteBuffer = "      // Delete the message object if error on last interation."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = vMsgQ.GetView( strSessionId, ^__MSGQ^, vAppSubtask );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vMsgQ.DropObjectInstance( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF szWebDebugView != ""

      szWriteBuffer = "   if ( vAppSubtask != null )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strFeedback = request.getParameter( ^zFeedback^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( strFeedback != ^^ )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vAppSubtask.TraceLine( ^DoInputMapping Feedback: ^, strFeedback );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vAppSubtask.SaveFeedback( strSessionId, ^" + szWebDebugView + "^, ^" + szDialogTag
      szWriteBuffer = szWriteBuffer + "^, ^" + szWindowTag + "^, strFeedback );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   // Create Action code for each Action, except for Window Actions.
   FOR EACH vDialog.Action
      szActionTag = vDialog.Action.Tag  // moved here just to assist debugging
      IF vDialog.ActWndEvent DOES NOT EXIST
      // OR vDialog.ActEvent EXISTS // DKS likes this line ... Don does not
      // OR vDialog.ActOpt EXISTS   // DKS likes this line ... Don does not

         nRC = zstrcmpi( szActionTag, "alt-f4" )
         IF nRC = 0
            szActionTag = "AltF4"
         END

         IF vDialog.Action.Type != zWAB_ExitDialogTask
            // We don't format the Action on exit dialog, as the function in the java script calls OnUnload.
            GenJSP_Action( vDialog, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szActionTag, lTrace )
         END
      ELSE
      IF vDialog.ActEvent EXISTS OR vDialog.ActOpt EXISTS
         TraceLineS( "Action has WndEvent that PREVENTS generation: ", szActionTag )
      END
      END
   END

   //If there are comboboxes on this page that are "auto include" or "set foreign key" but
   //doesn't have another action, then we need a generic action that gets called.  We need
   //to submit the page and have the DoInputMapping called (this is where the
   //autoinclude etc code gets called).

   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^ZEIDON_ComboBoxSubmit^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // Input Mapping"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = DoInputMapping( request, session, application );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC < 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // No redirection, we are staying on this page."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // If the Window has a reusable side menu, add the actions from that menu.
   IF vDialog.ReusableSideWindow EXISTS
      IF vDialog.ReusableSideDialog.ZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "sm" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        //IF lLth > 32
                        //   MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                        //                szAction,
                        //                zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        //END

                        GenJSP_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByName( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, vDialog.ReusableSideDialog.Tag, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "sm" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        //IF lLth > 32
                        //   MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                        //                szAction,
                        //                zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        //END

                        GenJSP_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window or Dialog has a reusable main menu, add the actions from that menu.
   ReusableDialogZKey = 0
   IF vDialog.ReusableMainWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableMainDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableMainWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableMainWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableMainDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableMainWindow.ZKey
      END
   END
   IF ReusableDialogZKey != 0  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "m" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSP_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "m" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSP_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window or Dialog has a reusable main menu for actions only, add the actions from that menu.
   ReusableDialogZKey = 0
   IF vDialog.ReusableActionWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableActionDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableActionWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableActionWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableActionDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableActionWindow.ZKey
      END
   END
   IF ReusableDialogZKey != 0  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "ma" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSP_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "ma" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSP_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // OnUnload
   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^_OnUnload^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      session.setAttribute( ^ZeidonAction^, ^_OnUnload^ );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      if ( vAppSubtask != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         nOptRC = vAppSubtask.CallDialogOperation( strSessionId, ^zGLOBALW^, ^CleanupObjects^, 0 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAppSubtask.TraceLine( ^OnUnload UnregisterZeidonApplication: ----------------------------------->>> ^, ^" + szFormName + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAppSubtask.UnregisterZeidonApplication( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAppSubtask = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         session.setAttribute( ^ZeidonSubtask^, vAppSubtask );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // Next Window is HTML termination"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^logout.jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // OnTimeout
   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^_OnTimeout^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      session.setAttribute( ^ZeidonAction^, ^_OnTimeout^ );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      if ( vAppSubtask != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         nOptRC = vAppSubtask.CallDialogOperation( strSessionId, ^zGLOBALW^, ^CleanupObjects^, 0 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAppSubtask.TraceLine( ^OnUnload UnregisterZeidonApplication: ----------------------------------->>> ^, ^" + szFormName + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAppSubtask.UnregisterZeidonApplication( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAppSubtask = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         session.setAttribute( ^ZeidonSubtask^, vAppSubtask );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      // Next Window is HTML termination"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^TimeOut.html^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // OnResubmitPage
   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^_OnResubmitPage^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      session.setAttribute( ^ZeidonAction^, ^_OnResubmitPage^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      // Input Mapping"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = DoInputMapping( request, session, application );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC < 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + szFormName + ".jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = 1;  //do the redirection"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( nRC != 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nRC > 1 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strURL = response.encodeRedirectURL( ^" + szFormName + ".jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            vAppSubtask.TraceLine( ^Action Error Redirect to: ^, strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "         strActionToProcess = " + zQUOTES + zQUOTES + ";"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nRC > -128 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strActionToProcess = " + zQUOTES + zQUOTES + ";"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strURL = response.encodeRedirectURL( ^" + szFormName + ".jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            vAppSubtask.TraceLine( ^Mapping Error Redirect to: %s^, strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            vAppSubtask.TraceLine( ^InputMapping Reentry Prevented^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( strActionToProcess.length( ) == 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // vAppSubtask.GarbageCollectViews( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "if ( strErrorFlag != ^Y^ && vAppSubtask != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // DKS 2015.06.19 - Get the InsertPrebuildJavascriptInlineFlag.
   SysReadZeidonIni( -1, szSystemIniApplName, "InsertPrebuildJavascriptInlineFlag", szInsertPrebuildJavascriptInline )

   szJavaScript = ""

   // Actions Section Trailer, including prebuild and postbuild code.
   InsertBlankFlag = "N"
   FOR EACH vDialog.Action
      FOR EACH vDialog.ActWndEvent
         IF vDialog.ActWndEvent.Type = 1 OR vDialog.ActWndEvent.Type = 2

            IF InsertBlankFlag = "Y"
               szWriteBuffer = ""
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            END

            // KJS 04/30/15 - Inserting javascript code for prebuild action.
            IF vDialog.ActWndEvent.Type = 1 AND vDialog.Action.WebJavaScript != ""
               szJavaScript = vDialog.Action.WebJavaScript
            END

            IF vDialog.ActOper EXISTS

               szWriteBuffer = "   nOptRC = vAppSubtask.CallDialogOperation( strSessionId, ^" +
                               vDialog.Dialog.Tag + "^, ^" +
                               vDialog.ActOper.Name + "^, 1 );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nOptRC <= -128 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      vAppSubtask.TraceLine( ^Operation Reentry Prevented^, ^^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      return;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

               szWriteBuffer = "   if ( nOptRC == 2 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      zeidon.zView vView;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strMessage;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strURLParameters;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

               szWriteBuffer = "      vView = new zeidon.zView( strSessionId );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = vView.GetView( strSessionId, ^wXferO^, vAppSubtask );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strMessage = vView.GetString( strSessionId, ^Root^, ^WebReturnMessage^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strURLParameters = ^?CallingPage=" + szFormName + ".jsp^ +"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                         ^&Message=^ + strMessage +"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                         ^&DialogName=^ + ^" + vDialog.Dialog.Tag + "^ +"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                         ^&OperationName=^ + ^" + vDialog.ActOper.Name + "^;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strURL = response.encodeRedirectURL( ^MessageDisplay.jsp^ + strURLParameters );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      response.sendRedirect( strURL );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      vAppSubtask.TraceLine( ^Pre/Post Redirect to: ^, strURL );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      return;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            END
            InsertBlankFlag = "Y"
         END
      END
   END

   IF InsertBlankFlag = "Y"
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // If there is a dynamic banner name specified in the vKZXMLPGO object for this Dialog, use it. Otherwise, try to use the one in the Dialog definition.
   szWriteBuffer = "   nRC = vKZXMLPGO.SetCursorFirst( strSessionId, ^DynamicBannerName^, ^DialogName^, ^" + szDialogTag + "^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( nRC >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strBannerName = vKZXMLPGO.GetString( strSessionId, ^DynamicBannerName^, ^BannerName^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( strBannerName == null |||| strBannerName.isEmpty( ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szBannerName = vDialog.Dialog.WEB_TopBannerName

   // If a banner include file has been entered by the user, then use this, otherwise
   // hardcode "./include/banner.inc" as the banner name.
   IF szBannerName != ""
      szWriteBuffer = "      strBannerName = ^" + szBannerName + "^;"
   ELSE
      szWriteBuffer = "      strBannerName = ^./include/banner.inc^;"
   END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
/*
   szBannerName = vDialog.Dialog.WEB_TopBannerName
   IF szBannerName = ""
      szWriteBuffer = "   strBannerName = vAppSubtask.GetBannerName( strSessionId, ^" + szDialogTag + "^ );"
   ELSE
      szWriteBuffer = "   strBannerName = ^" + szBannerName + "^;"
   END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   nRC = wWebXA.GetView( strSessionId, ^wWebXfer^, vAppSubtask );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      wWebXA.SetAttributeFromVariable( strSessionId, ^Root^, ^CurrentDialog^,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                                       ^" + szDialogTag + "^, 'S', 33, ^^, 8 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      wWebXA.SetAttributeFromVariable( strSessionId, ^Root^, ^CurrentWindow^,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                                       ^" + szWindowTag + "^, 'S', 33, ^^, 8 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
*/

   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /************************* End of MAIN SECTION INITIALIZATION (JSP CODE)   ***********************/

   // Start HTML

   // HTML SECTION *****************************************************************

   // JSP HEADER

   szWriteBuffer = "<html>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<head>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF vDialog.Window.Caption != ""
      szWriteBuffer = "<title>" + vDialog.Window.Caption + "</title>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // KJS 04/30/15 - I can't think why we have the myheader.inc, why we would have that for pages absolute pages.
   // We didn't have Window.WEB_PageHeadInclude in the painter, but now it is there.
   //IF szNoPositioning = "Y" OR szNoPositioning = "S"
      IF vDialog.Window.WEB_PageHeadInclude != ""
         szWriteBuffer = "<%@ include file=^" + vDialog.Window.WEB_PageHeadInclude + "^ %>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      ELSE
         IF vDialog.Dialog.WEB_PageHeadInclude != ""
            szWriteBuffer = "<%@ include file=^" + vDialog.Dialog.WEB_PageHeadInclude  + "^ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         ELSE
            szWriteBuffer = "<%@ include file=^./include/head.inc^ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         END
      END
   //ELSE
   //   szWriteBuffer = "<%@ include file=^./include/myheader.inc^ %>"
   //   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //END

   // KJS 2/19/08 - Trying to help Jeff with timeout.  Place a
   // timeout value in timeout.inc for when to timeout.
   szWriteBuffer = "<!-- Timeout.inc has a value for nTimeout which is used to determine when to -->"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<!-- log a user out.  Timeout.inc is not used if the dialog or window has a timeout value set. -->"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ include file=^./include/timeout.inc^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 08/06/08 - Instead of using the class="noprint" to not display
   // a div or control when print/previewing a page, I think we will use the
   // class print.css.  Cleaner and easier to change items that we want hidden/not hidden.
   szWriteBuffer = "<link rel=^stylesheet^ type=^text/css^ href=^./css/print.css^ media=^print^ />"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   /*****************************  JavaScript Functions Section *****************************************************/

   // common.js is used by both the Grid and Calendar controls. Since it's small, we'll always send it.
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/common.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF lSort != 0
      // css.js and sts.js are used only by the Grid control when sorting is requested. Thus, we'll only send
      // it down to the browser when sorting is requested.
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/css.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/sts.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/validations.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/scw.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 04/27/11 - I am not sure that we want to always include this js file but if not, then I need
   // to loop through all controls (and subcontrols) looking for a div that has a web control property of
   // "Show/Hide Toggle". For now I am always including it.
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/animatedcollapse.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // KJS 06/09/11 - I am not sure that we want to always include this js file because at the moment, I am putting
   // this in because we want to do a md5 hash conversion.
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/md5.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   IF szWysiwygEditor != ""

      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<!-- TinyMCE -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      szJS_FileName = ""
      SysReadZeidonIni( -1, szSystemIniApplName, "TinyMCEJavaScript", szJS_FileName )
      IF szJS_FileName = ""
         szJS_FileName = "./tinymce/jscripts/tiny_mce/tiny_mce.js"
      END

      // Use TinyMCE rather than widgEditor.
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^" + szJS_FileName
      szWriteBuffer = szWriteBuffer + "^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      nRC = zSearchSubString( szWysiwygEditor, ".js", "f", 0 )
      IF nRC < 0
         szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/TinyMCE.js^></script>"
      ELSE
         szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^"
         szWriteBuffer = szWriteBuffer + szWysiwygEditor
         szWriteBuffer = szWriteBuffer + "^></script>"
      END
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      szWriteBuffer = "<!-- /TinyMCE -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   // KJS 01/16/07 - If we have tab controls on the screen, Jeff wants to have the declarations up
   // here in this section.
   CreateViewFromView( vDialogTemp, vDialogRoot )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szEntityName = "Tab"

   // Look for a control with ControlDef of "Tab"
   // vDialog.ControlDef.Tag
   nRC = SetEntityCursor( vDialogTemp, "ControlDef", "Tag", lControl,
                          szEntityName, "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/tabpane.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // KJS 04/30/15 - If we have any javascript code on a window prebuild action, we should add it here.
   IF szJavaScript != ""
      // DKS 2015.06.15 - If InsertPrebuildJavascriptInline = "Y" (has to do with KeyRole), then we should not
      // add the JavaScript here for prebuild action... will be added in _AfterPageLoaded function.
      IF szInsertPrebuildJavascriptInline != "Y"
        szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ >"
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
        szWriteBuffer = "      // Javascript code entered by user for Window action prebuild."
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
        szWriteBuffer = szJavaScript
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
        szWriteBuffer = "      // END of Javascript code entered by user."
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
        szWriteBuffer = "</script>"
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      END
   END

   //szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^tabpane.js^></script>"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "var isWindowClosing = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "var timerID = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "onerror = handleErr;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "window.history.forward( 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Look for additional Tab controls.
   LOOP WHILE nRC >= zCURSOR_SET

      szWriteBuffer = "var " + vDialogTemp.Control.Tag + ";"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      lControl = zQUAL_STRING + zPOS_NEXT + zRECURS

      // Look for a control with controldef of "Tab"
      // vDialog.ControlDef.Tag
      nRC = SetEntityCursor( vDialogTemp, "ControlDef", "Tag", lControl,
                             szEntityName, "", "", 0, "Window", "" )
   END

   DropView( vDialogTemp )

   // Place a blank line here for reading purposes.
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "function handleErr( msg, url, l )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "// Uncomment the following (invalid) line and put it in some function below to help find the error."
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "// document.replace(^http://www.enc.edu/^);"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   var txt = ^There was an error on this page.\n\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^Error: ^ + msg + ^\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^URL: ^ + url + ^\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^Line: ^ + l + ^\n\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^Click OK to continue.\n\n^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   alert( txt );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   return true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "// This function returns Internet Explorer's major version number,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// or 0 for others. It works by finding the ^MSIE ^ string and"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// extracting the version number following the space, up to the decimal"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// point, ignoring the minor version number."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "function msieversion( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var ua = window.navigator.userAgent;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var msie = ua.indexOf( ^MSIE ^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( msie > 0 )      // if Internet Explorer, return version number"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return parseInt( ua.substring( msie + 5, ua.indexOf( ^.^, msie ) ) );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else                 // if another browser, return 0"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //Function _OnAlmostTimeout
   szWriteBuffer = "function _OnAlmostTimeout()"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var tStart   = new Date();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      alert(^Your session will timeout in one minute.  Please click 'OK' within that time to continue and save your work if necessary.^)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      var tEnd   = new Date();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var tDiff = tEnd.getTime() - tStart.getTime();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      // If the time is less than one minute, resubmit the page.  Otherwise, go to the timeout window."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( tDiff < 60000 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         document." + szFormName + ".zAction.value = ^_OnResubmitPage^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         document." + szFormName + ".submit( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         _OnTimeout( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //function _OnTimeout
   szWriteBuffer = "function _OnTimeout( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      _DisableFormElements( true );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      document." + szFormName + ".zAction.value = ^_OnTimeout^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      document." + szFormName + ".submit( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //function _BeforePageUnload
   szWriteBuffer = "function _BeforePageUnload( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // If the user clicked on the window close box, then"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // isWindowClosing will be true.  Otherwise if the user"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // clicked on something else in the page, isWindowClosing will be false."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // If the user clicked the window close box, unregister zeidon."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // If the user hits the close box in the upper right of the window or leave this page to another web site,
   // then we want to try a log them out of zeidon because otherwise, we feel we have memory still cached.
   // We want to try and eliminate this and determine if the user has left this application and thus do
   // necessary clean up.
   szWriteBuffer = "      if ( isWindowClosing )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szNoAutoLogout = vDialogRoot.Dialog.WEB_NoAutoLogOut
   // If this is a log on page (like wStartupLogin) then we don't want to have the 'Unregister Zeidon' happen
   // if the user leaves the page or refreshes.  It causes problems.
   // KJS 01/19/11 - If the window is a popup window, then we are not going to try doing the unload if the user
   // hits the close box because most likely on popup windows, user's would close the window this way.
   // KJS 02/09/11 - I have added a new checkbox to the dialog properties window so that we can turn off
   // automatically logging a user out for the pages of a dialog (currently we don't want this for the budget
   // pages in Zencas).  Otherwise, I keep changing this code back and forth to comment out the submit lines.
   IF ( vDialog.Window.WEB_RegisterZeidonWindow != "Y" AND szWindowIsPopup = "" AND szNoAutoLogout != "Y" )
      szWriteBuffer = "         document." + szFormName + ".zAction.value = ^_OnUnload^;"
      //szWriteBuffer = "         document." + szFormName + ".zAction.value = ^_OnUnload^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         document." + szFormName + ".submit( );"
      //szWriteBuffer = "         document." + szFormName + ".submit( );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   ELSE
      szWriteBuffer = "         // These lines are commented out because either we are registering zeidon on this"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // window or this is a popup window so we don't want to do an unload if the user"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // closes the window using the red close button."
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         //document." + szFormName + ".zAction.value = ^_OnUnload^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         //document." + szFormName + ".submit( );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      // No action needs to be taken here. This is just a place holder for traces."
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      // alert( document.wFacultDAdviseeList.zAction.value );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //function _IsDocDisabled
   szWriteBuffer = "function _IsDocDisabled( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var theForm;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var j;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var k;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   for ( j = 0; j < document.forms.length; j++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      theForm = document.forms[ j ];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      for ( k = 0; k < theForm.length; k++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( theForm.elements[ k ].name == ^zDisable^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            return theForm.elements[ k ].disabled;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   return false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //function _DisableFormElements
   szWriteBuffer = "function _DisableFormElements( bDisabled )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var theForm;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var type;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var lis;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var thisLi;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var j;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var k;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var bRC = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( bDisabled && timerID != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      clearTimeout( timerID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Controls on the window may have been set as disabled through javascript but
   // when we try to get the values for these controls in jsp (response.getParameter)
   // they will always be null.  Set any disabled fields to enabled for this reason.
   szWriteBuffer = "   // Controls on the window may have been set as disabled through javascript but"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // when we try to get the values for these controls in jsp (response.getParameter)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // they will always be null.  Set any disabled fields to enabled for this reason."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   for ( j = 0; j < document.forms.length; j++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      theForm = document.forms[ j ];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      for ( k = 0; k < theForm.length; k++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (theForm.elements[ k ].disabled == true)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "             theForm.elements[ k ].disabled = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // We want to set some fields as disabled (like buttons and comboboxes) so that
   // while the jsp code is processing, users can not select these controls.
   // We do not have the above problem with response.getParameter with comboboxes because
   // we have a hidden field for every combobox (h + controltag) and we use that for the
   // response.getParameter in DoInputMapping.
   szWriteBuffer = "   // We want to set some fields as disabled (like buttons and comboboxes) so that"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // while the jsp code is processing, users can not select these controls."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   for ( j = 0; j < document.forms.length; j++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      theForm = document.forms[ j ];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "      for ( k = 0; k < theForm.length; k++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         type = theForm.elements[ k ].type;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

// szWriteBuffer = "         if ( type == ^button^ |||| type == ^checkbox^ |||| type == ^radio^ |||| type == ^select^ )"
// szWriteBuffer = "         if ( type == ^button^ |||| type == ^select-one^ )"
// szWriteBuffer = "         if ( type == ^button^ |||| (type != null && type.indexOf( ^select^ ) == 0) )"
   szWriteBuffer = "         if ( type == ^button^ |||| type == ^submit^ |||| (type != null && type.indexOf( ^select^ ) == 0) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            theForm.elements[ k ].disabled = bDisabled;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( theForm.elements[ k ].name == ^zDisable^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            theForm.elements[ k ].disabled = bDisabled;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            bRC = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   szWriteBuffer = "   lis = document.getElementsByTagName( ^li^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   for ( k = 0; k < lis.length; k++ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      thisLi = lis[ k ];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      thisLi.disabled = bDisabled;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   return bRC;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Default button function.
   IF vDialog.Window.DfltButton != ""
      CreateViewFromView( vDialogTemp, vDialog )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      nRC = SetEntityCursor( vDialogTemp, "Control", "Tag", lControl,
                             vDialog.Window.DfltButton, "", "", 0, "Window", "" )
      IF nRC >= zCURSOR_SET
         IF vDialogTemp.EventAct EXISTS
            szWriteBuffer = "function _OnEnter( e )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "{"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   var keycode;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( window.event )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      keycode = window.event.keyCode;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( e )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         keycode = e.which;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         return true;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

            szWriteBuffer = "   if ( keycode == 13 )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialogTemp.EventAct.Tag + "( );"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return false;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return true;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         END
      END
      DropView( vDialogTemp )
   END

   //function _AfterPageLoaded
   szWriteBuffer = "function _AfterPageLoaded( )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "// _DisableFormElements( false );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   var szFocusCtrl = document." + szFormName + ".zFocusCtrl.value;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( szFocusCtrl != ^^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      eval( 'document." + szFormName + ".' + szFocusCtrl + '.focus( )' );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Need to know "first" tab index by the time we get here!
   IF szFocusCtrlTag != ""
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      document." + szFormName + "." + szFocusCtrlTag + ".focus( );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 ) // add a blank line
   szWriteBuffer = "   // This is where we put out a message from the previous iteration on this window"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var szMsg = document." + szFormName + ".zError.value;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( szMsg != ^^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      alert( szMsg ); // ^Houston ... We have a problem^"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   szMsg = document." + szFormName + ".zOpenFile.value;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( szMsg != ^^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var NewWin = window.open( szMsg );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( NewWin )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         NewWin.focus( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// szWriteBuffer = "         alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from 'my.enc.edu' for this action.^ );"
   szWriteBuffer = "         alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from this site for this action to work.^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF szKeyRole = "Y"
      szWriteBuffer = "   var LoginName = document." + szFormName + ".zLoginName.value;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   var keyRole = document." + szFormName + ".zKeyRole.value;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   CreateViewFromView( vDialogTemp, vDialog )

   // KJS 08/20/15 - We commented out the below code in 08/27/13 in the GenJspJava code. I guess I didn't do that here. :(
   // KJS 08/27/13 - I am commenting this code out because we call the Postbuild javascript code below (comment KJS 09/21/2009), so
   // this code means we call the javascript code twice. Maybe we should have this instead but for now I am taking it out (the below code
   // only looks for Postbuild action (not prebuild) because this is after the page has been rendered.
   /* // ePamms needs the following code DKS 2015.09.22
   // Check of prebuild and postbuild action jsp code.
   FOR EACH vDialogTemp.Action
      FOR EACH vDialogTemp.ActWndEvent
         IF vDialogTemp.ActWndEvent.Type = 1 OR
            vDialogTemp.ActWndEvent.Type = 2
            // DKS 2008.09.10 - We want to insert any javascript code that the
            // user has entered for this pre/post build action.
            szJavaScript = vDialogTemp.Action.WebJavaScript
            IF  szJavaScript != ""
               szWriteBuffer = "   // Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   // END of Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            END
         END
      END
   END
   */ // ePamms needs the above code
   // If this Window/Page has a "Start Web Popup" Action with mapping, then we need the following code
   // to actually start up the Popup, since the script code for the Action had to do the submit to
   // do input mapping.
   SET CURSOR FIRST vDialogTemp.Action
              //WHERE ( vDialogTemp.Action.Type = zWAB_StartModalWebPopup OR vDialogTemp.Action.Type = zWAB_StartModelessWebPopup )
              WHERE ( vDialogTemp.Action.Type = 78 OR vDialogTemp.Action.Type = 79 )
                AND vDialogTemp.Action.NoMap = ""
   IF RESULT >= zCURSOR_SET
      szWidth = ""
      szHeight = ""
      szWriteBuffer = "   szMsg = document." + szFormName + ".zOpenPopupWindow.value;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( szMsg != ^^ )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      //KELLY22
      /*  We don't need this now, we look for these errors and window sizes elsewhere
      // The Popup size (both X and Y values) will be WebSize / 34,000 to convert Window Size to Web Page Size.
      CreateViewFromView( vDialogTemp2, vDialogRoot )
      IF vDialogRoot.Dialog.Tag != vDialogTemp.Action.DialogName
         szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to another Dialog, which is invalid."
         MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      ELSE
         SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = vDialogTemp.Action.WindowName
         IF RESULT < zCURSOR_SET
            szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist."
            MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         ELSE
            zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
            zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
         END
      END
      */

      // KJS 01/25/08 - The popup window was getting the size of the calling window (above code).  Instead, we want the popup window to be
      // the size of the painted popup window.  Added some hidden variables to hold this value (gets set in the OnClick function).
      szWriteBuffer = "   var strWidth = document." + szFormName + ".zPopupWindowSZX.value;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   var strHeight = document." + szFormName + ".zPopupWindowSZY.value;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      // KJS 11/19/09 - Aadit doesn't want to have a height or width in wRunRpts because it doesn't allow the print to work correctly (cuts
      // the page off if it's long).  The only problem is that even though you can control the page width through css, the popup window
      // itself is the size of the browser (not what we always want).  I am keeping this for now because the only other place I use this
      // is in wGradeBk but we might want to have a checkbox to say whether the window should be the size of the dialog window or no
      // height width given.
      // Also adding scrollbars=yes.
      szWriteBuffer = "   var strWindowOptions = ^menubar=0,toolbar=0,resizable=1,modal=1,scrollbars=yes^"
      //szWriteBuffer = "   var strWindowOptions = ^menubar=0,toolbar=0,resizable=1,width=^ + strWidth + ^,height=^ + strHeight + ^,modal=1^"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "      var NewWin = window.open( szMsg, ^^,^menubar=0,toolbar=0,resizable=1,width=" + szWidth + ",height=" + szHeight + ",modal=1^ );"
      szWriteBuffer = "      var NewWin = window.open( szMsg, ^^, strWindowOptions );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( NewWin )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         NewWin.focus( );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // szWriteBuffer = "         alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from 'my.enc.edu' for this action.^ );"
      szWriteBuffer = "         alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from this site for this action to work.^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END
   DropView( vDialogTemp )

   szWriteBuffer = "   document." + szFormName + ".zError.value = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   document." + szFormName + ".zOpenFile.value = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // If this Window/Page has a "Start Web Popup" Action, initialize the zOpenPopupWindow value.
   CreateViewFromView( vDialogTemp, vDialog )
   SET CURSOR FIRST vDialogTemp.Action
              //WHERE ( vDialogTemp.Action.Type = zWAB_StartModalWebPopup OR vDialogTemp.Action.Type = zWAB_StartModelessWebPopup )
              WHERE ( vDialogTemp.Action.Type = 78 OR vDialogTemp.Action.Type = 79 )
                AND vDialogTemp.Action.NoMap = ""
   IF RESULT >= zCURSOR_SET
      szWriteBuffer = "   document." + szFormName + ".zOpenPopupWindow.value = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END
   DropView( vDialogTemp )

   szWriteBuffer = "   if ( timerID != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      clearTimeout( timerID );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Generate a document entry for each ComboBox on the Page.
   IF vDialogRoot.ComboBoxEntry EXISTS
      FOR EACH vDialogRoot.ComboBoxEntry
         szWriteBuffer = "   document." + szFormName + ".h" + vDialogRoot.ComboBoxEntry.Name + ".value = " +
                         "document." + szFormName + "." + vDialogRoot.ComboBoxEntry.Name + ".value"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      END
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   //KJS 12/17/07 - It was decided to change the time-out feature to 60 minutes instead of 15 because many
   //faculty complained about it being too short.  We would really like to control this
   //using userid so that different users can have different timeout times.
   //KJS 2/14/08 - Now we have added LogoutTime to the zeidon.ini file as a quick fix.
   //If the timeout is zero or null then do not have a timeout option for the generated
   //jsp pages.  If there is a value, then create the timeout according to the value.
   /*
   SysReadZeidonIni( -1, szSystemIniApplName, "LogoutTime", szTimeout )
   IF  szTimeout = "" OR szTimeout = "0"
      szWriteBuffer = "   // No timeout value specified."
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   timerID = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   ELSE
      szWriteBuffer = "   var delay = 60000 * " + szTimeout + ";  // Timeout in " + szTimeout + " minutes"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   timerID = setTimeout( ^_OnAlmostTimeout( )^, delay );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   */

   // KJS 2/19/08 - Now trying with a variable in the file timeout.inc.
// szWriteBuffer = "   var delay = 60000 * 15;  // 15 minutes"
   szWriteBuffer = "   var varTimeout = document." + szFormName + ".zTimeout.value;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if (varTimeout > 0)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var delay = 60000 * varTimeout;  // Timeout value in timeout.inc"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = setTimeout( ^_OnAlmostTimeout( )^, delay );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = null; // No timeout specified"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // KJS 09/21/2009
   // If there are postbuild actions for this window, and those actions have javascript code on them, we
   // need to call the java functions that has the javascript code in them (previously only an operation
   // tied to this action was called up in the jsp code).  We are going to put a call to these functions
   // in the _AfterPageLoaded function.
   // Loop through the actions looking for one that has javascript code and place the calls here.
   CreateViewFromView( vDialogTemp, vDialog )
   FOR EACH vDialogTemp.Action

      FOR EACH vDialogTemp.ActWndEvent

         // DKS 2015.05.15 - for prebuild, need javascript code inserted directly into _AfterPageLoaded function,IF lActionType = zWAB_StayOnWindow AND
         // if szInsertPrebuildJavascriptInline = "Y", otherwise the prebuild javascript code is called in the
         // <head> section. InsertPrebuildJavascriptInline has to do with KeyRole code.
         // do not mess with szJavaScript here ... szJavaScript = vDialogTemp.Action.WebJavaScript
         IF vDialogTemp.ActWndEvent.Type = 1 AND szInsertPrebuildJavascriptInline = "Y"
            // Action is Prebuild.
            IF vDialogTemp.Action.WebJavaScript != ""
               szWriteBuffer = "   // Prebuild action has javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = vDialogTemp.Action.WebJavaScript
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   // END of Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            END
         END
         IF vDialogTemp.ActWndEvent.Type = 2  // Action is postbuild.

            IF vDialogTemp.Action.WebJavaScript != ""

               szWriteBuffer = "   // Postbuild actions that have javascript code."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szActionTag = vDialogTemp.Action.Tag
               szWriteBuffer = "   " + szActionTag + "( );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            END

         END
      END
   END
   DropView( vDialogTemp )

   // Because there is some postbuild code that could be called where isWindowClosing could be set to false, re-initialize it
   // again after the page has been loaded.
   szWriteBuffer = "   isWindowClosing = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   document.body.style.cursor = ^default^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // ******************************   End of _AfterPageLoaded ***********************

   //KJS 10/19/07 - This is a generic function for any grids that have a
   //checkbox on it.  If there is no "text" for this checkbox (so the header would be blank)
   //we are going to create a checkbox in the grid header that calls this function.
   //This will select all or unselect all the checkboxes in the grid.
   szWriteBuffer = "function CheckAllInGrid(id, CheckBoxName)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var wcontrols = id.form.elements;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var check = id.checked;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var wcontrol, i = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "   while ( (wcontrol = wcontrols[ i++ ]) != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      //Check to see if the checkbox belongs to this table then check it."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( wcontrol.name.indexOf( CheckBoxName ) != -1 && wcontrol.type == 'checkbox' )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         wcontrol.checked = check;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // ***********************    Generate JavaScript Function routine for each Action.   ***************
   FOR EACH vDialog.Action

      szActionTag = vDialog.Action.Tag
      nRC = zstrcmpi( szActionTag, "alt-f4" )
      IF nRC = 0
         szActionTag = "AltF4"
      END

      szListButtonFlag = ""
      IF vDialog.ActEvent EXISTS AND vDialog.ActCtrl EXISTS

         // Determine if Action for the ActCtrl is for a PushBtn within a Grid or HyperText (not hyperlink)
         // or an image (Bitmap or BitmapBtn) within a Grid..
         szCtrlTag = vDialog.ActCtrl.Tag
         CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
         lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
         //KJS 10/24/07 - Right now if there is an action that is called more than once on a window and
         //one of the places the action is called is not from a PushBtn or GridEditCtl then
         //this doesn't always work.  I just had a case where there was an action on RowSelect
         //on the grid and the action was called from a hottext.  zListButtonFlag did not get set.
         nRC = SetEntityCursor( vDialogTemp, "Control", "Tag", lControl, szCtrlTag, "", "", 0, "Window", "" )
         IF nRC >= zCURSOR_SET
            szTempStr = vDialogTemp.ControlDef.Tag
            IF szTempStr = "PushBtn" OR szTempStr = "GridEditCtl" OR szTempStr = "Bitmap" OR szTempStr = "BitmapBtn" OR szTempStr = "GridCheckCtl" OR szTempStr = "CheckBox"

               // The Control for the Action was a Pushbutton or HyperText.
               // Identify if this Control is inside a Grid.
               nRC = 0
               LOOP WHILE nRC = 0 AND szListButtonFlag = ""
                  nRC = ResetViewFromSubobject( vDialogTemp )
                  IF nRC = 0 AND vDialogTemp.ControlDef EXISTS
                     IF vDialogTemp.ControlDef.Tag = "Grid"  // vDialogTemp.ControlDef.Key = 2010
                        // The parent of the this control is a Grid, so indicate for later.
                        szListButtonFlag = "Y"
                     END
                  END
               END
            END

         END
         DropView( vDialogTemp )

      END

      // Event is start email.
      IF vDialog.Action.Type = zWAB_StartEmailClient OR
         vDialog.Action.Type = zWAB_StartEmailClientBCC OR
         vDialog.Action.Type = zWAB_StartEmailClientCC

         szWriteBuffer = "function " + szActionTag + "( )"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

         szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   isWindowClosing = false;"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

         IF vDialog.ActWndEvent DOES NOT EXIST OR  // don't include pre/post build java code here
            (vDialog.ActWndEvent.Type != 1 AND vDialog.ActWndEvent.Type != 2)

            //KJS 11/16/2007 - We want to insert any javascript code that the
            //user has entered for this action.  This will be put before the action
            //generated code for submitting.  If the user wants to skip the
            //generated code, the inserted code should end with a return.
            szJavaScript = vDialog.Action.WebJavaScript
            IF szJavaScript != "" AND vDialog.Action.WebJavaScriptLocation = ""
               szWriteBuffer = "      // Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      // END of Javascript code entered by user."
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            END
         END

         // Go to generate special code for setting up email entries and starting email client.
         GenJSP_EmailEntries( vDialog, vDialogRoot, lFileJSP, szWriteBuffer, szFormName )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      ELSE
         IF szListButtonFlag = "Y"
            szWriteBuffer = "function " + szActionTag + "( strTagEntityKey )"
         ELSE
            szWriteBuffer = "function " + szActionTag + "( )"
         END
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

         szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   isWindowClosing = false;"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

         // This Action is Startup Web Popup WITHOUT mapping, so generate unique statements for that case.
         IF ( vDialog.Action.Type = zWAB_StartModalWebPopup OR vDialog.Action.Type = zWAB_StartModelessWebPopup ) AND vDialog.Action.NoMap = "Y"

            IF vDialog.ActWndEvent DOES NOT EXIST OR  // don't include pre/post build java code here
               (vDialog.ActWndEvent.Type != 1 AND vDialog.ActWndEvent.Type != 2)

               //KJS 11/16/2007 - We want to insert any javascript code that the
               //user has entered for this action.  This will be put before the action
               //generated code for submitting.
               szJavaScript = vDialog.Action.WebJavaScript
               IF szJavaScript != "" AND vDialog.Action.WebJavaScriptLocation = ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               END
            END

            //szWriteBuffer = "   isWindowClosing = false;"
            //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

            szDialogTag = vDialog.Action.DialogName
            szWindowTag = vDialog.Action.WindowName

            // We are opening a popup window within this dialog
            IF szDialogTag = vDialogRoot.Dialog.Tag
               // KJS 01/25/08 - The popup window was getting the size of the calling window (aboe code).  Instead, we want the popup window to be
               // the size of the painted popup window.  Added some hidden variables to hold this value.
               CreateViewFromView( vDialogTemp2, vDialogRoot )
               SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = szWindowTag
               IF RESULT < zCURSOR_SET
                  szMsg = "Error in Window, " + vDialog.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist: " + szWindowTag
                  MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
               ELSE
                  // KJS 01/30/08 - Want the popup window to be opened with the correct size of the painted popup window
                  // not just a generic number (had been 600,300).
                  zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                  zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
               END
               DropView( vDialogTemp2 )
            ELSE
               // We are opening a popup window in a different dialog.  We want the size of the
               // popup window.  Need to open the other dialog.
               ActivateMetaOI_ByName( vSubtask, vDialogTemp2, 0, zREFER_DIALOG_META, zSINGLE, szDialogTag, 0 )
               SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = szWindowTag
               IF RESULT >= zCURSOR_SET
                  zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                  zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
               ELSE

                  szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a dialog.window that doesn't exist: " +
                          szDialogTag + "." + szWindowTag
                  MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )

               END
               DropObjectInstance( vDialogTemp2 )

            END

            szWriteBuffer = "   var NewWin = window.open( ^" + szDialogTag + szWindowTag + ".jsp^, ^^,^menubar=0,toolbar=0,resizable=1,width=" + szWidth +
                            ",height=" + szHeight + ",modal=1^ );"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            szWriteBuffer = "   if ( NewWin )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      NewWin.focus( );"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         // szWriteBuffer = "      alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from 'my.enc.edu' for this action.^ );"
            szWriteBuffer = "      alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from this site for this action to work.^ );"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         ELSE
         // Print Window
         IF vDialog.Action.Type = 60
            szWriteBuffer = "   window.print();"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         ELSE
         IF vDialog.Action.Type = zWAB_StayOnWindow AND vDialog.Action.WebJavaScript != ""

            // KJS 08/14/2009 - If the window type is zWAB_StayOnWindow (no refresh) and we have Javascript code on this action
            // then we don't want to do the .submit (which we really don't want to do if the action is zWAB_StayOnWindow but I'm
            // afraid there might be places where we kept the action zWAB_StayOnWindow because we knew it would always put
            // the submit in).
            szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            szJavaScript = vDialog.Action.WebJavaScript

            // DKS 2015.06.20 - remove prebuild javascript if it is being inserted in _AfterPageLoaded
            IF szInsertPrebuildJavascriptInline = "Y"
               IF vDialog.ActWndEvent EXISTS AND vDialog.ActWndEvent.Type = 1
                  // prebuild javascript being inserted inline in _AfterPageLoaded
               ELSE
                  // otherwise, we need the javascript code
                  IF  szJavaScript != ""
                     szWriteBuffer = "      // Javascript code entered by user."
                     WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
                     szWriteBuffer = szJavaScript
                     WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
                     szWriteBuffer = "      // END of Javascript code entered by user."
                     WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
                  END
               END
               // DKS 2015.07.07 - and we always want the submit
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionTag + "^;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            ELSE
               IF  szJavaScript != ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               END
            END
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

         ELSE

            // Normal Action.

            szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            // KJS 08/13/13 - I am assuming that Doug put this in. I pass in strEntityKey so I'm not sure why
            // it's here...
            IF szListButtonFlag = "Y"
               szWriteBuffer = "      var nIdx = strTagEntityKey.lastIndexOf( '::' );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      var strEntityKey = strTagEntityKey.substring( nIdx + 2 );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            END

            IF vDialog.ActWndEvent DOES NOT EXIST OR  // don't include pre/post build java code here
               (vDialog.ActWndEvent.Type != 1 AND vDialog.ActWndEvent.Type != 2)

               //KJS 11/16/2007 - We want to insert any javascript code that the
               //user has entered for this action.  This will be put before the action
               //generated code for submitting.
               szJavaScript = vDialog.Action.WebJavaScript
               IF szJavaScript != "" AND vDialog.Action.WebJavaScriptLocation = ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
               END
            END

            // KJS 10/28/10 - Testing this to see how using an hourglass would work while
            // the user is waiting for something to happen.
            szWriteBuffer = "      document.body.style.cursor = ^wait^;"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

            // If this function is for Download File, we want to eliminate the _DisableFormElements statement.
            IF vDialog.Action.Type != zWAB_ProcessDownloadFile
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
            END

            // We need to determine if this Action is on a Group for File Transfer to Server, because we need to
            // use the Form Name from the Group in that case. We will locate the corresponding Action entry under
            // the Control subobject and move up one level to find the Group.
            szTransferFileFlag = ""
            CreateViewFromView( vDialogTemp, vDialog )
            lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
            szActionTag = vDialog.Action.Tag
            nRC = SetEntityCursor( vDialogTemp, "EventAct", "Tag", lControl,
                                   szActionTag, "", "", 0, "Window", "" )
            IF nRC >= zCURSOR_SET
               ResetViewFromSubobject( vDialogTemp )
               SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Transfer to Server"
               IF RESULT >= zCURSOR_SET
                  szTransferFileFlag = "Y"
               END
            END
            IF szTransferFileFlag = "Y"
               szCtrlTag = vDialogTemp.Control.Tag
               szWriteBuffer = "      document." + szCtrlTag + ".zAction.value = ^" + szActionTag + "^;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szCtrlTag + ".submit( );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            ELSE
               IF szListButtonFlag = "Y"
                  // The Action was on a Button on a Grid, so identify the entry selected.
                  szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END

               //KELLY
               IF ( vDialog.Action.Type = zWAB_StartModalWebPopup OR vDialog.Action.Type = zWAB_StartModelessWebPopup ) AND vDialog.Action.NoMap = ""
                  // This Action is Startup Web Popup WITH mapping, so set zOpenPopupWindow to the next page jsp.
                  szDialogTag = vDialog.Action.DialogName
                  szWindowTag = vDialog.Action.WindowName

                  szWriteBuffer = "      document." + szFormName + ".zOpenPopupWindow.value = ^" + szDialogTag + szWindowTag + ".jsp^;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

                  // We are opening a popup window within this dialog
                  IF szDialogTag = vDialogRoot.Dialog.Tag
                     // KJS 01/25/08 - The popup window was getting the size of the calling window (above code).  Instead, we want the
                     // popup window to be the size of the painted popup window.  Added some hidden variables to hold this value.
                     CreateViewFromView( vDialogTemp2, vDialogRoot )
                     SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = vDialog.Action.WindowName

                     IF RESULT >= zCURSOR_SET
                        zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                        zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
                     ELSE
                        szMsg = "Error in Window, " + vDialog.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist: " + szWindowTag
                        MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     END
                     DropView( vDialogTemp2 )
                  ELSE
                     // We are opening a popup window in a different dialog.  We want the size of the
                     // popup window.  Need to open the other dialog.
                     ActivateMetaOI_ByName( vSubtask, vDialogTemp2, 0, zREFER_DIALOG_META, zSINGLE, szDialogTag, 0 )
                     SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = szWindowTag
                     IF RESULT >= zCURSOR_SET
                        zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                        zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
                     ELSE

                        szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist." +
                                szDialogTag + "." + szWindowTag
                        MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )

                     END
                     DropObjectInstance( vDialogTemp2 )

                  END

                  szWriteBuffer = "      document." + szFormName + ".zPopupWindowSZX.value = ^" + szWidth + "^;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      document." + szFormName + ".zPopupWindowSZY.value = ^" + szHeight + "^;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               END

               IF vDialog.Action.Type = zWAB_ExitDialogTask
                  // For exiting the Dialog (ie., Session), the Action is OnUnload.
                  szWriteBuffer = "      document." + szFormName + ".zAction.value = ^_OnUnload^;"
               ELSE
                  szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionTag + "^;"
               END
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               //Type 84 is "Return from Web Popup/No Refresh
               //Type 85 is "Return from Web Popup/Refresh
               //We need to put in lines to close the popup window.
               IF ( vDialog.Action.Type = zWAB_ReturnFromWebPopupWithRefresh )
                  szWriteBuffer = "      window.opener.location.href=window.opener.location.href;"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      window.opener.focus();"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END
               IF ( vDialog.Action.Type = zWAB_ReturnFromWebPopupNoRefresh OR vDialog.Action.Type = zWAB_ReturnFromWebPopupWithRefresh )
                  szWriteBuffer = "      window.close();"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END

            END
            DropView( vDialogTemp )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         END
         END
         END
         szWriteBuffer = "}"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      END
   END

   // If the Window has a reusable side menu, add functions for each action from that menu.
   IF vDialog.ReusableSideWindow EXISTS
      IF vDialog.ReusableSideDialog.ZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "sm" )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByName( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, vDialog.ReusableSideDialog.Tag, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "sm" )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window has a reusable main menu, add functions for each action from that menu.
   ReusableDialogZKey = 0
   IF vDialog.ReusableMainWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableMainDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableMainWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableMainWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableMainDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableMainWindow.ZKey
      END
   END
   IF ReusableDialogZKey != 0  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "m" )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "m" )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window has a reusable menu for the actions only, add functions for each action from that menu.
   ReusableDialogZKey = 0
   IF vDialog.ReusableActionWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableActionDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableActionWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableActionWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableActionDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableActionWindow.ZKey
      END
   END
   IF ReusableDialogZKey != 0  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            // Because the menu actions can be created on separate windows from the control
            // actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions and a
            // prefix of "ma" for menu actions where the menu will not be either the main menu
            // or a side menu.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "ma" )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            // Because the menu actions can be created on separate windows from the control
            // actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions and a
            // prefix of "ma" for menu actions where the menu will not be either the main menu
            // or a side menu.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, "ma" )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // Generate Function routines for each button inside a Table (grid, etc.)
   // This function should not be JSP because this creates javascript not jsp
   GenJSP_ChildFunctions( vDialog, lFileJSP, szWriteBuffer, szFormName )

   // Comboboxes and listboxes need to do some mapping before the action
   // is called, so create separate javascript functions for actions that
   // are called from comboboxes or listboxes.
   // This function should not be JSP because this creates javascript not jsp
   GenJSP_OutputMapRecurs( vDialog, lFileJSP, szWriteBuffer, szFormName )

   // Do we want to put code here for grids that we are creating an output for
   // importing into excel.
   GenJSP_TableExport( vDialog, lFileJSP, szWriteBuffer, szNoPositioning )

   szWriteBuffer = "</script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "</head>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /*****************************  End of JavaScript Functions Section *****************************************************/


   /*****************************  Beginning of <body> Section  *****************************************************/

   // The following five line of codes were removed by DonC on 7/5/2007 after discussion with Doug that _AfterPageLoaded should
   // be executed even if lSort != 0.
   //KJS 11/1/2007 - If there is an onLoad event on the body and we have table sorting on this page, the table
   //sorting does not work in Firefox (seems to work in IE and Opera).  The solution is to not call _AfterPageLoaded on
   //the body onLoad event but to create a call to addEvent(window 'load','_AfterPageLoaded)
   //which does not interfere with the Standardista code (for table sorting) but still calls _AfterPageLoaded.
   //In the Standardista code (sts.js) there is an addEvent that will call _AfterPageLoaded.
   //Because of this, I think we do need the below code.  It uses the onLoad event if the web screen does not use table sorting
   //but does not call onLoad if we are using table sorting and the _AfterPageLoaded gets called from addEvent in sts.js.
   //I did see some documentation on the web that said the addEvent function doesn't work on IE5/Mac.  Might want to see if that's
   //true. http://simonwillison.net/2004/May/26/addLoadEvent/
   IF lSort = 0
      szWriteBuffer = "<body onLoad=^_AfterPageLoaded( )^ onSubmit=^_DisableFormElements( true )^ onBeforeUnload=^_BeforePageUnload( )^>"
   ELSE
      szWriteBuffer = "<body onSubmit=^_DisableFormElements( true )^ onBeforeUnload=^_BeforePageUnload( )^>"
   END
   //szWriteBuffer = "<body onLoad=^_AfterPageLoaded( )^ onSubmit=^_DisableFormElements( true )^ onBeforeUnload=^_BeforePageUnload( )^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // The user might want to have an include after the <body> so that they can create some divs that will be
   // displayed on the background of each page (ENC shows a skyline scene).  If so, create it here.
   // Do not create if the window is a popup or if there is no banner.
   IF vDialog.Dialog.WEB_PageBackgroundInclude != "" AND szWindowIsPopup = "" AND vDialogRoot.Window.WEB_NoBannerFlag = ""
      szWriteBuffer = "<%@ include file=^" + vDialog.Dialog.WEB_PageBackgroundInclude + "^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // KJS 10/30/08 - If a window has been created to be displayed on the user's dashboard, then this window needs to be specified
   // as a dashboard window because we have to do some special processing for this window (getting the blob from the dashboard entities).
   IF vDialogRoot.WndStyle.Tag = "Dashboard Window"
     szWindowIsForDashboard = "Y"
   ELSE
     szWindowIsForDashboard = ""
   END

   szShowBanner = "Y"
   szShowTopMenu = "Y"
   szShowSideMenu = "Y"

   IF szWindowIsPopup = "Y" AND szWindowIsForDashboard = "Y"
      szShowBanner = ""
      szShowTopMenu = ""
      szShowSideMenu = ""
   ELSE
      IF vDialogRoot.Window.WEB_NoBannerFlag = "Y"
         szShowBanner = ""
      END
      IF vDialog.Window.WEB_NoTopMenuFlag = "Y"
         szShowTopMenu = ""
      END
   END

   // KJS 07/31/08 - I am adding a wrapper around the whole page, so that we can create styling in the
   // css.  Do not add this wrapper if the window is going to be a popup window or a window that will be part
   // of a dashboard.
   //<!--This text is a comment-->
   IF szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "<div id=^wrapper^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // Build the Banner before getting into Menu Options.
// IF vDialogRoot.Window.WEB_NoBannerFlag = ""
   IF szShowBanner = "Y"
      // strBannerName will always have a value, it might be a dynamic banner name set in vml code
      // or it might be an include file specified in the dialog or if neither of those, then
      // strBannerName has been set to "./include/banner.inc".
      //szWriteBuffer = "<a href=^#^><img src=^images/<%=strBannerName%>^ width=^800^ height=^93^></a>"
      szWriteBuffer = "<jsp:include page='<%=strBannerName %>' />"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szSideMenuExists = "N"

   // Generate Main Navigation Bar
   ReusableDialogZKey = 0
   IF vDialog.ReusableMainWindow EXISTS
      ReusableDialogZKey = vDialog.ReusableMainDialog.ZKey
      ReusableWindowZKey = vDialog.ReusableMainWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableMainWindow EXISTS
         ReusableDialogZKey = vDialog.DefaultReusableMainDialog.ZKey
         ReusableWindowZKey = vDialog.DefaultReusableMainWindow.ZKey
      END
   END

// IF ( ReusableDialogZKey != 0 AND vDialog.Window.WEB_NoTopMenuFlag != "Y" )  // dks
   IF ( ReusableDialogZKey != 0 AND szShowTopMenu = "Y" )  // dks
      IF ReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            BuildMainNavSection( vDialog, vDialogTemp, lFileJSP )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, ReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = ReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            BuildMainNavSection( vDialog, vDialogTemp, lFileJSP )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // KJS 07/31/08 - Before we build the main content items (side navigation if it exists and the page contents) we
   // are going to create another div.  Not sure this is necessary but I'm thinking it might be helpful (then the
   // footer can be after this).
   IF szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "<div id=^maincontent^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // Left navigation bar from Menu.
   // If the Window has a Reusable menu, use it. Otherwise try to use the Main Menu for the Window.
   // If neither exists, there will be no left navigation bar.
// IF vDialog.ReusableSideWindow EXISTS
   IF vDialog.ReusableSideWindow EXISTS AND szShowSideMenu = "Y"

      IF vDialog.DfltMenu EXISTS AND vDialog.ReusableSideWindow.ZKey != vDialog.Window.ZKey
         vDfltMenu = vDialog
      ELSE
         vDfltMenu = 0
      END

      IF vDialog.ReusableSideDialog.ZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            BuildSideNavSection( vDialog, vDialogTemp, lFileJSP, "Y", vDfltMenu )  // dks ... want Reusable + Default
            szSideMenuExists = "Y"
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByName( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META,  zSINGLE, vDialog.ReusableSideDialog.Tag, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            BuildSideNavSection( vDialog, vDialogTemp, lFileJSP, "Y", vDfltMenu )  // dks ... want Reusable + Default
            szSideMenuExists = "Y"
         END
         DropObjectInstance( vDialogTemp )
      END

   ELSE
   // IF vDialogRoot.DfltMenu EXISTS AND
      IF vDialogRoot.DfltMenu EXISTS AND szShowSideMenu = "Y" AND
         (vDialog.ReusableMainDialog DOES NOT EXIST OR  // don't put out side menu if side == top
          ReusableDialogZKey != vDialog.ReusableMainDialog.ZKey OR
          ReusableWindowZKey != vDialog.ReusableMainWindow.ZKey)

         BuildSideNavSection( vDialog, vDialogRoot, lFileJSP, "N", 0 )
         szSideMenuExists = "Y"
      END
   END

   szCSS_Class = vDialog.Window.CSS_Class
   IF szCSS_Class = ""
      szCSS_Class = vDialog.Dialog.CSS_Class
   END

   IF szCSS_Class != ""
      szDivContentClass = szCSS_Class
      //szWriteBuffer = "<div class=^" + szCSS_Class + "^>"
      szWriteBuffer = "<div id=^" + szCSS_Class + "^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   ELSE
      // KJS 10/30/08 - Do I want to put a div with id for dashboard window and
      // for popup window???
      IF  szWindowIsPopup = "Y"
         // If no class was given, create a default div with the id of content.
         szWriteBuffer = "<div id=^contentpopup^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "contentpopup"
      ELSE
      IF  szWindowIsForDashboard = "Y"
         // If no class was given, create a default div with the id of content.
         szWriteBuffer = "<div id=^contentdashboard^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "contentdashboard"
      ELSE
      IF szSideMenuExists = "Y"
         // If no class was given, create a default div with the id of content.
         szWriteBuffer = "<div id=^content^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "content"
      ELSE
         // If no class was given, and there is no side menu,
         // create a default div with the id of contentnosidemenu.
         szWriteBuffer = "<div id=^contentnosidemenu^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "contentnosidemenu"
      END
      END
      END
   END

   // KJS 03/04/10 - We are going to try adding an include file for system maintenance.  That way if we
   // want to kick people out of MyENC, we will put code in systemmaintenance.inc that will have a flashing
   // message that will show on each page.
//<!--System Maintenance-->

//<div> <%@include file="./include/systemmaintenance.inc" %> </div>

//<!--System Maintenance-->

   szWriteBuffer = "<!--System Maintenance-->"
   WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%@ include file=^./include/systemmaintenance.inc^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<!-- END System Maintenance-->"
   WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Generate FORM
   //CreateSizeString( vDialog, szSize )
   PIX_PER_DU( vDialog, DLUnits )

   // For Popups, we will use the Width from the Window. Otherwise we won't.
   // The way we will determine if this Window is for a Popup is to see if any Action is Return from Popup.
// SET CURSOR FIRST vDialog.Action WHERE ( vDialog.Action.Type = zWAB_StartModalWebPopup OR vDialog.Action.Type = zWAB_StartModelessWebPopup )
   SET CURSOR FIRST vDialog.Action WHERE ( vDialog.Action.Type = 78 OR vDialog.Action.Type = 79 )
   IF RESULT >= zCURSOR_SET
      lSize = zLOUSHORT( vDialog.Window.SZDLG_X )
      lSize = lSize * DLUnits
      szWidth = lSize
   ELSE
      szWidth = "750"
   END
   lSize = zLOUSHORT( vDialog.Window.SZDLG_Y )
   lSize = lSize * DLUnits
   szHeight = lSize
   szStyle = "width:" + szWidth + "px;height:" + szHeight + "px;"

   szWriteBuffer = "<form name=^" + szFormName + "^ id=^" + szFormName + "^ method=^post^>"  // no height on form
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // Eliminating <input termination.
   szWriteBuffer = "   <input name=^zAction^ id=^zAction^ type=^hidden^ value=^NOVALUE^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zTableRowSelect^ id=^zTableRowSelect^ type=^hidden^ value=^NOVALUE^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zDisable^ id=^zDisable^ type=^hidden^ value=^NOVALUE^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strSessionId = session.getId( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Add each view definition.
   FOR EACH vDialog.ViewObjRef //WHERE vDialog.ViewObjRef.wWindowUseFlag = "Y"
      szWriteBuffer = "   zeidon.zView " + vDialog.ViewObjRef.Name + " = new zeidon.zView( strSessionId );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   //szWriteBuffer = "   zeidon.zView vKZXMLPGO = new zeidon.zView( strSessionId );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strRadioGroupValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strComboCurrentValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strAutoComboBoxExternalValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strComboSelectedValue = ^0^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorColor = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorMapValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTextDisplayValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTextURL_Value = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strSolicitSave = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTblOutput = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    ComboCount = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    iTableRowCnt = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF  szWindowIsForDashboard = "Y"
      szWriteBuffer = "   strViewName = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   iFrameCount = 0;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "   int    nRC2 = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   nRC2 = vKZXMLPGO.GetView( strSessionId, ^KZXMLPGO^, vAppSubtask );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( nRC2 <= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vKZXMLPGO.InitWebSessionObject( strSessionId, vAppSubtask, ^TestUserID^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vKZXMLPGO.SetName( strSessionId, ^KZXMLPGO^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   vAppSubtask.TraceLine( ^InitWebPage: ^, ^" + vDialog.Dialog.Tag + vDialog.Window.Tag + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "   nRC2 = vKZXMLPGO.InitWebPage( strSessionId, ^" + vDialog.Dialog.Tag + "^, ^" +
                                                     vDialog.Window.Tag + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF  szWindowIsForDashboard = "Y"
      // HOW AM I GOING TO KNOW TO USE mUser????!!! Right now this is vDialog.CtrlMapView.Name but that is not correct.
      //szViewName = vDialog.CtrlMapView.Name
      szViewName = "mUser"
      szWriteBuffer = "   // Position on the correct Frame by looping through the dashboard object "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   iFrameCount = vKZXMLPGO.GetInteger( strSessionId, ^Session^, ^DashboardFrameCount^ ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( iFrameCount == 0 ) "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      iFrameCount = 1; "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   vAppSubtask.TraceLine(^**** FrameCount *** ^, iFrameCount); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC2 = " + szViewName + ".GetView( strSessionId, ^" + szViewName + "^, vAppSubtask ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC = " + szViewName + ".SetCursorFirst( strSessionId, ^DashboardFrameUser^, ^wFrameNbr^, iFrameCount, ^^ ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   vAppSubtask.TraceLine(^**** nRC after SetCursorFirstByInteger *** ^, nRC); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strViewName = " + szViewName + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrame^, ^Name^, ^^, 254 ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   vAppSubtask.TraceLine(^**** ReportName *** ^, strViewName); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC = " + szViewName + ".CheckExistenceOfEntity( strSessionId, ^PresentationObjectInstance^ ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC >= 0 ) "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   { "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = mDashboard.SetOIFromBlob(strSessionId, ^^, vAppSubtask, " + szViewName + ", ^PresentationObjectInstance^, ^ObjectInstanceBlob^,0); //zIGNORE_ERRORS "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strViewName = " + szViewName + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrame^, ^ObjectInstanceName^, ^^, 254 ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      mDashboard.SetName( strSessionId, strViewName ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   } "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   iFrameCount = iFrameCount + 1; "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   vKZXMLPGO.SetAttribute( strSessionId, ^Session^, ^DashboardFrameCount^, iFrameCount ); "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   // Build call to FindErrorFields and process any errors.
   szWriteBuffer = "   // FindErrorFields Processing"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strError = vAppSubtask.FindErrorFields( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // If the download file is too large, we have an error for that (that can't easily be put in the MSGQ so I am
   // creating another option for that.
   IF szUploadFile = "Y"
      szWriteBuffer = "   // If the download file is too large, we have an error."
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( strError == null || strError.length() == 0 )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strError = (String) session.getAttribute( ^FileUploadError^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      session.setAttribute( ^FileUploadError^, ^^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( strError == null )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strError = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   //KJS Trace
   //szWriteBuffer = "   vAppSubtask.TraceLine( ^Post FindErrorFields Error1: ^, strError );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   nPos = strError.indexOf( ^\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   //szWriteBuffer = "   vAppSubtask.TraceLine( ^Post FindErrorFields Pos1: ^, nPos );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   if ( nPos > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strErrorFlag = strError.substring( 0, 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strError = strError.substring( nPos + 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //szWriteBuffer = "   vAppSubtask.TraceLine( ^Post FindErrorFields ErrorFlag: ^, strErrorFlag );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( nPos >= 0 && strErrorFlag.equals( ^Y^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nPos = strError.indexOf( ^\t\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nPos >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorTitle = strError.substring( 0, nPos );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorMsg = strError.substring( nPos + 2 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "         vAppSubtask.TraceLine( ^After FindErrorFields ErrorFlag: ^, strErrorFlag );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vAppSubtask.TraceLine( ^After FindErrorFields ErrorTitle: ^, strErrorTitle );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vAppSubtask.TraceLine( ^After FindErrorFields ErrorMsg: ^, strErrorMsg );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   strSolicitSave = vKZXMLPGO.GetString( strSessionId, ^Session^, ^SolicitSaveFlag^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // FindOpenFile processing.
   szWindowTag = vDialog.Window.Tag
   szWriteBuffer = "   strFocusCtrl = vAppSubtask.GetFocusCtrl( strSessionId, ^" +
                   szDialogTag + "^, ^" + szWindowTag + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strOpenFile = vAppSubtask.FindOpenFile( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   vAppSubtask.TraceLine( ^After Get OpenFile: ^, strOpenFile );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "   strDateFormat = vAppSubtask.GetDateDefaultContextFormat( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   /*
   IF szKeyRole = "Y"
      szWriteBuffer = "   nRC2 = wWebXA.GetView( strSessionId, ^wWebXfer^, vAppSubtask );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC2 > 0 )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC2 = wWebXA.CheckExistenceOfEntity( strSessionId, ^Root^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC2 >= 0 )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strKeyRole = wWebXA.GetStringFromAttributeByContext( strSessionId, ^Root^, ^KeyRole^, ^KeyRole^, 254 );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log().debug( ^Root.KeyRole: ^ + strKeyRole );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   */

   //KJS Trace
   //szWriteBuffer = "   vAppSubtask.TraceLine( ^After Get DateFormat: ^, strDateFormat );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Eliminating <input termination.
   szWriteBuffer = "   <input name=^zFocusCtrl^ id=^zFocusCtrl^ type=^hidden^ value=^<%=strFocusCtrl%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zOpenFile^ id=^zOpenFile^ type=^hidden^ value=^<%=strOpenFile%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zDateFormat^ id=^zDateFormat^ type=^hidden^ value=^<%=strDateFormat%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF szKeyRole = "Y"
      szWriteBuffer = "   <input name=^zLoginName^ id=^zLoginName^ type=^hidden^ value=^<%=strLoginName%>^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <input name=^zKeyRole^ id=^zKeyRole^ type=^hidden^ value=^<%=strKeyRole%>^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "   <input name=^zOpenPopupWindow^ id=^zOpenPopupWindow^ type=^hidden^ value=^<%=strOpenPopupWindow%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zPopupWindowSZX^ id=^zPopupWindowSZX^ type=^hidden^ value=^<%=strPopupWindowSZX%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zPopupWindowSZY^ id=^zPopupWindowSZY^ type=^hidden^ value=^<%=strPopupWindowSZY%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zErrorFlag^ id=^zErrorFlag^ type=^hidden^ value=^<%=strErrorFlag%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 09/09/2009 - We are using Timeout.inc (which says this is for Jeff) but if there is a value in
   // WEB_Timeout for the dialog or window, we want to use that.
   IF vDialog.Window.WEB_Timeout != ""
      szWriteBuffer = "   <input name=^zTimeout^ id=^zTimeout^ type=^hidden^ value=^"
      szWriteBuffer = szWriteBuffer + vDialog.Window.WEB_Timeout
      szWriteBuffer = szWriteBuffer + "^>"
   ELSE
      IF vDialog.Dialog.WEB_Timeout != ""
         szWriteBuffer = "   <input name=^zTimeout^ id=^zTimeout^ type=^hidden^ value=^"
         szWriteBuffer = szWriteBuffer + vDialog.Dialog.WEB_Timeout
         szWriteBuffer = szWriteBuffer + "^>"
      ELSE
         szWriteBuffer = "   <input name=^zTimeout^ id=^zTimeout^ type=^hidden^ value=^<%=nTimeout%>^>"
      END
   END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zSolicitSave^ id=^zSolicitSave^ type=^hidden^ value=^<%=strSolicitSave%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Generate HTML Control output.
   OrderEntityForView( vDialog, "Control", "PSDLG_Y A PSDLG_X A" )
   vGroupParent = 0

   // KJS 07/23/08 - Check if this dialog window will be built with all relative positioning or with absolute positioning
   IF  vDialog.Dialog.WEB_RelativePositionFlag = "Y" OR vDialog.Window.WEB_RelativePositionFlag = "Y"
      szNoPositioning = "Y"
   ELSE
      szNoPositioning = ""
   END

   // KJS 02/19/09 - Added WEB_AbsolutePositionFlag because I would like to use absolute positioning on my popup pages but the rest
   // I want to use relative positioning.  Since I think from now on we will probably only want to use relative positioning for most
   // pages, I think it will be easier to have this flag.
   IF  vDialog.Window.WEB_AbsolutePositionFlag = "Y"
      szNoPositioning = ""
   END

   GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFileJSP, szWriteBuffer, szIndentNext, lTableRowCnt, szNoPositioning, 0, 0 )

   // Complete the JSP file.
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( strErrorFlag.equals( ^D^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   IF (lTrace = 1)
      szWriteBuffer = "      vAppSubtask.TraceLine( ^Post FindErrorFields Error: ^, strError );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "      nPos = strError.indexOf( ^\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nPos >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorTitle = strError.substring( 0, nPos );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         nPos = strError.indexOf( ^\t\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorMsg = strError.substring( nPos + 2 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   <input name=^zError^ id=^zError^ type=^hidden^ value=^<%=strErrorMsg%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF szWebDebugView != ""
      szWriteBuffer = "   <div align=^clear:both;center;^><table style=^width:750px;background-color:black;color:white;border:none;font-size:8px;^><tr style=^background-color:blue;color:white;border:none;^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <td nowrap style=^background-color:blue;color:white;border:none;padding-top:6px;padding-bottom:6px;font-size:11px;^>Feedback: </td>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <td nowrap style=^background-color:blue;color:white;border:none;padding-top:6px;padding-bottom:6px;font-size:11px;^><input name=^zFeedback^ id=^zFeedback^ style=^left:4px;width:700px;^></td>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   </tr></table></div>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "</form>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // FORM GENERATION FOR FILE TRANSFER GROUPS
   // Create Form statements for each Group of type "File Transfer to Server".
   // Note that each Group requires a subcontrol of type EditBox and another of type PushBtn.
   CreateViewFromView( vDialogTemp, vDialog )
   NAME VIEW vDialogTemp "vDialogTemp"
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "File Transfer to Server"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   LOOP WHILE nRC >= zCURSOR_SET
      // Generate Form Statement for Group, with hidden field zAction.
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szFormName = vDialogTemp.Control.Tag
      szWriteBuffer = "<form name=^" + szFormName + "^  id=^" + szFormName + "^ method=^post^ enctype=^multipart/form-data^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <input name=^zAction^ id=^zAction^ type=^hidden^ value=^HELP^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      CreateAbsolStyleString( vDialogTemp, szStyle, X_Size, Y_Size, "" )

      szClass = ""
      IF vDialogTemp.Control.CSS_Class != ""
         szClass = " class=^" + vDialogTemp.Control.CSS_Class + "^"
      END
      szWriteBuffer = "<div " + szStyle + szClass + ">  <!-- " + vDialogTemp.Control.Tag + " --> "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      // Get Group positions for adding to subcontrols.
      //X_Size = vDialogTemp.Control.PSDLG_X * DLUnits
      //Y_Size = vDialogTemp.Control.PSDLG_Y * DLUnits

      // Generate hidden field zTargetFileName, with JSP to retrieve name.
      // We are currently positioned on the GroupBox and need to reposition on the subcontrol Button
      // to generate the FileName mapping..
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      SetViewToSubobject( vDialogTemp, "CtrlCtrl" )
      FOR EACH vDialogTemp.Control
         IF vDialogTemp.ControlDef.Tag = "PushBtn"
            IF vDialogTemp.CtrlMapER_Attribute EXISTS
               // The mapping for the Push Button specifies the attribute that contains the Target File Name (without suffix).

               szWriteBuffer = "   strSessionId = session.getId( );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

               szWriteBuffer = "   nRC = " + vDialogTemp.CtrlMapView.Name +
                               ".GetView( strSessionId, ^" + vDialogTemp.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nRC > 0 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               szWriteBuffer = "   {"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialogTemp.CtrlMapView.Name +
                               ".CheckExistenceOfEntity( strSessionId, ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strErrorMapValue = " +
                               vDialogTemp.CtrlMapView.Name + ".GetString( strSessionId, ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^, ^" +
                               vDialogTemp.CtrlMapER_Attribute.Name + "^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               IF (lTrace = 1)
                  szWriteBuffer = "   else"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      " + vDialogTemp.CtrlMapView.Name +
                                  ".TraceLine( ^Invalid View: ^, ^" + vDialogTemp.Control.Tag + "^ );"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END

            END
         END
      END
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <input name=^zTargetFileName^ id=^zTargetFileName^ type=^hidden^ value=^<%=strErrorMapValue%>^ >"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      // Process EditBox and PushBtn as subcontrols.
      FOR EACH vDialogTemp.Control
         IF vDialogTemp.ControlDef.Tag = "EditBox"
            szCtrlTag     = vDialogTemp.Control.Tag
            szControlType = vDialogTemp.ControlDef.Tag
            szWriteBuffer = "   <% /* " + szCtrlTag + ":" + szControlType + " */ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            CreateAbsolStyleString( vDialogTemp, szStyle, X_Size, Y_Size, "" )

            // For some reason with the <input type="file" control, the width property doesn't
            // seem to size the width correctly.  Use the "size" attribute instead.  The weird thing
            // is that if I don't include the width in style, then the "Browse" button that gets
            // created is not inline with the field that displays the upload file. ???!!!
            zIntegerToString( szWidth, 10, vDialogTemp.Control.SZDLG_X / 3.5 )

            szClass = vDialogTemp.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "   <input name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^" + szWidth + "^ " + szStyle + " type=^file^  >"
            ELSE
               szWriteBuffer = "   <input class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^" + szWidth + "^ " + szStyle + " type=^file^  >"
            END
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         END
         IF vDialogTemp.ControlDef.Tag = "PushBtn"
            szCtrlTag     = vDialogTemp.Control.Tag
            szControlType = vDialogTemp.ControlDef.Tag
            szWriteBuffer = "   <% /* " + szCtrlTag + ":" + szControlType + " */ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            CreateAbsolStyleString( vDialogTemp, szStyle, X_Size, Y_Size, "" )
            szActionTag = ""
            IF vDialogTemp.EventAct EXISTS
               szActionTag = vDialogTemp.EventAct.Tag
            END
            szClass       = vDialogTemp.Control.CSS_Class
            IF szClass = ""
               //szWriteBuffer = "   <input type=^submit^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + " value=^" + vDialogTemp.Control.Text + "^" +
               //                " onclick=^" + szActionTag + "()^ " + szStyle + " >"
               szWriteBuffer = "   <button type=^button^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                               " onclick=^" + szActionTag + "()^ " + szStyle + " >" + vDialogTemp.Control.Text + "</button>"
            ELSE
               //szWriteBuffer = "   <input class=^" + szClass + "^ type=^submit^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + " value=^" + vDialogTemp.Control.Text + "^" +
               //                " onclick=^" + szActionTag + "()^ " + szStyle + " >"
               szWriteBuffer = "   <button type=^button^ class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                               " onclick=^" + szActionTag + "()^ " + szStyle + " >" + vDialogTemp.Control.Text + "</button>"
            END
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         END
      END
      ResetViewFromSubobject( vDialogTemp )

      szWriteBuffer = "</div>  <!-- " + vDialogTemp.Control.Tag + " --> "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      szWriteBuffer = "</form>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      lControl = zQUAL_STRING + zPOS_NEXT + zRECURS
      szCtrlTag = "File Transfer to Server"
      nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                             szCtrlTag, "", "", 0, "Window", "" )
   END
   DropView( vDialogTemp )

   szWriteBuffer = "</div>   <!-- This is the end tag for the div '" + szDivContentClass + "' -->"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF  szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "</div>   <!-- This is the end tag for the div 'maincontent' -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // KJS 07/31/08 I don't think we need the following lines.  We are always going to have a div with either
   // content or a name designated by the user.
   // If there is a side menu, a div is created with an id of content.  We
   // need to create the ending div tag.
   //IF szSideMenuExists = "Y"
   //   szWriteBuffer = "</div>  <!-- This is the end tag for the div 'content'  or the class given by the user -->"
   //   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   //END

   // KJS 07/31/08
   // Include a footer at the bottom before the end wrapper div.
   // Only put in a footer if we are generating with relative position.
   IF szNoPositioning = "Y" AND szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      IF vDialogRoot.Dialog.WEB_FooterInclude = ""
         // If the user did not specify a footer, hardcode footer.inc
         szWriteBuffer = "<%@ include file=^./include/footer.inc^ %>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      ELSE
         szWriteBuffer = "<%@ include file=^" + vDialogRoot.Dialog.WEB_FooterInclude + "^ %>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      END
   END

   //<!--This text is a comment-->
   IF  szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "</div>  <!-- This is the end tag for wrapper -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // DO WE PUT IN THE CODE FOR DASHBOARD HERE???? 1111

   szWriteBuffer = "</body>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "</html>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// szWriteBuffer = "<%@ include file=^menubottom.inc^ %>"
// WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // If the Window HAS a menu, then this JSP has the navigation structure within it and contained
   // a div statement. So end the div.
// IF vDialogRoot.DfltMenu EXISTS  we never need it???  dks  2006.02.25
//    szWriteBuffer = "</div>"
//    WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// END

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   session.setAttribute( ^ZeidonWindow^, ^" + szFormName + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   session.setAttribute( ^ZeidonAction^, null );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // KJS 11/05/09 - For login screens, we want to unregisterzeidon at the end of building a page.  That way
   // when people come to this page but don't do anything, we don't have a session open.
   IF vDialog.Window.WEB_UnregisterZeidonWindow = "Y"
      //szWriteBuffer = "<%"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( vAppSubtask != null )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      vAppSubtask.TraceLine( ^After building the page UnregisterZeidonApplication: ----------------------------------->>> ^, ^" + szFormName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      vAppSubtask.UnregisterZeidonApplication( strSessionId );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      vAppSubtask = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      session.setAttribute( ^ZeidonSubtask^, vAppSubtask );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "  }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      //szWriteBuffer = "%>"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   DropView( vDialogRoot )

   /*
   // KJS 08/30/12 - Putting this in for Aadit... Show in seconds the page load time.
   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // Show the time in seconds it takes to load the page."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   Date tPageEnd = new Date();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   double tMilli = tPageEnd.getTime() - tPageStart.getTime();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   double tSeconds = tMilli / 1000;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   //String strDiff =String.valueOf(tSeconds);"
   szWriteBuffer = "   String strSeconds =Double.toString(tSeconds); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strMilli = Double.toString(tMilli);     "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   //vAppSubtask.TraceLine( "Page Load Time (milli): --------->>> ", strMilli );"
   szWriteBuffer = "   vAppSubtask.TraceLine( ^Page Load Time (seconds): ------->>> ^, strSeconds );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   */

   SysCloseFile( vDialog, lFileJSP, 0 )

END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATION: GenJSP_ProcessFileIn
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
GenJSP_ProcessFileIn( VIEW             vDialog BASED ON LOD TZWDLGSO,
                      INTEGER          lFileJSP,
                      STRING ( 10000 ) szWriteBuffer )

   // Build the JSP function code to process a file being transferred from the Client to the Server.

   szWriteBuffer = "   ServletInputStream in = request.getInputStream();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   byte[] line = new byte[256];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   byte[] crlf = {(byte) 0x0D, (byte) 0x0A}; // \r\n"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sLine = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String enctype = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String boundary = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String status = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sName = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sSourceFile = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sTargetFile = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sExtension = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sSourceFileNameOnly = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sTargetDirectory = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String zAction = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String zTargetFileName = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   FileOutputStream file = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int i = in.readLine(line, 0, 256);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   int iFileLth = 0;"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   boolean holdNewLine = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if (i != -1 && strActionToProcess == null)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   while (i != -1) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //**********************************
   szWriteBuffer = "      iFileLth = iFileLth + i;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( iFileLth > 10485760 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         file.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         file = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //************************************
   szWriteBuffer = "      boolean hasNewLine = i>=2 && line[i-1]==crlf[1] "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         && line[i-2]== crlf[0];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      if (hasNewLine) i = i-2;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      sLine = new String(line, 0, i);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      if (enctype==null) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // try to determine the encryption type"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (i>3 && sLine.startsWith(^--^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            enctype = ^form-data^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            boundary = sLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            status = ^boundary^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            enctype = ^x-www-form-urlencoded^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else if (enctype.equals(^x-www-form-urlencoded^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         //out.println(^****************^+sLine);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else if (enctype.equals(^form-data^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // Calculating the status of the current line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (status.equals(^boundary^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting the ^Content-Disposition:^ line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            status = ^disposition^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^disposition^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting the ^Content-Type:^ line or a blank line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (sLine.startsWith(^Content-Type:^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^type^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^blank^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^type^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting a blank line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            status = ^blank^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^blank^) |||| status.equals(^data^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting the data or boundary"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (sLine.startsWith(boundary)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^boundary^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^data^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // Now ^status^ is updated. Let's do the saving and echoing"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (status.equals(^disposition^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Getting the file name and open a file for saving"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            int l = sLine.indexOf(^filename=^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            int x;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "            if (l>=0) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sTargetFile = sTargetFile.replaceAll(^\^^,^^); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "               //We need to save the file extension and use"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //this as the output file extension no matter what "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //extension the output file has."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sSourceFile = sLine.substring(l+9);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sSourceFile = sSourceFile.replaceAll(^\^^,^^); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               l = sSourceFile.lastIndexOf(^.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "               x = sSourceFile.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "               //If x > l then the filename has no extension and"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //there must be a period in the directory name."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (x > l)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sExtension = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sExtension = sSourceFile.substring(l+1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sSourceFileNameOnly = sSourceFile.substring(x + 1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               strInputFileName = sSourceFileNameOnly;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sTargetFile = sTargetFile.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               l = sTargetFile.lastIndexOf(^.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               x = sTargetFile.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   szWriteBuffer = "               //If the target files is just a directory (no file name is specified)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //then use the name of the input file."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (x+1 == sTargetFile.length())"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetDirectory = sTargetFile;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetFile = sTargetFile + sSourceFileNameOnly;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetDirectory = sTargetFile.substring(0, x + 1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  //Target file name has no extension, so use the extension on the"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  //source file.  Otherwise, keep the name of target source entirely."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  if (x > l)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     //No extension"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     if (sExtension.equals(^^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        sTargetFile = sTargetFile + sExtension;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        sTargetFile = sTargetFile + ^.^ + sExtension;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (sTargetFile.length()>0)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                   //If the directory doesn't exist, Create one. "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  File f = new File(sTargetDirectory);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  boolean ok = f.mkdirs();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  file = new FileOutputStream(sTargetFile);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               l = sLine.indexOf(^ name=^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (l>=0) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sName = sLine.substring(l+6);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sName = sName.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  l = sName.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  if (l>=0) sName = sName.substring(l+1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  if (sName.length()>0) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     if (sName.equals(^zAction^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zAction = ^Action^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zAction = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     if (sName.equals(^zTargetFileName^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zTargetFileName = ^TargetFileName^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zTargetFileName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^boundary^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (file!=null) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               file.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               file = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (status.equals(^data^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            //We are writing out to the filename"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (file!=null) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (holdNewLine) file.write(crlf);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               file.write(line,0,i);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               holdNewLine = hasNewLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //Check if we have come across zAction or zTargetFileName"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //If so, then get the data and save them to a global filename."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (zAction.equals(^Action^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  strActionToProcess = sLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  zAction = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (zTargetFileName.equals(^TargetFileName^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetFile = sLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  zTargetFileName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               holdNewLine = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            holdNewLine = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      i = in.readLine(line, 0, 256);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATION: GenJSP_DownloadFile
//    If we have a download file button, we are creating a separate jsp file to do the download if the
//    browser is firefox.  This creates that code.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
GenJSP_DownloadFile( VIEW vDialog,
                     STRING ( 32 ) szDownloadFileName )

   STRING ( 10000 ) szWriteBuffer
   INTEGER          lFileJSP

   lFileJSP = SysOpenFile( vDialog, szDownloadFileName, COREFILE_WRITE )
   IF lFileJSP < 0
      RETURN -1
   END

   szWriteBuffer = "<%-- wDownload_File --%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%@ page import=^java.util.*,javax.servlet.*,javax.servlet.http.*,java.io.*,zeidon.zView^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<% "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   session = request.getSession( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strSessionId = session.getId( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "  zeidon.zView vAppSubtask; // view to this subtask"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   zView vKZXMLPGO = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int nRC;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   String strURL;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strError = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorFlag = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorTitle = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorMsg = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Check to see if the Zeidon subtask view already exists.  If not, create"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "  // it and copy it into the application object."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   vAppSubtask = (zeidon.zView) session.getAttribute( ^ZeidonSubtask^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( vAppSubtask == null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^logout.jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vAppSubtask.TraceLine( ^*** In wDownload_file: ^, ^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      if ( vKZXMLPGO == null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "        vKZXMLPGO = new zeidon.zView( strSessionId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      nRC = vKZXMLPGO.GetView( strSessionId, ^KZXMLPGO^, vAppSubtask );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC <= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vKZXMLPGO.InitWebSessionObject( strSessionId, vAppSubtask, ^TestUserID^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vKZXMLPGO.SetName( strSessionId, ^KZXMLPGO^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      strURL = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   String sDownloadFile = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sSourceFileNameOnly = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sExtension = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int l;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int x;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Download File Processing"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   sDownloadFile = (String) session.getAttribute( ^DownloadFile^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   vAppSubtask.TraceLine( ^*** Download File: ^, sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Replace any quotes."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   sDownloadFile = sDownloadFile.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   l = sDownloadFile.lastIndexOf(^.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   x = sDownloadFile.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   vAppSubtask.TraceLine( ^*** sDownloadFile: ^, sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // If x > l then the filename has no extension and"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // there must be a period in the directory name."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // Right now we are not using sExtension but just"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // in case we want to change the encType I want"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // to capture this."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if (x > l)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      sExtension = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      sExtension = sDownloadFile.substring(l+1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Get the filename only without directories."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   sSourceFileNameOnly = sDownloadFile.substring(x + 1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   File InputFile = new File(sDownloadFile);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   FileInputStream fis = new FileInputStream(InputFile); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   try"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      String contenttype = ^application/octet-stream^;  "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.setContentType(contenttype);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.addHeader(^Content-Disposition^, ^attachment; filename=^ + sSourceFileNameOnly + ^;^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      vAppSubtask.TraceLine( ^*** In sSourceFileNameOnly: ^, sSourceFileNameOnly);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      //response.setHeader(^Cache-Control^, ^cache,must-revalidate^); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      //response.addHeader(^Pragma^, ^public^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      ServletOutputStream outStream = response.getOutputStream();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      int c = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      while ((c=fis.read())!=-1)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         outStream.write(c); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      outStream.flush(); "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      outStream.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      fis.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   catch (Exception e) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if (InputFile!=null && InputFile.exists()) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         //TraceLine"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vAppSubtask.TraceLine( ^Error downloading file: ^, sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   vAppSubtask.TraceLine( ^*** In wDownload_file 2: ^, ^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<html><body></body></html>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   SysCloseFile( vDialog, lFileJSP, 0 )

   RETURN 0

END
/////////////////////////////////////////////////////////////////////////////
// Build VML as part of TZLODOPR
//
//  OPERATION: GenerateJSPJ
//
// Lower Case Tag and Attribute Names
// Since XHTML is case sensitive, and since XHTML only accepts lower case
// HTML tags and attribute names, a general search and replace function was
// executed to replace all upper case tags with lowercase tags. The same was
// done for attribute names. We have always tried to use lower case names in
// our Web, so the replace function did not produce many real substitutions.
//
// All Attributes were Quoted
// Since the W3C XHTML 1.0 Recommendation states that all attribute values
// must be quoted, every page in the web was checked to see that attributes
// values were properly quoted. This was a time-consuming job, and we will
// surely never again forget to put quotes around our attribute values.
//
// Empty Tags: <hr> , <br> and <img>
// Empty tags are not allowed in XHTML. The <hr> and <br> tags should be
// replaced with <hr /> and <br />.
// This produced a problem with Netscape that misinterpreted the <br/> tags.
// We don't know why, but changing it to <br /> worked fine. After that
// discovery, a general search and replace function was executed to swap the
// tags.  A few other tags (like the <img> tag) were suffering from the same
// problem as above. We decided not to close the <img> tags with </img>, but
// with  /> at the end of the tag. This was done manually.
//

/*************************************************************************************************
**
**    OPERATION: GenJSPJ_FindTAB
**
**
*************************************************************************************************/
LOCAL OPERATION
GenJSPJ_FindTAB( VIEW vWindow BASED ON LOD TZWDLGSO )

   SHORT nRC

   // Determine if a Control with a TAB exists for a Control on the Window.
   // If so, return a 1.
   IF vWindow.Control.SyncKey < 9999
      RETURN 1
   END
   FOR EACH vWindow.CtrlCtrl
      SetViewToSubobject( vWindow, "CtrlCtrl" )
      nRC = GenJSPJ_FindTAB( vWindow )
      ResetViewFromSubobject( vWindow )
      IF nRC > 0
         RETURN nRC
      END
   END
   RETURN 0

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: FlagUsedViewsGetFocusJ
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
FlagUsedViewsGetFocusJ( VIEW vDialog     BASED ON LOD TZWDLGSO,
                        VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                        STRING ( 32 )    szFocusCtrlTag,
                        INTEGER          lTabIndex,
                        STRING ( 32 )    szWysiwygEditor )

   STRING ( 50 ) szControlType
   STRING ( 1 )  szProcessControlFlag
   STRING ( 1 )  szTinyMCEFlag
   INTEGER       lTempIndex
   INTEGER       lSubtype
   INTEGER       lSubtypeX
   INTEGER       lSort
   INTEGER       nRC

   lSort = 0

   // This operation performs the following functions:
   // 1. It is used to identify any Named Views that have mapping on this window (sets flag wWindowUseFlag).
   // 2. It identifies if a Grid exists that uses sorting. (That is needed to pull in the proper .js files.)
   // 3. It identifies the Control that should be given focus by setting the szFocusCtrlTag value.
   // 4. It identifies each ComboBox on the Page. This is used to generate on OnChange event capture by the calling routine.
   // 5. It identifies if there is an MLE request for the wysiwygEditor files.

   FOR EACH vDialog.Control

      szControlType = vDialog.ControlDef.Tag

      szProcessControlFlag = ""
      IF szControlType = "GridEditCtl"
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
         IF RESULT >= zCURSOR_SET
            // For a GridEditCtl control, we have input mapping only if "Edit" property is requested.
            szProcessControlFlag = "Y"
         END
      END
      IF szControlType = "EditBox" OR
         szControlType = "ComboBox" OR
         szControlType = "Text" OR
         szControlType = "CheckBox" OR
         szControlType = "ListBox" OR
         szControlType = "MLEdit" OR
         szControlType = "Outliner" OR
         szControlType = "RadioGrp" OR
         szControlType = "GridCheckCtl" OR
         szControlType = "Grid" OR
         szControlType = "Calendar" OR
         szProcessControlFlag = "Y"

         // 1.(above) Identify any Named Views that have mapping on this window.
         SET CURSOR FIRST vDialog.CtrlMapView WITHIN vDialog.Control
         IF RESULT >= zCURSOR_SET
            SET CURSOR FIRST vDialogRoot.ViewObjRef
                       WHERE vDialogRoot.ViewObjRef.ZKey = vDialog.CtrlMapView.ZKey
            IF RESULT >= zCURSOR_SET
               vDialogRoot.ViewObjRef.wWindowUseFlag = "Y"
            END

            IF szControlType = "ComboBox"
               SET CURSOR NEXT vDialog.CtrlMap
               IF vDialog.CtrlMapView EXISTS
                  SET CURSOR FIRST vDialogRoot.ViewObjRef
                             WHERE vDialogRoot.ViewObjRef.ZKey = vDialog.CtrlMapView.ZKey
                  IF RESULT >= zCURSOR_SET
                     vDialogRoot.ViewObjRef.wWindowUseFlag = "Y"
                  END
               END
            END
         END

         // 2.(above) For Grid, identify is Sort is requested.
         IF lSort = 0 AND szControlType = "Grid"

            lSubtypeX = vDialog.Control.ExtendedStyle

            // #define zSS_SORTEDHEADERS 0x00040000 = 262144
            // #define zSS_REMEMBERSORT  0x00020000 = 131072

            lSort = IsFlagSequenceSet( lSubtypeX, 262144 )
            IF lSort = 0
               lSort = IsFlagSequenceSet( lSubtypeX, 131072 )
            END

         END

         // 3.(above) Except for Grid, ListBox and Text, process for setting Focus.
         IF szControlType != "Grid" AND
            szControlType != "Text" AND
            szControlType != "ListBox"

            lTempIndex = vDialog.Control.SyncKey
            IF lTempIndex != 0 AND lTempIndex < lTabIndex

               szFocusCtrlTag = vDialog.Control.Tag
               lTabIndex = lTempIndex

            END
         END

         // 4.(above) Create entry for ComboBox.
         IF szControlType = "ComboBox"
            lSubtype = vDialog.Control.Subtype
            nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
            IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
               CREATE ENTITY vDialogRoot.ComboBoxEntry
               vDialogRoot.ComboBoxEntry.Name = vDialog.Control.Tag
            END
         END

         // 5.(above) Check for wysiwygEditor.
         IF szControlType = "MLEdit"

            szTinyMCEFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "wysiwyg TinyMCE"
            IF RESULT >= zCURSOR_SET
               szTinyMCEFlag = "Y"
            END

            IF vDialog.Control.WebCtrlType = "wysiwygEditor" OR szTinyMCEFlag = "Y"
               szWysiwygEditor = vDialog.Control.Tag
            END
         END

      ELSE
         // Continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            lTempIndex = FlagUsedViewsGetFocusJ( vDialog, vDialogRoot, szFocusCtrlTag, lTabIndex, szWysiwygEditor )
            IF lTempIndex != 0
               lSort = 1
            END

            ResetViewFromSubobject( vDialog )

         END
      END
   END

   RETURN lSort
END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATION: GenJSPJ_ProcessFileIn
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
GenJSPJ_ProcessFileIn( VIEW             vDialog BASED ON LOD TZWDLGSO,
                      INTEGER          lFileJSP,
                      STRING ( 10000 ) szWriteBuffer )

   // Build the JSP function code to process a file being transferred from the Client to the Server.

   szWriteBuffer = "   ServletInputStream in = request.getInputStream();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   byte[] line = new byte[256];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   byte[] crlf = {(byte) 0x0D, (byte) 0x0A}; // \r\n"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sLine = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String enctype = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String boundary = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String status = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sName = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sSourceFile = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sTargetFile = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sExtension = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sSourceFileNameOnly = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sTargetDirectory = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String zAction = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String zTargetFileName = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   FileOutputStream file = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int i = in.readLine(line, 0, 256);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int iFileLth = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   boolean holdNewLine = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if (i != -1 && StringUtils.isBlank( strActionToProcess ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   while (i != -1) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //**********************************
   szWriteBuffer = "      iFileLth = iFileLth + i;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // Put a limit on the upload file. This should be determined by the user.
   szWriteBuffer = "      if ( iFileLth > 10485760 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         file.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         file = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //************************************
   szWriteBuffer = "      boolean hasNewLine = i>=2 && line[i-1]==crlf[1] "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         && line[i-2]== crlf[0];"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      if (hasNewLine) i = i-2;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      sLine = new String(line, 0, i);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      if (enctype==null) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // try to determine the encryption type"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (i>3 && sLine.startsWith(^--^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            enctype = ^form-data^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            boundary = sLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            status = ^boundary^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            enctype = ^x-www-form-urlencoded^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else if (enctype.equals(^x-www-form-urlencoded^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         //out.println(^****************^+sLine);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else if (enctype.equals(^form-data^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // Calculating the status of the current line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (status.equals(^boundary^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting the ^Content-Disposition:^ line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            status = ^disposition^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^disposition^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting the ^Content-Type:^ line or a blank line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (sLine.startsWith(^Content-Type:^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^type^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^blank^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^type^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting a blank line"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            status = ^blank^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^blank^) |||| status.equals(^data^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Expecting the data or boundary"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (sLine.startsWith(boundary)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^boundary^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               status = ^data^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // Now ^status^ is updated. Let's do the saving and echoing"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (status.equals(^disposition^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // Getting the file name and open a file for saving"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            int l = sLine.indexOf(^filename=^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            int x;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "            if (l>=0) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sTargetFile = sTargetFile.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "               //We need to save the file extension and use"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //this as the output file extension no matter what "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //extension the output file has."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sSourceFile = sLine.substring(l+9);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sSourceFile = sSourceFile.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               l = sSourceFile.lastIndexOf(^.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "               x = sSourceFile.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "               //If x > l then the filename has no extension and"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //there must be a period in the directory name."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (x > l)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sExtension = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sExtension = sSourceFile.substring(l+1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sSourceFileNameOnly = sSourceFile.substring(x + 1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               strInputFileName = sSourceFileNameOnly;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               sTargetFile = sTargetFile.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               l = sTargetFile.lastIndexOf(^.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               x = sTargetFile.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   szWriteBuffer = "               //If the target files is just a directory (no file name is specified)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //then use the name of the input file."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (x+1 == sTargetFile.length())"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetDirectory = sTargetFile;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetFile = sTargetFile + sSourceFileNameOnly;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetDirectory = sTargetFile.substring(0, x + 1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  //Target file name has no extension, so use the extension on the"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  //source file.  Otherwise, keep the name of target source entirely."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  if (x > l)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     //No extension"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     if (sExtension.equals(^^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        sTargetFile = sTargetFile + sExtension;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        sTargetFile = sTargetFile + ^.^ + sExtension;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (sTargetFile.length()>0)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                   //If the directory doesn't exist, Create one. "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  File f = new File(sTargetDirectory);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  boolean ok = f.mkdirs();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  file = new FileOutputStream(sTargetFile);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               l = sLine.indexOf(^ name=^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (l>=0) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sName = sLine.substring(l+6);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sName = sName.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  l = sName.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  if (l>=0) sName = sName.substring(l+1);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  if (sName.length()>0) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     if (sName.equals(^zAction^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zAction = ^Action^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zAction = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     if (sName.equals(^zTargetFileName^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zTargetFileName = ^TargetFileName^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                     else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                        zTargetFileName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else if (status.equals(^boundary^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (file!=null) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               file.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               file = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (status.equals(^data^)) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            //We are writing out to the filename"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if (file!=null) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (holdNewLine) file.write(crlf);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               file.write(line,0,i);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               holdNewLine = hasNewLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //Check if we have come across zAction or zTargetFileName"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               //If so, then get the data and save them to a global filename."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (zAction.equals(^Action^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  strActionToProcess = sLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  zAction = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               if (zTargetFileName.equals(^TargetFileName^))"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  sTargetFile = sLine;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                  zTargetFileName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               holdNewLine = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            holdNewLine = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      i = in.readLine(line, 0, 256);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
// Note: Globally change //UNDEF to /*DEF*/ and vice versa to enable/disable
//       generation of some debugging code.
//
/////////////////////////////////////////////////////////////////////////////

TRANSFORMATION OPERATION
GenerateJSPJava( VIEW vDialog BASED ON LOD TZWDLGSO,
                 VIEW vSubtask )

   VIEW vLPLR        BASED ON LOD TZCMLPLO
   VIEW vDialogRoot  BASED ON LOD TZWDLGSO
   VIEW vDialogTemp  BASED ON LOD TZWDLGSO
   VIEW vDialogTemp2 BASED ON LOD TZWDLGSO
   VIEW vGroupParent BASED ON LOD TZWDLGSO
   VIEW vDfltMenu    BASED ON LOD TZWDLGSO
   STRING ( 32 )    szLPLR_Name
   STRING ( 1024 )  szJSP_FileName
   STRING ( 1024 )  szJS_FileName
   STRING ( 1024 )  szJAVA_FileName
   STRING ( 1024 )  szDirectoryName
   STRING ( 32 )    szDateFormat
   STRING ( 10 )    szWebRedirection
   STRING ( 10000 ) szWriteBuffer
   STRING ( 10000 ) szJavaScript
   STRING ( 100 )   szIndent
   STRING ( 100 )   szIndentNext
   STRING ( 256 )   szMsg
   STRING ( 32 )    szWebDebugView
   STRING ( 32 )    szViewName
   STRING ( 32 )    szEntityName
   STRING ( 32 )    szCtrlTag
   STRING ( 32 )    szListCtrlTag
   STRING ( 32 )    szFocusCtrlTag
   STRING ( 34 )    szActionTag
   STRING ( 32 )    szDialogTag
   STRING ( 32 )    szWindowTag
   STRING ( 32 )    szDlgTag
   STRING ( 32 )    szWndTag
   STRING ( 64 )    szOperName
   STRING ( 32 )    szAttributeName
   STRING ( 256 )   szClass
   STRING ( 64 )    szFormName
   STRING ( 34 )    szAction
   STRING ( 1 )     InitializationCode
   STRING ( 1 )     InsertBlankFlag
   STRING ( 1 )     szInsertPrebuildJavascriptInline
   STRING ( 1 )     WorkFlag
   STRING ( 100 )   szSizeF
   STRING ( 1024 )  szStyle
   STRING ( 1024 )  szFileName
   STRING ( 1 )     szBorder
   STRING ( 50 )    szCSS_Class
   STRING ( 50 )    szDivContentClass
   STRING ( 50 )    szControlType
   STRING ( 256 )   szBannerName
   STRING ( 10 )    szHeight
   STRING ( 10 )    szWidth
   STRING ( 64 )    szSystemIniApplName
   STRING ( 1 )     szTransferFileFlag
   STRING ( 1 )     szListButtonFlag
   STRING ( 1 )     szTrace
   STRING ( 50 )    szreCAPTCHAImport
   STRING ( 100 )   szJavaPackage
   STRING ( 100 )   szAppImport
   STRING ( 15 )    szIOImport
   STRING ( 1 )     szJasperImport
   STRING ( 50 )    szTempStr
   STRING ( 1 )     szUploadFile
   STRING ( 1 )     szSideMenuExists
   STRING ( 1 )     szShowSideMenu
   STRING ( 1 )     szShowTopMenu
   STRING ( 1 )     szShowBanner
   STRING ( 1 )     szNoPositioning
   STRING ( 1 )     szWindowIsPopup
   STRING ( 1 )     szWindowIsForDashboard
   STRING ( 1 )     szNoAutoLogout
   STRING ( 1 )     szKeyRole
   STRING ( 1 )     szZeidonTaskTimeout
   STRING ( 1 )     szRegisterZeidon
   STRING ( 1 )     szNoMonitorTaskLogout
   STRING ( 10 )    szTimeout
   STRING ( 10 )    szDOCTYPE
   INTEGER          lActionType
// INTEGER          lHeight
// INTEGER          lWidth
   INTEGER          lFileJSP
   INTEGER          lFileJAVA
   INTEGER          lControl
   INTEGER          lHeaderFile
   INTEGER          lLastPosY
   INTEGER          lSize
   INTEGER          lSizeX
   INTEGER          lSizeY
   INTEGER          lTableRowCnt
   INTEGER          lTabIndex
   INTEGER          lSort
   INTEGER          lTrace
// INTEGER          lFloat
   STRING ( 32 )    szWysiwygEditor
   INTEGER          lReusableDialogZKey
   INTEGER          lReusableWindowZKey
   DECIMAL          dDLUnits
   INTEGER          lLth
   SHORT            nRC

   // Generate a JSP file for formatting the Window that has current position.

   NAME VIEW vDialog "GenJSP_Dialog"
   szDialogTag = vDialog.Dialog.Tag
   szWindowTag = vDialog.Window.Tag
   szFormName = szDialogTag + szWindowTag

   szWriteBuffer = "Generating JSP Java: " + szDialogTag + "." + szWindowTag
   MB_SetMessage( vSubtask, 1, szWriteBuffer )

   // Initialize Output JSP File.
   GetViewByName( vLPLR, "TaskLPLR", vSubtask, zLEVEL_TASK )
   szLPLR_Name = vLPLR.LPLR.Name
   szSystemIniApplName = "[App." + szLPLR_Name + "]"
   szDirectoryName = ""
   SysReadZeidonIni( -1, szSystemIniApplName, "WebDirectory", szFileName )
   SysConvertEnvironmentString( szDirectoryName, szFileName )
   IF szDirectoryName = ""
      szWriteBuffer = "Zeidon.ini file does not have WebDirectory entry in Application: " + szSystemIniApplName
      MessageSend( vSubtask, "", "JSP Generation",
                   szWriteBuffer,
                   zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      RETURN -1
   END

   SysReadZeidonIni( -1, szSystemIniApplName, "WebRedirection", szWebRedirection )
   szJavaPackage = vLPLR.LPLR.JavaPackageName
   zSearchAndReplace( szJavaPackage, 100, "\", "." )
   szAppImport = szJavaPackage + ".*"
   //szAppImport = "," + vLPLR.LPLR.JavaPackageName + ".*"

   SysReadZeidonIni( -1, szSystemIniApplName, "WebDebugView", szWebDebugView )
   SysReadZeidonIni( -1, szSystemIniApplName, "WebKeyRole", szKeyRole )
   SysReadZeidonIni( -1, szSystemIniApplName, "JSPTraceLevel", szTrace )
   SysReadZeidonIni( -1, szSystemIniApplName, "DOCTYPE", szDOCTYPE )
   SysReadZeidonIni( -1, szSystemIniApplName, "UseZeidonTaskTimeout", szZeidonTaskTimeout )
   SysReadZeidonIni( -1, szSystemIniApplName, "NoMonitorTaskLogout", szNoMonitorTaskLogout )
   TraceLineS("** TraceLevel ** ", szTrace)
   IF  szTrace = "1"
      lTrace = 1
   ELSE
      lTrace = 0
   END

   // KJS 08/02/13 - Going to try putting the javascript code in a separate .js file becuase
   // Jeffrey is running over the 65kb jsp limit.
   szJSP_FileName = szDirectoryName + szFormName + ".jsp"
   szJAVA_FileName = szDirectoryName + "genjs\" + szFormName + ".js"
   TraceLineS( "GenerateJSP writing to file: ", szJSP_FileName )
   lFileJSP = SysOpenFile( vDialog, szJSP_FileName, COREFILE_WRITE )
   IF lFileJSP < 0
      MessageSend( vSubtask, "", "JSP Generation",
                   "Invalid JSP directory structure.",
                   zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      RETURN -1
   END

   CreateViewFromViewForTask( vDialogRoot, vDialog, 0 )
   NAME VIEW vDialogRoot "DialogRoot"

   // We are going to assume first that "Relative Positioning is the default.
   szNoPositioning = "Y"

   // KJS 07/23/08 - Check if this dialog window will be built with all relative positioning or with absolute positioning.
   // First check the Dialog setting
   //IF  vDialog.Dialog.WEB_RelativePositionFlag = "Y" OR vDialog.Window.WEB_RelativePositionFlag = "Y"
   IF vDialog.Dialog.WEB_JSPGenerationPositioning = "R"
      szNoPositioning = "Y"
   ELSE
   // No style
   IF  vDialog.Dialog.WEB_JSPGenerationPositioning = "N"
      szNoPositioning = "S"
   ELSE
   // Absolute Style
   IF  vDialog.Dialog.WEB_JSPGenerationPositioning = "A"
      szNoPositioning = ""
   END
   END
   END

   // KJS 07/23/08 - Check if this dialog window will be built with all relative positioning or with absolute positioning.
   // Second check if the Window has a different setting.
   IF vDialog.Window.WEB_JSPGenerationPositioning = "R"
      szNoPositioning = "Y"
   ELSE
   // No style
   IF  vDialog.Window.WEB_JSPGenerationPositioning = "N"
      szNoPositioning = "S"
   ELSE
   // Absolute Style
   IF  vDialog.Window.WEB_JSPGenerationPositioning = "A"
      szNoPositioning = ""
   END
   END
   END

   // KJS 02/19/09 - Added WEB_AbsolutePositionFlag because I would like to use absolute positioning on my popup pages but the rest
   // I want to use relative positioning.  Since I think from now on we will probably only want to use relative positioning for most
   // pages, I think it will be easier to have this flag.
   //IF  vDialog.Window.WEB_AbsolutePositionFlag = "Y"
   //   szNoPositioning = ""
   //END

   // KJS 09/16/08 - Thinking that if WEB_NoBannerFlag = "Y" and WEB_NoTopMenuFlag = "Y" and
   // szNoPositioning = "Y" (using relative positioning) then we can assume that this window
   // is a popup window and so we can get rid of the div "wrapper" and "maincontents" so that
   // the only div will be the content div.  Currently you can still see the body background like all
   // other windows, and I'm not sure we want that.
   // KJS 10/30/08 - I added two styles to the "Window Style" (this is in zeidon.ppe) one for popup and
   // one for dashboard.
   IF vDialogRoot.WndStyle.Tag = "Popup Window"
      szWindowIsPopup = "Y"
   ELSE
   IF vDialogRoot.Window.WEB_NoBannerFlag = "Y" AND vDialogRoot.Window.WEB_NoTopMenuFlag = "Y" AND ( szNoPositioning = "Y" OR szNoPositioning = "S" )
      szWindowIsPopup = "Y"
   ELSE
      szWindowIsPopup = ""
   END
   END

   // Check to see if Window has any tab stops set and indicate so in the Window entity.
   nRC = 0
   FOR EACH vDialog.Control
      IF nRC = 0
         nRC = GenJSPJ_FindTAB( vDialog )
      END
   END
   IF nRC = 0
      vDialogRoot.Window.wWindowHasTabsFlag = "N"
   ELSE
      vDialogRoot.Window.wWindowHasTabsFlag = "Y"
   END

   // JSP HEADER

   // KJS 05/29/08 - We need to add a DOCTYPE to the jsp page.  Not exactly sure
   // which one to add and how often this might need to change (wondering if this should
   // be kept in the .ini file or something but for now I'll put it here.
   // Here is a website with a little info http://www.alistapart.com/stories/doctype/
   // Also this one http://htmlhelp.com/tools/validator/doctype.html
   // KJS 10/03/12 - Jeff wants to use HTML5 instead of 4.01. I am putting this in the zeidon.ini at least for now because
   // I'm not sure if we want to use 5 or not...
   // I think we should always be HTML5 now...
   //IF szDOCTYPE = "" OR szDOCTYPE = "4.01"
   //   szWriteBuffer = "<!DOCTYPE HTML PUBLIC ^-//W3C//DTD HTML 4.01 Transitional//EN^ ^http://www.w3.org/TR/html4/loose.dtd^>"
   //ELSE
   //IF szDOCTYPE = "5"
      szWriteBuffer = "<!DOCTYPE HTML>"
   //END
   //END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%-- " + szFormName + " --%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szIOImport = ""
   szreCAPTCHAImport = ""

   CreateViewFromView( vDialogTemp, vDialog )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "File Transfer to Server"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   // If we are uploading a file, we need to include "java.oi.*" in the import statement.
   IF nRC >= zCURSOR_SET
      szIOImport = ",java.io.*"
   END

   FOR EACH vDialogTemp.Action
      // If there is an action to download a file, we need to include "java.oi.*" in the import statement.
      lActionType = vDialogTemp.Action.Type
      IF lActionType = zWAB_ProcessDownloadFile
         szIOImport = "Y"
      END
      IF lActionType = zWAB_StartJasperPDF_Page
         szJasperImport = "Y"
      END
      // If there is an action for the reCAPTCHA control, then we need
      // net.tanesha.recaptcha.* in the import statement
      IF lActionType = 35 OR lActionType = 55
         szreCAPTCHAImport = "Y"
      END
   END

   // If there is an groupbox for the reCAPTCHA control, then we need
   // net.tanesha.recaptcha.* in the import statement
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "reCAPTCHA"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   // If we are uploading a file, we need to include "java.oi.*" in the import statement.
   IF nRC >= zCURSOR_SET
      szreCAPTCHAImport = ",net.tanesha.recaptcha.*"
   END

// szWriteBuffer = "<%@ page import=^java.util.*,javax.servlet.*,javax.servlet.http.*,org.apache.commons.lang3.*," +
//                 "com.quinsoft.zeidon.*,com.quinsoft.zeidon.standardoe.*," +
//                 "com.quinsoft.zeidon.utils.*,com.quinsoft.zeidon.vml.*,com.quinsoft.zeidon.domains.*" + szAppImport +
//                 szIOImport + szreCAPTCHAImport + "^ %>"
// WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "<%@ page import=^java.util.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^javax.servlet.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^javax.servlet.http.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^org.apache.commons.lang3.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^com.quinsoft.zeidon.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^com.quinsoft.zeidon.standardoe.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^com.quinsoft.zeidon.utils.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^com.quinsoft.zeidon.vml.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ page import=^com.quinsoft.zeidon.domains.*^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF szIOImport != ""
      szWriteBuffer = "<%@ page import=^java.io.*^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   IF szreCAPTCHAImport != ""
      szWriteBuffer = "<%@ page import=^net.tanesha.recaptcha.*^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   IF szJasperImport != ""
      szWriteBuffer = "<%@ page import=^net.sf.jasperreports.engine.JasperExportManager^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "<%@ page import=^" + szAppImport + "^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // KJS 07/10/15 - Include for an import file for any extra imports.
   IF vDialog.Dialog.WEB_ImportInclude != ""
      szWriteBuffer = "<%@ include file=^" + vDialog.Dialog.WEB_ImportInclude  + "^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   DropView( vDialogTemp )

   szWriteBuffer = "<%! "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // KJS 08/06/13 - We are going to try having the tasks stored on a time sensitive hash map. This is try try
   // and reduce the java heap space which seems to be keeping hold of tasks even though we try and delete them
   // when the user ends a session. Comment out the "getInstance" and use new code.
   IF szZeidonTaskTimeout = "Y"
      szWriteBuffer = "ObjectEngine objectEngine = " + szJavaPackage + ".ZeidonObjectEngineConfiguration.getObjectEngine();"
   ELSE
      szWriteBuffer = "ObjectEngine objectEngine = JavaObjectEngine.getInstance();"
   END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // INPUT MAPPING

   // First loop through controls and null out each Named View that is used.
   FOR EACH vDialog.ViewObjRef
      vDialog.ViewObjRef.wWindowUseFlag = ""
   END

   // Execute FlagUsedViewsGetFocusR for multiple functions, such as determining which views are used in mapping.
   FOR EACH vDialogRoot.ComboBoxEntry
      DELETE ENTITY vDialogRoot.ComboBoxEntry NONE
   END

   szWysiwygEditor = ""  // do not include widgEditor.js file
   szFocusCtrlTag = ""
   lTabIndex = 9999
   lSort = FlagUsedViewsGetFocusJ( vDialog, vDialogRoot, szFocusCtrlTag, lTabIndex, szWysiwygEditor )
   TraceLineS( "Focus on Control: ", szFocusCtrlTag )

   /******************************  ReplaceXSSValues  ******************************/
   // To prevent cross-scripting attacks.
   szWriteBuffer = "public String ReplaceXSSValues( String szFieldValue )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String szOutput;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   szOutput = szFieldValue.replace( ^<^,^&lt;^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   szOutput = szOutput.replace( ^>^, ^&gt;^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   szOutput = szOutput.replace( ^\^^, ^&quot;^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   szOutput = szOutput.replace( ^\'^, ^&apos;^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   return( szOutput );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /******************************  DoInputMapping  ******************************/

   // Create prototype and any definitions for views that are to be used.
   szWriteBuffer = "public int DoInputMapping( HttpServletRequest request,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                           HttpSession session,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                           ServletContext application,"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "                           boolean webMapping )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String taskId = (String) session.getAttribute( ^ZeidonTaskId^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   Task task = objectEngine.getTaskById( taskId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   FOR EACH vDialog.ViewObjRef WHERE vDialog.ViewObjRef.wWindowUseFlag = "Y"
      szWriteBuffer = "   View " + vDialog.ViewObjRef.Name + " = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "   View vGridTmp = null; // temp view to grid view"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   View vRepeatingGrp = null; // temp view to repeating group view"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strDateFormat = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strMapValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    iView = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   long   lEntityKey = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strEntityKey = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   long   lEntityKeyRG = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strEntityKeyRG = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTag = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTemp = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    iTableRowCnt = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strSuffix = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    nRelPos = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   CursorResult csrRC = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    nMapError = 1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   task.TraceLineS( ^DoInputMapping for jsp =======>> ^, ^" + szFormName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   task.TraceLineS( ^DoInputMapping Session ID: ^ + taskID );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "   if ( webMapping == false )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      session.setAttribute( ^ZeidonError^, null );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Generate mapping statements for each view and control.
   FOR EACH vDialog.ViewObjRef WHERE vDialog.ViewObjRef.wWindowUseFlag = "Y"

      szViewName = vDialog.ViewObjRef.Name
      szWriteBuffer = "   " + szViewName + " = task.getViewByName( ^" + szViewName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( " + szViewName + " ) )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      OrderEntityForView( vDialog, "Control", "PSDLG_Y A PSDLG_X A" )
      GenJSPJ_InputMapRecurs( vDialog, szViewName, lFileJSP, szWriteBuffer, lTableRowCnt, "" )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   szWriteBuffer = "   if ( webMapping == true )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return 2;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( nMapError < 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      session.setAttribute( ^ZeidonError^, ^Y^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   return nMapError;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /******************************  End of DoInputMapping  ******************************/

   // End of JSP functions.
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   /************************* MAIN SECTION INITIALIZATION  This is where action jsp code will be created. ***********************/

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "session = request.getSession( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "Task task = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF szWebRedirection = "Y"
      szWriteBuffer = "View wWebXA = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "KZMSGQOO_Object mMsgQ = null; // view to Message Queue"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "View vKZXMLPGO = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// szWriteBuffer = "com.quinsoft.zeidon.system.Object_KZXMLPGO = null;"
// WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strLastPage = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "short  nRepos = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "boolean bDone = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// szWriteBuffer = "int nPos = 0;"
// WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int nOptRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "int nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "CursorResult csrRC = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "CursorResult csrRCk = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "int nRCk = 0;  // temp fix for SetCursorEntityKey"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "long lEKey = 0; // temp fix for SetCursorEntityKey"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "String strKey = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strActionToProcess = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strURL = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strError = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strErrorFlag = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strErrorTitle = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strErrorMsg = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strFocusCtrl = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strBannerName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strVMLError = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strOpenFile = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strOpenPopupWindow = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strPopupWindowSZX = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strPopupWindowSZY = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strDateFormat = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF szKeyRole = "Y"
      szWriteBuffer = "String strLoginName = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "String strKeyRole = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   IF szWebDebugView != ""
      szWriteBuffer = "String strFeedback = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "String strDialogName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strWindowName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strLastWindow;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strLastAction;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strFunctionCall = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strNextJSP_Name = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String strInputFileName = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // KJS 09/29/10
   // If this time through, this happens to be a refresh, then go to the logout screen.
   // This is because when the user closes the browser we want the unload code to happen.
   // And so we also need to do the same for a refresh (we can't distinquish which one the user
   // selected). Do we want that to happen though... if the dialog has "Do NOT auto log out" checked?
   szWriteBuffer = "strActionToProcess = (String) request.getParameter( ^zAction^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "strLastWindow = (String) session.getAttribute( ^ZeidonWindow^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "if ( StringUtils.isBlank( strLastWindow ) ) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strLastWindow = ^NoLastWindow^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "strLastAction = (String) session.getAttribute( ^ZeidonAction^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // KJS 09/29/10 - This was added to tzwdlg40.vml and I need to make sure that this is how we
   // want to do this here in the java world!
   // If this is a log on page (like wStartupLogin) then we don't want to have the 'Unregister Zeidon' happen
   // if the user leaves the page or refreshes, it causes problems.  So we won't go to the logout page in that case.
   szNoAutoLogout = vDialogRoot.Dialog.WEB_NoAutoLogOut
   IF ( vDialog.Window.WEB_RegisterZeidonWindow != "Y" AND szNoAutoLogout != "Y" )
      szWriteBuffer = "if ( strLastWindow.equals(^" + szFormName + "^) && StringUtils.isBlank( strActionToProcess ) && StringUtils.isBlank( strLastAction ) )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "{"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strURL = response.encodeRedirectURL( ^logout.jsp^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   response.sendRedirect( strURL );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      // KJS 09/04/14 - Should we be dropping the task here????
      szWriteBuffer = "   return;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "}"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END


   // get task
   szWriteBuffer = "// Check to see if the Zeidon subtask view already exists.  If not, create"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// it and copy it into the application object."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "String taskId = (String) session.getAttribute( ^ZeidonTaskId^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // NoMonitorTaskLogout

   szRegisterZeidon = ""
   nRC = zSearchSubString( szFormName, "Login", "f", 0 )
   IF nRC >= 0  OR vDialog.Window.WEB_RegisterZeidonWindow = "Y" // "wStartUpLogin"
      szRegisterZeidon = "Y"
   END

   // I think this is only for if we are registering zeidon on this page...
   // KJS 09/04/14 - Setting a logout date, to try and determine if a user tries to log into application when they already have a session open.
   // It looks like users write over data when they have a couple of browser sessions open.
   /*
   IF szRegisterZeidon = "Y" AND szNoMonitorTaskLogout = ""
      szWriteBuffer = "Date dLogin = (Date) session.getAttribute( ^ZeidonTaskLoginDate^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "Date dLogout = (Date) session.getAttribute( ^ZeidonTaskLogoutDate^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   */

   szWriteBuffer = "if ( StringUtils.isBlank( taskId ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 09/25/09 - Previously we were looking for the word "Login" in a window name to determine
   // if this window should have the RegisterZeidonApplication in it.  I will keep this code for now
   // but I really think this should be a property for the window.  I have added a checkbox to WND_UPD
   // for this.
   IF szRegisterZeidon = "Y" // "wStartUpLogin"

      // KJS 04/21/14 - changing from createTask( "lplr", true ) to createTask( "lplr", session.getId())
      szWriteBuffer = "   task = objectEngine.createTask( ^" + vLPLR.LPLR.Name + "^, session.getId() );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   session.setAttribute( ^ZeidonTaskId^, task.getTaskId() );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      //szWriteBuffer = "   task = new zeidon.zView( );"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "   task.RegisterZeidonApplication(^//" + vLPLR.LPLR.Name + "^ );"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "   session.setAttribute( ^ZeidonSubtask^, task );"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   ELSE
      //szWriteBuffer = "   strURL = response.encodeRedirectURL( ^NoZeidonTaskIdlogout.jsp^ );"
      szWriteBuffer = "   strURL = response.encodeRedirectURL( ^logout.jsp^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   response.sendRedirect( strURL );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   return;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   END

   /*
   IF szRegisterZeidon = "Y" AND szNoMonitorTaskLogout = ""
      szWriteBuffer = "   // We are trying to determine on login, if a user is already logged into the task, and if so, then do not allow them to log in again. "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( dLogin != null && dLogout != null ) "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^loggedintotask.jsp^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      response.sendRedirect( strURL );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      return;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   */

   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF szRegisterZeidon = "Y" AND szNoMonitorTaskLogout = ""
      szWriteBuffer = "   strURL = response.encodeRedirectURL( ^loggedintotask.jsp^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   response.sendRedirect( strURL );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   return;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   ELSE
     szWriteBuffer = "   task = objectEngine.getTaskById( taskId );"
     WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "if ( task == null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "    strURL = response.encodeRedirectURL( ^Notasklogout.jsp^ );"
   szWriteBuffer = "   session.setAttribute( ^ZeidonTaskId^, null );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strURL = response.encodeRedirectURL( ^logout.jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   return; // something really bad has happened!!!"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
// szWriteBuffer = "else"
// WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// szWriteBuffer = "{"
// WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 02/29/2008 - We would like to delete report files when they are generated.  Here is code
   // that sort of does the trick but the problem is that I need to know the exact file where the
   // jsp code is kept.  How should we do this.  I can try and get the current directory and then
   // figure it from there (I believe when I tried, current directory was
   // c:\program file...\webapps\" but then I need to know whether we are \zencas or \noa etc and
   // would this work in all cases.  Can't do theory like timout.inc cause this is jsp.  Do I hard
   // code the directory in the .ini file and assume all noa users would have the same tomcat directory
   // structure.  Need to talk to Aadit and Jeff.
   // Also, do I only want to create this code if this page contains a report or should I just do it all the
   // time?  Action.Type = 41 seems to be the action for start Browser HTML...
   /*
   CreateViewFromView( vDialogTemp, vDialog )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogTemp, "Action", "Type", lControl,
                          "41", "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      strOpenFile = request.getParameter( "zOpenFile" );
      if ( strOpenFile != null && strOpenFile != "" )
      {
         strOpenFile = "C:\\Program Files\\Apache Group\\Tomcat 5.5\\webapps\\ROOT\\zencas\\" + strOpenFile;
         File f = new File(strOpenFile);
         //USE szSystemIniApplName????!!!!
         //strOpenFile = "/zencas/kellytext.txt";
         //File f = new File(request.getRealPath(strOpenFile));
         f.delete();
      }
   END
   DropView( vDialogTemp )
   */
   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   task.log().info( ^Page Name ========>>> ^ + ^" + szFormName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      szWriteBuffer = "   task.log().info( ^zAction ========>>> ^ + strActionToProcess );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // Generate Transfer File to Server logic if there is a GroupBox of type "File Transfer to Server".
   CreateViewFromView( vDialogTemp, vDialog )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "File Transfer to Server"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      GenJSPJ_ProcessFileIn( vDialog, lFileJSP, szWriteBuffer )
   END
   DropView( vDialogTemp )

   // vKZXMLPGO

   //szWriteBuffer = "   vKZXMLPGO = task.getViewByName( ^KZXMLPGO^ );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   if ( VmlOperation.isValid( vKZXMLPGO ) )"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   {"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      vKZXMLPGO = JspWebUtils.createWebSession( null, task, userId );"
   szWriteBuffer = "vKZXMLPGO = JspWebUtils.createWebSession( null, task, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      vKZXMLPGO.setName(^KZXMLPGO^ );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   }"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "mMsgQ = new KZMSGQOO_Object( vKZXMLPGO );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "mMsgQ.setView( VmlOperation.getMessageObject( task ) );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // KJS 10/08/15 - What if this dialog has more than one source file? We need to have both defined, so let's loop and see.
   FOR EACH vDialogRoot.SourceFile 
      // Since I assume we can't call c code, then don't worry if the type is "c"
      IF vDialogRoot.SourceFile.LanguageType = "V" OR vDialogRoot.SourceFile.LanguageType = "J" 
         szWriteBuffer = vDialogRoot.SourceFile.Name  + "_Dialog " + vDialogRoot.SourceFile.Name  + " = new " + vDialogRoot.SourceFile.Name  + "_Dialog( vKZXMLPGO );"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      END 
   END
   //szWriteBuffer = szDialogTag + "_Dialog " + szDialogTag + " = new " + szDialogTag + "_Dialog( vKZXMLPGO );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

/* DKS_TRACE_START
   // Temporary traces to understand how Error Object is used.
   szWriteBuffer = "   if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      task.log().info( ^***Message Object Check: FOUND __MSGQ^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      task.log().info( ^***Message Object Check: NOT found __MSGQ^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
DKS_TRACE_END */

   // MAIN SECTION ACTION PROCESSING

   szWriteBuffer = "strURL = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "bDone = false;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "task.log().info(^*** " + szFormName + " strActionToProcess *** ^ + strActionToProcess );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "task.log().info(^*** " + szFormName + " LastWindow *** ^ + strLastWindow );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "task.log().info(^*** " + szFormName + " LastAction *** ^ + strLastAction );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "if ( strActionToProcess != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   if ( task != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "      task.log().info( ^Process Action: ^ + strActionToProcess );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // Process Error Object.
   szWriteBuffer = "      // Delete the message object if error on last interation."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      View vMsgQ = task.getViewByName( ^__MSGQ^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( VmlOperation.isValid( vMsgQ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         mMsgQ.setView( null );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         vMsgQ.drop( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF szWebDebugView != ""

      szWriteBuffer = "      strFeedback = request.getParameter( ^zFeedback^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( strFeedback != ^^ )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // szWriteBuffer = "         " +  szDialogTag + "_Dialog "
   // szWriteBuffer = szWriteBuffer + szDialogTag + " = new "
   // szWriteBuffer = szWriteBuffer + szDialogTag + "_Dialog( vKZXMLPGO );"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         " + szDialogTag + ".TraceLine( ^DoInputMapping Feedback: ^ + strFeedback );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         " + szDialogTag + ".SaveFeedback( ^" + szWebDebugView + "^, ^"
      szWriteBuffer = szWriteBuffer + szDialogTag + "^, ^" + szWindowTag + "^, strFeedback );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

  szWriteBuffer = "   }"
  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Create Action code for each Action, except for Window Actions.
   FOR EACH vDialog.Action
      szActionTag = vDialog.Action.Tag  // moved here just to assist debugging
      IF vDialog.ActWndEvent DOES NOT EXIST
      // OR vDialog.ActEvent EXISTS // DKS likes this line ... Don does not
      // OR vDialog.ActOpt EXISTS   // DKS likes this line ... Don does not

         nRC = zstrcmpi( szActionTag, "alt-f4" )
         IF nRC = 0
            szActionTag = "AltF4"
         END

         IF vDialog.Action.Type != zWAB_ExitDialogTask
            // We don't format the Action on exit dialog, as the function in the java script calls OnUnload.
            GenJSPJ_Action( vDialog, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szActionTag, lTrace )
         END
      ELSE
         IF vDialog.ActEvent EXISTS OR vDialog.ActOpt EXISTS
            TraceLineS( "Action has WndEvent that PREVENTS generation: ", szActionTag )
         END
      END
   END

   //If there are comboboxes on this page that are "auto include" or "set foreign key" but
   //doesn't have another action, then we need a generic action that gets called.  We need
   //to submit the page and have the DoInputMapping called (this is where the
   //autoinclude etc code gets called).

   szWriteBuffer = "   while ( bDone == false && strActionToProcess.equals( ^ZEIDON_ComboBoxSubmit^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // Input Mapping"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = DoInputMapping( request, session, application, false );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC < 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // No redirection, we are staying on this page."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // If the Window has a reusable side menu, add the actions from that menu.
   IF vDialog.ReusableSideWindow EXISTS
      IF vDialog.ReusableSideDialog.ZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "sm" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        //IF lLth > 32
                        //   MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                        //                szAction,
                        //                zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        //END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByName( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, vDialog.ReusableSideDialog.Tag, 0 )
      // plListHandle = ActivateMetaOI_KeepList( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, vDialog.ReusableSideDialog.Tag, 0, 0,
      //                                         0, plListHandle )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "sm" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        //IF lLth > 32
                        //   MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                        //                szAction,
                        //                zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        //END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window or Dialog has a reusable main menu, add the actions from that menu.
   lReusableDialogZKey = 0
   IF vDialog.ReusableMainWindow EXISTS
      lReusableDialogZKey = vDialog.ReusableMainDialog.ZKey
      lReusableWindowZKey = vDialog.ReusableMainWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableMainWindow EXISTS
         lReusableDialogZKey = vDialog.DefaultReusableMainDialog.ZKey
         lReusableWindowZKey = vDialog.DefaultReusableMainWindow.ZKey
      END
   END
   IF lReusableDialogZKey != 0  // dks
      IF lReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "m" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, lReusableDialogZKey, 0 )
      // plListHandle = ActivateMetaOI_KeepList( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, 0, lReusableDialogZKey, 0,
      //                                         1, plListHandle )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "m" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window or Dialog has a reusable main menu for actions only, add the actions from that menu.
   lReusableDialogZKey = 0
   IF vDialog.ReusableActionWindow EXISTS
      lReusableDialogZKey = vDialog.ReusableActionDialog.ZKey
      lReusableWindowZKey = vDialog.ReusableActionWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableActionWindow EXISTS
         lReusableDialogZKey = vDialog.DefaultReusableActionDialog.ZKey
         lReusableWindowZKey = vDialog.DefaultReusableActionWindow.ZKey
      END
   END
   IF lReusableDialogZKey != 0  // dks
      IF lReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "ma" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, lReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            FOR EACH vDialogTemp.Option
               IF vDialogTemp.OptAct EXISTS
                  SET CURSOR FIRST vDialogTemp.Action WHERE vDialogTemp.Action.ZKey = vDialogTemp.OptAct.ZKey
                  IF RESULT >= zCURSOR_SET
                     IF vDialogTemp.Action.Type != zWAB_ExitDialogTask
                        //Because the menu actions can be created on separate windows from the control
                        //actions, we need to make sure these actions are unique.  We will prefix a
                        //"m" to the main menu actions and prefix a "sm" to the side menu actions.
                        szAction = "ma" + vDialogTemp.Action.Tag
                        lLth = zstrlen( szAction )
                        IF lLth > 32
                           MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                                        szAction,
                                        zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                        END

                        GenJSPJ_Action( vDialogTemp, vDialogRoot, lFileJSP, szWriteBuffer, szFormName, szAction, lTrace )
                     END
                  END
               END
            END
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // OnUnload
   szWriteBuffer = "   while ( bDone == false && strActionToProcess.equals( ^_OnUnload^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( task != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.log().info( ^OnUnload UnregisterZeidonApplication: ----->>> ^ + ^" + szFormName + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.dropTask();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         session.setAttribute( ^ZeidonTaskId^, task );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   /*
   // KJS 09/04/14 - Setting a logout date, to try and determine if a user tries to log into application when they already have a session open.
   // It looks like users write over data when they have a couple of browser sessions open.
   szWriteBuffer = "         // Setting a logout date to try and determine if a user tries to log into application when they already have a session open."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         session.setAttribute( ^ZeidonTaskLogoutDate^, new java.util.Date() );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   */
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // Next Window is HTML termination"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^logout.jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // OnTimeout
   szWriteBuffer = "   while ( bDone == false && strActionToProcess.equals( ^_OnTimeout^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( task != null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.log().info( ^OnUnload UnregisterZeidonApplication: ------->>> ^ + ^" + szFormName + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.dropTask();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         session.setAttribute( ^ZeidonTaskId^, task );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   /*
   // KJS 09/04/14 - Setting a logout date, to try and determine if a user tries to log into application when they already have a session open.
   // It looks like users write over data when they have a couple of browser sessions open.
   szWriteBuffer = "         // Setting a logout date to try and determine if a user tries to log into application when they already have a session open."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         session.setAttribute( ^ZeidonTaskLogoutDate^, new java.util.Date() );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   */
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // Next Window is HTML termination"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^TimeOut.html^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // OnResubmitPage
   szWriteBuffer = "   while ( bDone == false && strActionToProcess.equals( ^_OnResubmitPage^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = true;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// szWriteBuffer = "      session.setAttribute( ^ZeidonAction^, ^_OnResubmitPage^ );" // Kelly wants this one? Not sure why - dks 2011.11.09
   szWriteBuffer = "      VmlOperation.SetZeidonSessionAttribute( session, task, ^" + szFormName + "^, strActionToProcess );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      // Input Mapping"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = DoInputMapping( request, session, application, false );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC < 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + szFormName + ".jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = 1;  //do the redirection"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( nRC != 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nRC > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nRC > 1 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strURL = response.encodeRedirectURL( ^" + szFormName + ".jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            task.log().info( ^Action Error Redirect to: ^ + strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //szWriteBuffer = "         //strActionToProcess = ^^;"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 07/17/13 - I am putting in the following "if" and later taking out a "return", because I don't think we
   // want to do a redirect when we are staying on the current page (otherwise we do an extra submit for the page which I think is unnecessary).
   // KJS 09/05/13 - Now I see that if we do the redirect to another page, I need to put in a "return;" otherwise, we complete the
   // build of this page before redirecting which will call vml postbuild code if it exists. We do not want to build the postbuild code again.
   szWriteBuffer = "         if ( ! strURL.equals(^" + szFormName + ".jsp^) ) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            // If we are redirecting to a new page, then we need this return so that the rest of this page doesn't get built."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nRC > -128 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "            //strActionToProcess = ^^;"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strURL = response.encodeRedirectURL( ^" + szFormName + ".jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            task.log().info( ^Mapping Error Redirect to: ^ + strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "            //response.sendRedirect( strURL );" // KJS 07/17/13 - taking out because I don't want to redirect when it's current page.
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            task.log().info( ^InputMapping Reentry Prevented^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // KJS 07/16/13 - I still don't totally understand why we do the following "return".
   // I see when running the code that when I submit the page... it seems to run the jsp twice (almost like it is submitting twice, and I don't understand why
   // that is. If I have the return here... it doesn't go through rebuilding the whole page, it immediately goes from here to the start of the jsp. So that that point
   // strLastAction is not null and so we don't go to logout.jsp. If I take the return line out... then it rebuilds the whole page (sets strLastAction = "" at the end),
   // runs the jsp again and we hit the first "if..." that redirects us to logout.jsp. I guess I see why we do the return, I'm just confused as to why it seems like the
   // page submits twice.
   // Ahhh... I see, it's because we do a response.sendRedirect( strURL ). Now I wonder... do we always need to do that?
   // KJS 07/17/13 - Taking this return out because I'm not doing a redirect unless it's a new page. for now I will comment out just the return but
   // later I want to take it all out.
   /*
   szWriteBuffer = "   if ( StringUtils.isBlank( strActionToProcess ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // task.GarbageCollectViews( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      //return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   */
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "if ( session.getAttribute( ^ZeidonError^ ) == ^Y^ )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   session.setAttribute( ^ZeidonError^, null );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // DKS 2015.06.19 - Get the InsertPrebuildJavascriptInlineFlag.
   SysReadZeidonIni( -1, szSystemIniApplName, "InsertPrebuildJavascriptInlineFlag", szInsertPrebuildJavascriptInline )

   szJavaScript = ""

   // Actions Section Trailer, including prebuild and postbuild code.
   InsertBlankFlag = "N"
   FOR EACH vDialog.Action
      FOR EACH vDialog.ActWndEvent
         IF vDialog.ActWndEvent.Type = 1 OR vDialog.ActWndEvent.Type = 2 // prebuild or postbuild

            IF InsertBlankFlag = "Y"
               szWriteBuffer = ""
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            END

            // KJS 04/30/15 - Inserting javascript code for prebuild action.
            IF vDialog.ActWndEvent.Type = 1 AND vDialog.Action.WebJavaScript != ""
               szJavaScript = vDialog.Action.WebJavaScript
            END
            IF vDialog.ActOper EXISTS

               szDlgTag = vDialog.Dialog.Tag
               szWndTag = vDialog.Window.Tag
               szOperName = vDialog.ActOper.Name
            // szWriteBuffer = "      " +  szDlgTag + "_Dialog " + szDlgTag + " = new " +    dks 2011.03.03
            //                 szDlgTag + "_Dialog( vKZXMLPGO );"
            // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            // szWriteBuffer = "   task.log().info( ^ZeidonOperation: " + szDlgTag + "." + szOperName + " called from " + szFormName + ".jsp^ );"  // keep us informed of where we are ...  dks 2011.11.11
               szWriteBuffer = "   VmlOperation.SetZeidonSessionAttribute( null, task, ^" + szFormName + "^, ^" + szDlgTag + "." + szOperName + "^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            // szWriteBuffer = "   nOptRC = task.CallDialogOperation( ^" + szDlgTag + "^, ^" + szOperName + "^, 1 );"
               IF vDialog.SourceFileForOper.LanguageType = "S"
                  szWriteBuffer = "   nOptRC = " + szDlgTag + "." + szOperName + "( new com.quinsoft.zeidon.scala.View( vKZXMLPGO ) );"
               ELSE
                  szWriteBuffer = "   nOptRC = " + szDlgTag + "." + szOperName + "( new zVIEW( vKZXMLPGO ) );"
               END
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               // No longer applicable in JOE ... don't exactly know how to prevent reentry if we have to.   dks 2011.11.11
            // szWriteBuffer = "   if ( nOptRC <= -128 )"
            // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            // szWriteBuffer = "   {"
            // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            // szWriteBuffer = "      task.log().info( ^Operation Reentry Prevented^ );"
            // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            // szWriteBuffer = "      return;"
            // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            // szWriteBuffer = "   }"
            // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

               szWriteBuffer = "   if ( nOptRC == 2 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      View vView;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strMessage;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strURLParameters;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

               szWriteBuffer = "      vView = task.getViewByName( ^wXferO^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strMessage = vView.cursor( ^Root^ ).getAttribute( ^WebReturnMessage^ ).getString( ^^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strURLParameters = ^?CallingPage=" + szFormName + ".jsp^ +"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                         ^&Message=^ + strMessage +"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                         ^&DialogName=^ + ^" + szDlgTag + "^ +"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                         ^&OperationName=^ + ^" + szOperName + "^;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strURL = response.encodeRedirectURL( ^MessageDisplay.jsp^ + strURLParameters );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      response.sendRedirect( strURL );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      task.log().info( ^Pre/Post Redirect to: ^ + strURL );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      return;"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
            END
            InsertBlankFlag = "Y"
         END
      END
   END

   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   IF InsertBlankFlag = "Y"
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // If there is a dynamic banner name specified in the vKZXMLPGO object for this Dialog, use it. Otherwise, try to use the one in the Dialog definition.
   // KJS 07/27/15 - It has been suggested to have the top banner use the "include" file method like all other includes.
   // If we do that then we can not have the dynamic banner because this is generate time, not runtime. 
   // It doesn't seem like we are using this anyway since we can have a separate banner for each dialog if we want.
   // Leave this code for when we want to change it back. :)
   ///////////////////////////////////////////////////////////
   /*
   szWriteBuffer = "   csrRC = vKZXMLPGO.cursor( ^DynamicBannerName^ ).setFirst( ^DialogName^, ^" + szDialogTag + "^, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( csrRC.isSet( ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strBannerName = vKZXMLPGO.cursor( ^DynamicBannerName^ ).getAttribute( ^BannerName^ ).getString( ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "   if ( StringUtils.isBlank( strBannerName ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szBannerName = vDialog.Dialog.WEB_TopBannerName
   // If a banner include file has been entered by the user, then use this, otherwise
   // hardcode "./include/banner.inc" as the banner name.
   IF szBannerName != ""
      szWriteBuffer = "      strBannerName = ^" + szBannerName + "^;"
   ELSE
      szWriteBuffer = "      strBannerName = ^./include/banner.inc^;"
   END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
*/
   //////////////////////////////////////////////////////////////////////////

   IF szWebRedirection = "Y"
      szWriteBuffer = "   wWebXA = task.getViewByName( ^wWebXfer^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( wWebXA ) )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      wWebXA.cursor( ^Root^ ).getAttribute( ^CurrentDialog^ ).setValue( ^" + szDialogTag + "^, ^^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      wWebXA.cursor( ^Root^ ).getAttribute( ^CurrentWindow^ ).setValue( ^" + szWindowTag + "^, ^^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   /************************* End of MAIN SECTION INITIALIZATION (JSP CODE)   ***********************/

   // Start HTML

   // HTML SECTION *****************************************************************

   // JSP HEADER

   szWriteBuffer = "<html>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<head>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF vDialog.Window.Caption != ""
      szWriteBuffer = "<title>" + vDialog.Window.Caption + "</title>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // KJS 04/30/15 - I can't think why we have the myheader.inc, why we would have that for pages absolute pages.
   // We didn't have Window.WEB_PageHeadInclude in the painter, but now it is there.
   //IF szNoPositioning = "Y" OR szNoPositioning = "S"
      IF vDialog.Window.WEB_PageHeadInclude != ""
         szWriteBuffer = "<%@ include file=^" + vDialog.Window.WEB_PageHeadInclude + "^ %>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      ELSE
         IF vDialog.Dialog.WEB_PageHeadInclude != ""
            szWriteBuffer = "<%@ include file=^" + vDialog.Dialog.WEB_PageHeadInclude  + "^ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         ELSE
            szWriteBuffer = "<%@ include file=^./include/head.inc^ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
         END
      END
   //ELSE
   //   szWriteBuffer = "<%@ include file=^./include/myheader.inc^ %>"
   //   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //END

   // KJS 2/19/08 - Trying to help Jeff with timeout.  Place a
   // timeout value in timeout.inc for when to timeout.
   szWriteBuffer = "<!-- Timeout.inc has a value for nTimeout which is used to determine when to -->"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<!-- log a user out.  Timeout.inc is not used if the dialog or window has a timeout value set. -->"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@ include file=^./include/timeout.inc^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // KJS 08/06/08 - Instead of using the class="noprint" to not display
   // a div or control when print/previewing a page, I think we will use the
   // class print.css.  Cleaner and easier to change items that we want hidden/not hidden.
   szWriteBuffer = "<link rel=^stylesheet^ type=^text/css^ href=^./css/print.css^ media=^print^ />"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   /*****************************  JavaScript Functions Section *****************************************************/

   // common.js is used by both the Grid and Calendar controls. Since it's small, we'll always send it.
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/common.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF lSort != 0
      // css.js and sts.js are used only by the Grid control when sorting is requested. Thus, we'll only send
      // it down to the browser when sorting is requested.
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/css.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/sts.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // KJS 09/04/14 - Can't find validations.js anywhere so I am assuming we don't need it.
   //szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/validations.js^></script>"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/scw.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // KJS 04/27/11 - I am not sure that we want to always include this js file but if not, then I need
   // to loop through all controls (and subcontrols) looking for a div that has a web control property of
   // "Show/Hide Toggle". For now I am always including it.
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/animatedcollapse.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // KJS 06/09/11 - I am not sure that we want to always include this js file because at the moment, I am putting
   // this in because we want to do a md5 hash conversion.
   // KJS 04/30/15 - Now I am taking this out because I don't think we use this and if we do, we should add it to head.inc not here.
   //szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/md5.js^></script>"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // DKS 03/02/15 - To disable UI while processing
   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/jquery.blockUI.js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   IF szWysiwygEditor != ""

      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<!-- TinyMCE -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      szJS_FileName = ""
      SysReadZeidonIni( -1, szSystemIniApplName, "TinyMCEJavaScript", szJS_FileName )
      IF szJS_FileName = ""
         szJS_FileName = "./js/tinymce/jscripts/tiny_mce/tiny_mce.js"
      END

      // Use TinyMCE rather than widgEditor.
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^" + szJS_FileName
      szWriteBuffer = szWriteBuffer + "^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      nRC = zSearchSubString( szWysiwygEditor, ".js", "f", 0 )
      IF nRC < 0
         szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/TinyMCE.js^></script>"
      ELSE
         szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^"
         szWriteBuffer = szWriteBuffer + szWysiwygEditor
         szWriteBuffer = szWriteBuffer + "^></script>"
      END
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // // Use widgEditor rather than TinyMCE.
   // szWriteBuffer = "<style type=^text/css^ media=^all^>"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // szWriteBuffer = "   @import ^../widgEditor/css/info.css^;"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // szWriteBuffer = "   @import ^../widgEditor/css/main.css^;"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // szWriteBuffer = "   @import ^../widgEditor/css/widgEditor.css^;"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // szWriteBuffer = "</style>"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   //
   // szWriteBuffer = "var theWidgEditor" + szWysiwygEditor + " = null"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   //
   // szWriteBuffer = "<script type=^text/javascript^ src=^../widgEditor/scripts/widgEditor.js^></script>"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      szWriteBuffer = "<!-- /TinyMCE -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   // KJS 01/16/07 - If we have tab controls on the screen, Jeff wants to have the declarations up
   // here in this section.
   CreateViewFromView( vDialogTemp, vDialogRoot )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szEntityName = "Tab"

   // Look for a control with ControlDef of "Tab"
   // vDialog.ControlDef.Tag
   nRC = SetEntityCursor( vDialogTemp, "ControlDef", "Tag", lControl,
                          szEntityName, "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./js/tabpane.js^></script>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // KJS 04/30/15 - If we have any javascript code on a window prebuild action, we should add it here.
   IF szJavaScript != ""
      // DKS 2015.06.15 - If InsertPrebuildJavascriptInline = "Y" (has to do with KeyRole), then we should not
      // add the JavaScript here for prebuild action... will be added in _AfterPageLoaded function.
      IF szInsertPrebuildJavascriptInline != "Y"
        szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ >"
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
        szWriteBuffer = "      // Javascript code entered by user for Window action prebuild."
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
        szWriteBuffer = szJavaScript
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
        szWriteBuffer = "      // END of Javascript code entered by user."
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
        szWriteBuffer = "</script>"
        WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      END
   END

   /********************** JAVASCRIPT function Generation. ***********************************/
   // KJS 08/02/13 - Going to try putting the javascript code in a separate .js file because
   // Jeffrey is running over the 65kb jsp limit.

   // commenting out if we are creating a separate file for javascript funtions...
   //szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^>"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<script language=^JavaScript^ type=^text/javascript^ src=^./genjs/" + szFormName + ".js^></script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   lFileJAVA = SysOpenFile( vDialog, szJAVA_FileName, COREFILE_WRITE )
   IF lFileJAVA < 0
      MessageSend( vSubtask, "", "JSP javascript Generation",
                   "Invalid JS directory structure: ",
                   zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      RETURN -1
   END

   szWriteBuffer = "var isWindowClosing = true;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "var timerID = null;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "onerror = handleErr;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "window.history.forward( 1 );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

   // Look for additional Tab controls.
   LOOP WHILE nRC >= zCURSOR_SET

      szWriteBuffer = "var " + vDialogTemp.Control.Tag + ";"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

      lControl = zQUAL_STRING + zPOS_NEXT + zRECURS

      // Look for a control with controldef of "Tab"
      // vDialog.ControlDef.Tag
      nRC = SetEntityCursor( vDialogTemp, "ControlDef", "Tag", lControl,
                             szEntityName, "", "", 0, "Window", "" )
   END

   DropView( vDialogTemp )

   // Place a blank line here for reading purposes.
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

   szWriteBuffer = "function handleErr( msg, url, l )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "// Uncomment the following (invalid) line and put it in some function below to help find the error."
   //WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "// document.replace(^http://www.enc.edu/^);"
   //WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   var txt = ^There was an error on this page.\n\n^;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^Error: ^ + msg + ^\n^;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^URL: ^ + url + ^\n^;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^Line: ^ + l + ^\n\n^;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   txt += ^Click OK to continue.\n\n^;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// alert( txt );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   return true;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "// This function returns Internet Explorer's major version number,"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// or 0 for others. It works by finding the ^MSIE ^ string and"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// extracting the version number following the space, up to the decimal"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "// point, ignoring the minor version number."
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "function msieversion( )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var ua = window.navigator.userAgent;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var msie = ua.indexOf( ^MSIE ^ );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( msie > 0 )      // if Internet Explorer, return version number"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return parseInt( ua.substring( msie + 5, ua.indexOf( ^.^, msie ) ) );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else                 // if another browser, return 0"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return 0;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   //Function _OnAlmostTimeout
   szWriteBuffer = "function _OnAlmostTimeout()"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var tStart   = new Date();"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      alert( ^Your session will timeout in one minute.  Please click 'OK' within that time to continue and save your work if necessary.^ )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      var tEnd   = new Date();"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var tDiff = tEnd.getTime() - tStart.getTime();"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      // If the time is less than one minute, resubmit the page.  Otherwise, go to the timeout window."
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if (tDiff < 60000)"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         document." + szFormName + ".zAction.value = ^_OnResubmitPage^;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         document." + szFormName + ".submit( );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         _OnTimeout( );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   //function _OnTimeout
   szWriteBuffer = "function _OnTimeout( )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      _DisableFormElements( true );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
   szWriteBuffer = "      document." + szFormName + ".zAction.value = ^_OnTimeout^;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      document." + szFormName + ".submit( );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   //function _BeforePageUnload
   szWriteBuffer = "function _BeforePageUnload( )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // If the user clicked on the window close box, then"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // isWindowClosing will be true.  Otherwise if the user"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // clicked on something else in the page, isWindowClosing will be false."
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      // If the user clicked the window close box, unregister zeidon."
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   // If the user hits the close box in the upper right of the window or leave this page to another web site,
   // then we want to try a log them out of zeidon because otherwise, we feel we have memory still cached.
   // We want to try and eliminate this and determine if the user has left this application and thus do
   // necessary clean up.
   szWriteBuffer = "      if (isWindowClosing)"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szNoAutoLogout = vDialogRoot.Dialog.WEB_NoAutoLogOut
   // If this is a log on page (like wStartupLogin) then we don't want to have the 'Unregister Zeidon' happen
   // if the user leaves the page or refreshes.  It causes problems.
   // KJS 01/19/11 - If the window is a popup window, then we are not going to try doing the unload if the user
   // hits the close box because most likely on popup windows, user's would close the window this way.
   // KJS 02/09/11 - I have added a new checkbox to the dialog properties window so that we can turn off
   // automatically logging a user out for the pages of a dialog (currently we don't want this for the budget
   // pages in Zencas).  Otherwise, I keep changing this code back and forth to comment out the submit lines.
   IF ( vDialog.Window.WEB_RegisterZeidonWindow != "Y" AND szWindowIsPopup = "" AND szNoAutoLogout != "Y" )
      szWriteBuffer = "         document." + szFormName + ".zAction.value = ^_OnUnload^;"
      //szWriteBuffer = "         //document." + szFormName + ".zAction.value = ^_OnUnload^;"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         document." + szFormName + ".submit( );"
      //szWriteBuffer = "         //document." + szFormName + ".submit( );"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   ELSE
      szWriteBuffer = "         // These lines are commented out because either we are registering zeidon on this"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // window or this is a popup window so we don't want to do an unload if the user"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // closes the window using the red close button."
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         //document." + szFormName + ".zAction.value = ^_OnUnload^;"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         //document." + szFormName + ".submit( );"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      // No action needs to be taken here. This is just a place holder for traces."
   //WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "      // alert( document.wFacultDAdviseeList.zAction.value );"
   //WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   //function _IsDocDisabled
   szWriteBuffer = "function _IsDocDisabled( )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var bRC = false;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   var $el = $(^#zDisable^);"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( $el.length > 0 ) {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bRC = $el[0].disabled;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   return bRC ? true : false;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   //function _DisableFormElements
   szWriteBuffer = "function _DisableFormElements( bDisabled )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var bRC = false;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( bDisabled && timerID != null )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      clearTimeout( timerID );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = null;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   // Controls on the window may have been set as disabled through javascript but
   // when we try to get the values for these controls in jsp (response.getParameter)
   // they will always be null.  Set any disabled fields to enabled for this reason.
   szWriteBuffer = "   // Controls on the window may have been set as disabled through javascript but"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // when we try to get the values for these controls in jsp (response.getParameter)"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // they will always be null.  Set any disabled fields to enabled for this reason."
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   for ( j = 0; j < document.forms.length; j++ )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      theForm = document.forms[ j ];"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      for ( k = 0; k < theForm.length; k++ )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if (theForm.elements[ k ].disabled == true)"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "             theForm.elements[ k ].disabled = false;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   var $el = $(^#zDisable^);"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( $el.length > 0 ) {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      $el[0].disabled = true;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bRC = true;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   $.blockUI({ message: '<h1><img src=^./images/busy.gif^ /></h1>', overlayCSS: { backgroundColor: '#eee' } });"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   return bRC;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   // Default button function.
   IF vDialog.Window.DfltButton != ""
      CreateViewFromView( vDialogTemp, vDialog )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      nRC = SetEntityCursor( vDialogTemp, "Control", "Tag", lControl,
                             vDialog.Window.DfltButton, "", "", 0, "Window", "" )
      IF nRC >= zCURSOR_SET
         IF vDialogTemp.EventAct EXISTS
            szWriteBuffer = "function _OnEnter( e )"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "{"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   var keycode;"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( window.event )"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      keycode = window.event.keyCode;"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( e )"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         keycode = e.which;"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         return true;"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

            szWriteBuffer = "   if ( keycode == 13 )"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialogTemp.EventAct.Tag + "( );"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return false;"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return true;"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
         END
      END
      DropView( vDialogTemp )
   END

   //function _AfterPageLoaded
   szWriteBuffer = "function _AfterPageLoaded( )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

   szWriteBuffer = "// _DisableFormElements( false );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   var szFocusCtrl = document." + szFormName + ".zFocusCtrl.value;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( szFocusCtrl != ^^ && szFocusCtrl != ^null^ )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      eval( 'document." + szFormName + ".' + szFocusCtrl + '.focus( )' );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

   // Need to know "first" tab index by the time we get here!
   IF szFocusCtrlTag != ""
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      document." + szFormName + "." + szFocusCtrlTag + ".focus( );"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = ""
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 ) // add a blank line
   szWriteBuffer = "   // This is where we put out a message from the previous iteration on this window"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var szMsg = document." + szFormName + ".zError.value;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( szMsg != ^^ )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      alert( szMsg ); // ^Houston ... We have a problem^"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   szMsg = document." + szFormName + ".zOpenFile.value;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( szMsg != ^^ )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var NewWin = window.open( szMsg );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( NewWin )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         NewWin.focus( );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
// szWriteBuffer = "         alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from 'my.enc.edu' for this action.^ );"
   szWriteBuffer = "         alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from this site for this action to work.^ );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   IF szKeyRole = "Y"
      szWriteBuffer = "   var LoginName = document." + szFormName + ".zLoginName.value;"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   var keyRole = document." + szFormName + ".zKeyRole.value;"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   END

   CreateViewFromView( vDialogTemp, vDialog )

   // KJS 08/27/13 - I am commenting this code out because we call the Postbuild javascript code below (comment KJS 09/21/2009), so
   // this code means we call the javascript code twice. Maybe we should have this instead but for now I am taking it out (the below code
   // only looks for Postbuild action (not prebuild) because this is after the page has been rendered.
   /*
   // Check of prebuild and postbuild action jsp code.
   FOR EACH vDialogTemp.Action
      FOR EACH vDialogTemp.ActWndEvent
         IF vDialogTemp.ActWndEvent.Type = 1 OR vDialogTemp.ActWndEvent.Type = 2
            // DKS 2008.09.10 - We want to insert any javascript code that the
            // user has entered for this pre/post build action.
            szJavaScript = vDialogTemp.Action.WebJavaScript
            IF  szJavaScript != ""
               szWriteBuffer = "   // Javascript code entered by user."
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   // END of Javascript code entered by user."
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
            END
         END
      END
   END
   */

   // If this Window/Page has a "Start Web Popup" Action with mapping, then we need the following code
   // to actually start up the Popup, since the script code for the Action had to do the submit to
   // do input mapping.
   SET CURSOR FIRST vDialogTemp.Action
              //WHERE ( vDialogTemp.Action.Type = zWAB_StartModalWebPopup OR vDialogTemp.Action.Type = zWAB_StartModelessWebPopup )
              WHERE ( vDialogTemp.Action.Type = 78 OR vDialogTemp.Action.Type = 79 )
                // KJS 07/11/12 AND vDialogTemp.Action.NoMap = ""
   IF RESULT >= zCURSOR_SET
      szWidth = ""
      szHeight = ""
      szWriteBuffer = "   szMsg = document." + szFormName + ".zOpenPopupWindow.value;"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( szMsg != ^^ )"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

      //KELLY22
      /*  We don't need this now, we look for these errors and window sizes elsewhere
      // The Popup size (both X and Y values) will be WebSize / 34,000 to convert Window Size to Web Page Size.
      CreateViewFromView( vDialogTemp2, vDialogRoot )
      IF vDialogRoot.Dialog.Tag != vDialogTemp.Action.DialogName
         szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to another Dialog, which is invalid."
         MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      ELSE
         SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = vDialogTemp.Action.WindowName
         IF RESULT < zCURSOR_SET
            szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist."
            MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         ELSE
            zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
            zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
         END
      END
      */

      // KJS 01/25/08 - The popup window was getting the size of the calling window (above code).  Instead, we want the popup window to be
      // the size of the painted popup window.  Added some hidden variables to hold this value (gets set in the OnClick function).
      szWriteBuffer = "   var strWidth = document." + szFormName + ".zPopupWindowSZX.value;"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   var strHeight = document." + szFormName + ".zPopupWindowSZY.value;"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      // KJS 11/19/09 - Aadit doesn't want to have a height or width in wRunRpts because it doesn't allow the print to work correctly (cuts
      // the page off if it's long).  The only problem is that even though you can control the page width through css, the popup window
      // itself is the size of the browser (not what we always want).  I am keeping this for now because the only other place I use this
      // is in wGradeBk but we might want to have a checkbox to say whether the window should be the size of the dialog window or no
      // height width given.
      // Also adding scrollbars=yes.
      // KJS 07/11/12 - I am at least temporarily adding back the height and width because Jeff wants to use this and I assume he would
      // like the popup to be smaller.  I could be wrong...
      // FOR AADIT szWriteBuffer = "   var strWindowOptions = ^menubar=0,toolbar=0,resizable=1,modal=1,scrollbars=yes^"
      szWriteBuffer = "   var strWindowOptions = ^menubar=0,toolbar=0,resizable=1,width=^ + strWidth + ^,height=^ + strHeight + ^,modal=1^"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "      var NewWin = window.open( szMsg, ^^,^menubar=0,toolbar=0,resizable=1,width=" + szWidth + ",height=" + szHeight + ",modal=1^ );"
      szWriteBuffer = "      var NewWin = window.open( szMsg, ^^, strWindowOptions );"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( NewWin )"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         NewWin.focus( );"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   // szWriteBuffer = "         alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from 'my.enc.edu' for this action.^ );"
      szWriteBuffer = "         alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from this site for this action to work.^ );"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
   END
   DropView( vDialogTemp )

   szWriteBuffer = "   document." + szFormName + ".zError.value = ^^;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   document." + szFormName + ".zOpenFile.value = ^^;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   // If this Window/Page has a "Start Web Popup" Action, initialize the zOpenPopupWindow value.
   CreateViewFromView( vDialogTemp, vDialog )
   SET CURSOR FIRST vDialogTemp.Action
              //WHERE ( vDialogTemp.Action.Type = zWAB_StartModalWebPopup OR vDialogTemp.Action.Type = zWAB_StartModelessWebPopup )
              WHERE ( vDialogTemp.Action.Type = 78 OR vDialogTemp.Action.Type = 79 )
                // KJS 07/11/12 AND vDialogTemp.Action.NoMap = ""
   IF RESULT >= zCURSOR_SET
      szWriteBuffer = "   document." + szFormName + ".zOpenPopupWindow.value = ^^;"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
   END
   DropView( vDialogTemp )

   szWriteBuffer = "   if ( timerID != null )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      clearTimeout( timerID );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = null;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   // Generate a document entry for each ComboBox on the Page.
   IF vDialogRoot.ComboBoxEntry EXISTS
      FOR EACH vDialogRoot.ComboBoxEntry
         szWriteBuffer = "   document." + szFormName + ".h" + vDialogRoot.ComboBoxEntry.Name + ".value = " +
                         "document." + szFormName + "." + vDialogRoot.ComboBoxEntry.Name + ".value"
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      END
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   END

   //KJS 12/17/07 - It was decided to change the time-out feature to 60 minutes instead of 15 because many
   //faculty complained about it being too short.  We would really like to control this
   //using userid so that different users can have different timeout times.
   //KJS 2/14/08 - Now we have added LogoutTime to the zeidon.ini file as a quick fix.
   //If the timeout is zero or null then do not have a timeout option for the generated
   //jsp pages.  If there is a value, then create the timeout according to the value.
   /*
   SysReadZeidonIni( -1, szSystemIniApplName, "LogoutTime", szTimeout )
   IF  szTimeout = "" OR szTimeout = "0"
      szWriteBuffer = "   // No timeout value specified."
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   timerID = null;"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   ELSE
      szWriteBuffer = "   var delay = 60000 * " + szTimeout + ";  // Timeout in " + szTimeout + " minutes"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   timerID = setTimeout( ^_OnAlmostTimeout( )^, delay );"
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   END
   */

   // KJS 2/19/08 - Now trying with a variable in the file timeout.inc.
// szWriteBuffer = "   var varDelay = 60000 * 15;  // 15 minutes"
   szWriteBuffer = "   var varTimeout = document." + szFormName + ".zTimeout.value;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( varTimeout > 0 )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var varDelay = 60000 * varTimeout;  // Timeout value in timeout.inc"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = setTimeout( ^_OnAlmostTimeout( )^, varDelay );"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      timerID = null; // No timeout specified"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   // KJS 09/21/2009
   // If there are postbuild actions for this window, and those actions have javascript code on them, we
   // need to call the java functions that have the javascript code in them (previously only an operation
   // tied to this action was called up in the jsp code).  We are going to put a call to these functions
   // in the _AfterPageLoaded function.
   // Loop through the actions looking for one that has javascript code and place the calls here.
   CreateViewFromView( vDialogTemp, vDialog )
   FOR EACH vDialogTemp.Action

      FOR EACH vDialogTemp.ActWndEvent

         // DKS 2015.05.15 - for prebuild, need javascript code inserted directly into _AfterPageLoaded function,
         // if szInsertPrebuildJavascriptInline = "Y", otherwise the prebuild javascript code is called in the
         // <head> section. InsertPrebuildJavascriptInline has to do with KeyRole code.
         // do not mess with szJavaScript here ... szJavaScript = vDialogTemp.Action.WebJavaScript
         IF vDialogTemp.ActWndEvent.Type = 1 AND szInsertPrebuildJavascriptInline = "Y"
            // Action is Prebuild.
            IF vDialogTemp.Action.WebJavaScript != ""
               szWriteBuffer = "   // Prebuild action has javascript code entered by user."
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               szWriteBuffer = vDialogTemp.Action.WebJavaScript
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   // END of Javascript code entered by user."
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
            END
         END
         IF vDialogTemp.ActWndEvent.Type = 2  // Action is postbuild.
            IF vDialogTemp.Action.WebJavaScript != ""
               szWriteBuffer = "   // Postbuild action that has javascript code."
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               szActionTag = vDialogTemp.Action.Tag
               szWriteBuffer = "   " + szActionTag + "( );"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            END
         END
      END
   END
   DropView( vDialogTemp )

   // DKS 2015.06.18 - See if there is any "global" javascript ... insert it here if there is.
   // do not mess with szJavaScript here
   SysReadZeidonIni( -1, szSystemIniApplName, "GlobalAfterPageLoadJavascript", szWriteBuffer )
   IF szWriteBuffer != ""
      WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   END

   // Because there is some postbuild code that could be called where isWindowClosing could be set to false, re-initialize it
   // again after the page has been loaded.
   szWriteBuffer = "   isWindowClosing = true;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   // ******************************   End of _AfterPageLoaded ***********************

   //KJS 10/19/07 - This is a generic function for any grids that have a
   //checkbox on it.  If there is no "text" for this checkbox (so the header would be blank)
   //we are going to create a checkbox in the grid header that calls this function.
   //This will select all or unselect all the checkboxes in the grid.
   szWriteBuffer = "function CheckAllInGrid(id, CheckBoxName)"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "{"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var wcontrols = id.form.elements;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var check = id.checked;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   var wcontrol, i = 0;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
   szWriteBuffer = "   while ( (wcontrol = wcontrols[ i++ ]) != null )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      //Check to see if the checkbox belongs to this table then check it."
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( wcontrol.name.indexOf( CheckBoxName ) != -1 && wcontrol.type == 'checkbox' )"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         wcontrol.checked = check;"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
   szWriteBuffer = "}"
   WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   // ****** Generate JavaScript Function routine for each Action.
   FOR EACH vDialog.Action

      szActionTag = vDialog.Action.Tag
      nRC = zstrcmpi( szActionTag, "alt-f4" )
      IF nRC = 0
         szActionTag = "AltF4"
      END

      szListButtonFlag = ""
      IF vDialog.ActEvent EXISTS AND vDialog.ActCtrl EXISTS

         // Determine if Action for the ActCtrl is for a PushBtn within a Grid or HyperText (not hyperlink)
         // or an image (Bitmap or BitmapBtn) within a Grid..
         // KJS 11/10/12 - In GenJSPJ_Action we have already determined ifthis action is on a control within
         // a grid or a repeating group.
         IF vDialog.Action.ParentIsGridOrGrp = "Y"
            szListButtonFlag = "Y"
         END

         /* KJS 11/10/12
         szCtrlTag = vDialog.ActCtrl.Tag
         CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
         lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
         //KJS 10/24/07 - Right now if there is an action that is called more than once on a window and
         //one of the places the action is called is not from a PushBtn or GridEditCtl then
         //this doesn't always work.  I just had a case where there was an action on RowSelect
         //on the grid and the action was called from a hottext.  zListButtonFlag did not get set.
         nRC = SetEntityCursor( vDialogTemp, "Control", "Tag", lControl, szCtrlTag, "", "", 0, "Window", "" )
         IF nRC >= zCURSOR_SET
            szTempStr = vDialogTemp.ControlDef.Tag
            IF szTempStr = "PushBtn" OR szTempStr = "GridEditCtl" OR szTempStr = "Bitmap" OR szTempStr = "BitmapBtn" OR
               szTempStr = "GridCheckCtl" OR szTempStr = "CheckBox"
               // The Control for the Action was a Pushbutton or HyperText.
               // Identify if this Control is inside a Grid.
               nRC = 0
               LOOP WHILE nRC = 0 AND szListButtonFlag = ""
                  nRC = ResetViewFromSubobject( vDialogTemp )
                  IF nRC = 0 AND vDialogTemp.ControlDef EXISTS
                     IF vDialogTemp.ControlDef.Tag = "Grid"  // vDialogTemp.ControlDef.Key = 2010
                        // The parent of the this control is a Grid, so indicate for later.
                        szListButtonFlag = "Y"
                     END
                  END
               END
            END
         END
         DropView( vDialogTemp )
         */

      END

      // Event is start email.
      lActionType = vDialog.Action.Type
      IF lActionType = zWAB_StartEmailClient OR
         lActionType = zWAB_StartEmailClientBCC OR
         lActionType = zWAB_StartEmailClientCC

         szWriteBuffer = "function " + szActionTag + "( )"
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

         szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   isWindowClosing = false;"
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

         IF vDialog.ActWndEvent DOES NOT EXIST OR  // don't include pre/post build java code here
            (vDialog.ActWndEvent.Type != 1 AND vDialog.ActWndEvent.Type != 2)

            //KJS 11/16/2007 - We want to insert any javascript code that the
            //user has entered for this action.  This will be put before the action
            //generated code for submitting.  If the user wants to skip the
            //generated code, the inserted code should end with a return.
            szJavaScript = vDialog.Action.WebJavaScript
            IF szJavaScript != "" AND vDialog.Action.WebJavaScriptLocation = ""
               szWriteBuffer = "      // Javascript code entered by user."
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      // END of Javascript code entered by user."
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
            END
         END

         // Go to generate special code for setting up email entries and starting email client.
         GenJSP_EmailEntries( vDialog, vDialogRoot, lFileJAVA, szWriteBuffer, szFormName )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
      ELSE
         IF szListButtonFlag = "Y"
            //szWriteBuffer = "function " + szActionTag + "( strEntityKey )"
            szWriteBuffer = "function " + szActionTag + "( strTagEntityKey )"      // dks 2011.02.24 Button on grid problem?
         ELSE
            szWriteBuffer = "function " + szActionTag + "( )"
         END
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

         szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   isWindowClosing = false;"
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

         // This Action is Startup Web Popup WITHOUT mapping, so generate unique statements for that case.
         // KJS 07/11/12 - I am taking out this code, because at the moment, I do not see why we want to open the popup window
         // differently when mapping is on or off.  If we do this this way, then if there is an operation that needs to be called
         // on the action, it isn't called (wed need the .submit).  If there is no mapping then the DoInputMapping is never called,
         // I would think that is sufficient.
         /**************
         IF (lActionType = zWAB_StartModalWebPopup OR lActionType = zWAB_StartModelessWebPopup) AND vDialog.Action.NoMap = "Y"
            IF vDialog.ActWndEvent DOES NOT EXIST OR  // don't include pre/post build java code here
               (vDialog.ActWndEvent.Type != 1 AND vDialog.ActWndEvent.Type != 2)
               //KJS 11/16/2007 - We want to insert any javascript code that the
               //user has entered for this action.  This will be put before the action
               //generated code for submitting.
               szJavaScript = vDialog.Action.WebJavaScript
               IF szJavaScript != ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
               END
            END
            //szWriteBuffer = "   isWindowClosing = false;"
            //WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
            szDlgTag = vDialog.Action.DialogName
            szWndTag = vDialog.Action.WindowName
            // We are opening a popup window within this dialog
            IF szDlgTag = vDialogRoot.Dialog.Tag
               // KJS 01/25/08 - The popup window was getting the size of the calling window (aboe code).  Instead, we want the popup window to be
               // the size of the painted popup window.  Added some hidden variables to hold this value.
               CreateViewFromView( vDialogTemp2, vDialogRoot )
               SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = szWndTag
               IF RESULT < zCURSOR_SET
                  szMsg = "Error in Window, " + szWindowTag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist: " + szWndTag
                  MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
               ELSE
                  // KJS 01/30/08 - Want the popup window to be opened with the correct size of the painted popup window
                  // not just a generic number (had been 600,300).
                  zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                  zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
               END
               DropView( vDialogTemp2 )
            ELSE
               // We are opening a popup window in a different dialog.  We want the size of the
               // popup window.  Need to open the other dialog.
               ActivateMetaOI_ByName( vSubtask, vDialogTemp2, 0, zREFER_DIALOG_META, zSINGLE, szDlgTag, 0 )
               SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = szWndTag
               IF RESULT >= zCURSOR_SET
                  zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                  zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
               ELSE
                  szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a dialog.window that doesn't exist: " +
                          szDlgTag + "." + szWndTag
                  MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
               END
               DropObjectInstance( vDialogTemp2 )
            END
            szWriteBuffer = "   var NewWin = window.open( ^" + szDlgTag + szWndTag + ".jsp^, ^^,^menubar=0,toolbar=0,resizable=1,width=" + szWidth +
                            ",height=" + szHeight + ",modal=1^ );"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( NewWin )"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      NewWin.focus( );"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
         // szWriteBuffer = "      alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from 'my.enc.edu' for this action.^ );"
            szWriteBuffer = "      alert( ^Pop-up windows are being blocked.  You need to set your browser to allow pop-ups from this site for this action to work.^ );"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
         ELSE
         **************/   // what's this???
         // Print Window
         IF lActionType = 60
            szWriteBuffer = "   window.print();"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
         ELSE
         IF lActionType = zWAB_StayOnWindow AND vDialog.Action.WebJavaScript != ""

            // KJS 08/14/2009 - If the window type is zWAB_StayOnWindow (no refresh) and we have Javascript code on this action
            // then we don't want to do the .submit (which we really don't want to do if the action is zWAB_StayOnWindow but I'm
            // afraid there might be places where we kept the action zWAB_StayOnWindow because we knew it would always put
            // the submit in).
            szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szJavaScript = vDialog.Action.WebJavaScript

            // DKS 2015.06.20 - remove prebuild javascript if it is being inserted in _AfterPageLoaded
            IF szInsertPrebuildJavascriptInline = "Y"
               IF vDialog.ActWndEvent EXISTS AND vDialog.ActWndEvent.Type = 1
                  // prebuild javascript being inserted inline in _AfterPageLoaded
               ELSE
                  // otherwise, we need the javascript code
                  IF  szJavaScript != ""
                     szWriteBuffer = "      // Javascript code entered by user."
                     WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
                     szWriteBuffer = szJavaScript
                     WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
                     szWriteBuffer = "      // END of Javascript code entered by user."
                     WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
                  END
               END
               // DKS 2015.07.07 - and we always want the submit
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionTag + "^;"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            ELSE
               IF  szJavaScript != ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
               END
            END

            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

         ELSE

            // Normal Action.

            szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

            IF szListButtonFlag = "Y"  // dks 2011.02.24   added for button on grid problem?
               szWriteBuffer = "      var nIdx = strTagEntityKey.lastIndexOf( '::' );"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      var strEntityKey = strTagEntityKey.substring( nIdx + 2 );"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
               // We definitely need this though
               // The Action was on a Button on a Grid, so identify the entry selected.
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            END

            IF lActionType != zWAB_StayOnWindowWebRefresh AND
               (vDialog.ActWndEvent DOES NOT EXIST OR  // don't include pre/post build java code here
                (vDialog.ActWndEvent.Type != 1 AND vDialog.ActWndEvent.Type != 2))

               //KJS 11/16/2007 - We want to insert any javascript code that the
               //user has entered for this action.  This will be put before the action
               //generated code for submitting.
               szJavaScript = vDialog.Action.WebJavaScript
               IF szJavaScript != "" AND vDialog.Action.WebJavaScriptLocation = ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
               END
            END

            // If this function is for Download File or open Jasper pdf report, we want to eliminate the _DisableFormElements statement.
            // For both of these we use response.getOutputStream and when we do this, our original jsp page does not get the focus
            // back and so _DisableFormElements( false ) in _AfterPageLoaded does not get called. The page would be hung.
            IF lActionType != zWAB_ProcessDownloadFile AND lActionType != zWAB_StartJasperPDF_Page
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
            END

            // We need to determine if this Action is on a Group for File Transfer to Server, because we need to
            // use the Form Name from the Group in that case. We will locate the corresponding Action entry under
            // the Control subobject and move up one level to find the Group.
            szTransferFileFlag = ""
            CreateViewFromView( vDialogTemp, vDialog )
            lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
            szActionTag = vDialog.Action.Tag
            nRC = SetEntityCursor( vDialogTemp, "EventAct", "Tag", lControl,
                                   szActionTag, "", "", 0, "Window", "" )
            IF nRC >= zCURSOR_SET
               ResetViewFromSubobject( vDialogTemp )
               SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Transfer to Server"
               IF RESULT >= zCURSOR_SET
                  szTransferFileFlag = "Y"
               END
            END
            IF szTransferFileFlag = "Y"
               szCtrlTag = vDialogTemp.Control.Tag
               szWriteBuffer = "      document." + szCtrlTag + ".zAction.value = ^" + szActionTag + "^;"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szCtrlTag + ".submit( );"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
            ELSE
               // KJS 11/10/12 - Do we need this here? Can I have it above so that it is for every action that might be
               // on a grid or repeating group?
               /*
               IF szListButtonFlag = "Y"
                  // The Action was on a Button on a Grid, so identify the entry selected.
                  szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               END
               */

               //KELLY
               IF ( lActionType = zWAB_StartModalWebPopup OR lActionType = zWAB_StartModelessWebPopup ) // KJS 07/11/12 AND vDialog.Action.NoMap = ""
                  // This Action is Startup Web Popup WITH mapping, so set zOpenPopupWindow to the next page jsp.
                  szDlgTag = vDialog.Action.DialogName
                  szWndTag = vDialog.Action.WindowName

                  szWriteBuffer = "      document." + szFormName + ".zOpenPopupWindow.value = ^" + szDlgTag + szWndTag + ".jsp^;"
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

                  // We are opening a popup window within this dialog
                  IF szDlgTag = vDialogRoot.Dialog.Tag
                     // KJS 01/25/08 - The popup window was getting the size of the calling window (above code).  Instead, we want the
                     // popup window to be the size of the painted popup window.  Added some hidden variables to hold this value.
                     CreateViewFromView( vDialogTemp2, vDialogRoot )
                     SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = vDialog.Action.WindowName

                     IF RESULT >= zCURSOR_SET
                        zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                        zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
                     ELSE
                        szMsg = "Error in Window, " + szWindowTag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist: " + szWndTag
                        MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     END
                     DropView( vDialogTemp2 )
                  ELSE
                     // We are opening a popup window in a different dialog.  We want the size of the
                     // popup window.  Need to open the other dialog.
                     ActivateMetaOI_ByName( vSubtask, vDialogTemp2, 0, zREFER_DIALOG_META, zSINGLE, szDlgTag, 0 )
                     SET CURSOR FIRST vDialogTemp2.Window WHERE vDialogTemp2.Window.Tag = szWndTag
                     IF RESULT >= zCURSOR_SET
                        zIntegerToString( szWidth, 10, vDialogTemp2.Window.SZDLG_X / 34000 )
                        zIntegerToString( szHeight, 10, vDialogTemp2.Window.SZDLG_Y / 34000 )
                     ELSE

                        szMsg = "Error in Window, " + vDialogRoot.Window.Tag + ": A 'Set Subwindow' for a Popup exists to a window that doesn't exist." +
                                szDlgTag + "." + szWndTag
                        MessageSend( vSubtask, "", "JSP Generation", szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )

                     END
                     DropObjectInstance( vDialogTemp2 )

                  END

                  szWriteBuffer = "      document." + szFormName + ".zPopupWindowSZX.value = ^" + szWidth + "^;"
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      document." + szFormName + ".zPopupWindowSZY.value = ^" + szHeight + "^;"
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

               END

               IF lActionType = zWAB_ExitDialogTask
                  // For exiting the Dialog (ie., Session), the Action is OnUnload.
                  szWriteBuffer = "      document." + szFormName + ".zAction.value = ^_OnUnload^;"
               ELSE
                  szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionTag + "^;"
               END
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )

               //Type 84 is "Return from Web Popup/No Refresh
               //Type 85 is "Return from Web Popup/Refresh
               //We need to put in lines to close the popup window.
               IF ( lActionType = zWAB_ReturnFromWebPopupWithRefresh )
                  szWriteBuffer = "      window.opener.location.href=window.opener.location.href;"
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      window.opener.focus();"
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               END
               IF ( lActionType = zWAB_ReturnFromWebPopupNoRefresh OR lActionType = zWAB_ReturnFromWebPopupWithRefresh )
                  szWriteBuffer = "      window.close();"
                  WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
               END

            END
            DropView( vDialogTemp )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 0 )
         END
         END

         szWriteBuffer = "}"
         WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )
      END
   END

   // If the Window has a reusable side menu, add functions for each action from that menu.
   IF vDialog.ReusableSideWindow EXISTS
      IF vDialog.ReusableSideDialog.ZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJAVA, szWriteBuffer, szFormName, "sm" )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByName( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, vDialog.ReusableSideDialog.Tag, 0 )
      // plListHandle = ActivateMetaOI_KeepList( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, vDialog.ReusableSideDialog.Tag, 0, 0,
      //                                         0, plListHandle )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJAVA, szWriteBuffer, szFormName, "sm" )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window has a reusable main menu, add functions for each action from that menu.
   lReusableDialogZKey = 0
   IF vDialog.ReusableMainWindow EXISTS
      lReusableDialogZKey = vDialog.ReusableMainDialog.ZKey
      lReusableWindowZKey = vDialog.ReusableMainWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableMainWindow EXISTS
         lReusableDialogZKey = vDialog.DefaultReusableMainDialog.ZKey
         lReusableWindowZKey = vDialog.DefaultReusableMainWindow.ZKey
      END
   END
   IF lReusableDialogZKey != 0  // dks
      IF lReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJAVA, szWriteBuffer, szFormName, "m" )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, lReusableDialogZKey, 0 )
      // plListHandle = ActivateMetaOI_KeepList( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, 0, lReusableDialogZKey, 0,
      //                                         1, plListHandle )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJAVA, szWriteBuffer, szFormName, "m" )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // If the Window has a reusable menu for the actions only, add functions for each action from that menu.
   lReusableDialogZKey = 0
   IF vDialog.ReusableActionWindow EXISTS
      lReusableDialogZKey = vDialog.ReusableActionDialog.ZKey
      lReusableWindowZKey = vDialog.ReusableActionWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableActionWindow EXISTS
         lReusableDialogZKey = vDialog.DefaultReusableActionDialog.ZKey
         lReusableWindowZKey = vDialog.DefaultReusableActionWindow.ZKey
      END
   END
   IF lReusableDialogZKey != 0  // dks
      IF lReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            // Because the menu actions can be created on separate windows from the control
            // actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions and a
            // prefix of "ma" for menu actions where the menu will not be either the main menu
            // or a side menu.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJAVA, szWriteBuffer, szFormName, "ma" )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, lReusableDialogZKey, 0 )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            // Because the menu actions can be created on separate windows from the control
            // actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions and a
            // prefix of "ma" for menu actions where the menu will not be either the main menu
            // or a side menu.
            GenJSP_MenuFunctions( vDialogTemp, vDialogRoot, lFileJAVA, szWriteBuffer, szFormName, "ma" )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // Generate Function routines for each button inside a Table (grid, etc.)
   GenJSP_ChildFunctions( vDialog, lFileJAVA, szWriteBuffer, szFormName )

   // Comboboxes and listboxes need to do some mapping before the action
   // is called, so create separate javascript functions for actions that
   // are called from comboboxes or listboxes.
   GenJSPJ_OutputMapRecurs( vDialog, lFileJAVA, szWriteBuffer, szFormName, "" )

   // Do we want to put code here for grids that we are creating an output for
   // importing into excel.
   GenJSP_TableExport( vDialog, lFileJAVA, szWriteBuffer, szNoPositioning )

   // commenting out if we are creating a separate file for javascript funtions...
   //szWriteBuffer = "</script>"
   //WL_QC( vDialog, lFileJAVA, szWriteBuffer, "^", 1 )

   szWriteBuffer = "</head>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   SysCloseFile( vDialog, lFileJAVA, 0 )

   /*****************************  End of JavaScript Functions Section *****************************************************/


   /*****************************  Beginning of <body> Section  *****************************************************/

   // The following five line of codes were removed by DonC on 7/5/2007 after discussion with Doug that _AfterPageLoaded should
   // be executed even if lSort != 0.
   //KJS 11/1/2007 - If there is an onLoad event on the body and we have table sorting on this page, the table
   //sorting does not work in Firefox (seems to work in IE and Opera).  The solution is to not call _AfterPageLoaded on
   //the body onLoad event but to create a call to addEvent(window 'load','_AfterPageLoaded)
   //which does not interfere with the Standardista code (for table sorting) but still calls _AfterPageLoaded.
   //In the Standardista code (sts.js) there is an addEvent that will call _AfterPageLoaded.
   //Because of this, I think we do need the below code.  It uses the onLoad event if the web screen does not use table sorting
   //but does not call onLoad if we are using table sorting and the _AfterPageLoaded gets called from addEvent in sts.js.
   //I did see some documentation on the web that said the addEvent function doesn't work on IE5/Mac.  Might want to see if that's
   //true. http://simonwillison.net/2004/May/26/addLoadEvent/
   IF lSort = 0
      szWriteBuffer = "<body onLoad=^_AfterPageLoaded( )^ onSubmit=^_DisableFormElements( true )^ onBeforeUnload=^_BeforePageUnload( )^>"
   ELSE
      szWriteBuffer = "<!-- "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "// If we have table sorting on this page, the table sorting does not work in Firefox "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "// (seems to work in IE and Opera).  The solution is to not call _AfterPageLoaded in OnLoad event. "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "// In the Standardista code (sts.js) there is an addEvent that will call _AfterPageLoaded. "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "--> "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<body onSubmit=^_DisableFormElements( true )^ onBeforeUnload=^_BeforePageUnload( )^>"
  END
   //szWriteBuffer = "<body onLoad=^_AfterPageLoaded( )^ onSubmit=^_DisableFormElements( true )^ onBeforeUnload=^_BeforePageUnload( )^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   // The user might want to have an include after the <body> so that they can create some divs that will be
   // displayed on the background of each page (ENC shows a skyline scene).  If so, create it here.
   // Do not create if the window is a popup or if there is no banner.
   IF vDialog.Dialog.WEB_PageBackgroundInclude != "" AND szWindowIsPopup = "" AND vDialogRoot.Window.WEB_NoBannerFlag = ""
      szWriteBuffer = "<%@ include file=^" + vDialog.Dialog.WEB_PageBackgroundInclude + "^ %>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   ELSE
      szWriteBuffer = "<%@ include file=^./include/pagebackground.inc^ %>  <!-- just temporary until we get the painter dialog updates from Kelly ... 2011.10.08 dks -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // KJS 10/30/08 - If a window has been created to be displayed on the user's dashboard, then this window needs to be specified
   // as a dashboard window because we have to do some special processing for this window (getting the blob from the dashboard entities).
   IF vDialogRoot.WndStyle.Tag = "Dashboard Window"
     szWindowIsForDashboard = "Y"
   ELSE
     szWindowIsForDashboard = ""
   END

   szShowBanner = "Y"
   szShowTopMenu = "Y"
   szShowSideMenu = "Y"

   IF szWindowIsPopup = "Y" AND szWindowIsForDashboard = "Y"
      szShowBanner = ""
      szShowTopMenu = ""
      szShowSideMenu = ""
   ELSE
      IF vDialogRoot.Window.WEB_NoBannerFlag = "Y"
         szShowBanner = ""
      END
      IF vDialog.Window.WEB_NoTopMenuFlag = "Y"
         szShowTopMenu = ""
      END
   END

   // KJS 07/31/08 - I am adding a wrapper around the whole page, so that we can create styling in the
   // css.  Do not add this wrapper if the window is going to be a popup window or a window that will be part
   // of a dashboard.
   //<!--This text is a comment-->
   IF szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "<div id=^wrapper^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // Build the Banner before getting into Menu Options.
// IF vDialogRoot.Window.WEB_NoBannerFlag = ""
   IF szShowBanner = "Y"
      // strBannerName will always have a value, it might be a dynamic banner name set in vml code
      // or it might be an include file specified in the dialog or if neither of those, then
      // strBannerName has been set to "./include/banner.inc".
      //szWriteBuffer = "<jsp:include page='<%=strBannerName %>' />"
      
      // KJS 07/28/15 - Trying the banner include as all the other includes, not as the <jsp:include"
      // If a banner include file has been entered by the user, then use this, otherwise
      // hardcode "./include/banner.inc" as the banner name.
      IF vDialog.Dialog.WEB_TopBannerName != ""
         szWriteBuffer = "<%@ include file=^" + vDialog.Dialog.WEB_TopBannerName + "^ %>"
      ELSE
         szWriteBuffer = "<%@ include file=^./include/banner.inc^ %>"
      END
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   szSideMenuExists = "N"

   // Generate Main Navigation Bar
   lReusableDialogZKey = 0
   IF vDialog.ReusableMainWindow EXISTS
      lReusableDialogZKey = vDialog.ReusableMainDialog.ZKey
      lReusableWindowZKey = vDialog.ReusableMainWindow.ZKey
   ELSE
      IF vDialog.DefaultReusableMainWindow EXISTS
         lReusableDialogZKey = vDialog.DefaultReusableMainDialog.ZKey
         lReusableWindowZKey = vDialog.DefaultReusableMainWindow.ZKey
      END
   END

// IF ( lReusableDialogZKey != 0 AND vDialog.Window.WEB_NoTopMenuFlag != "Y" )  // dks
   IF ( lReusableDialogZKey != 0 AND szShowTopMenu = "Y" )  // dks
      IF lReusableDialogZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            BuildMainNavSection( vDialog, vDialogTemp, lFileJSP )
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByZKey( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, lReusableDialogZKey, 0 )
      // plListHandle = ActivateMetaOI_KeepList( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, 0, lReusableDialogZKey, 0,
      //                                         1, plListHandle )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = lReusableWindowZKey
         IF RESULT >= zCURSOR_SET
            BuildMainNavSection( vDialog, vDialogTemp, lFileJSP )
         END
         DropObjectInstance( vDialogTemp )
      END
   END

   // KJS 07/31/08 - Before we build the main content items (side navigation if it exists and the page contents) we
   // are going to create another div.  Not sure this is necessary but I'm thinking it might be helpful (then the
   // footer can be after this).
   IF szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "<div id=^maincontent^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   // Left navigation bar from Menu.
   // If the Window has a Reusable menu, use it. Otherwise try to use the Main Menu for the Window.
   // If neither exists, there will be no left navigation bar.
// IF vDialog.ReusableSideWindow EXISTS
   IF vDialog.ReusableSideWindow EXISTS AND szShowSideMenu = "Y"

      IF vDialog.DfltMenu EXISTS AND vDialog.ReusableSideWindow.ZKey != vDialog.Window.ZKey
         vDfltMenu = vDialog
      ELSE
         vDfltMenu = 0
      END

      IF vDialog.ReusableSideDialog.ZKey = vDialog.Dialog.ZKey
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            BuildSideNavSectionJ( vDialog, vDialogTemp, lFileJSP, "Y", vDfltMenu )  // dks ... want Reusable + Default
            szSideMenuExists = "Y"
         END
         DropView( vDialogTemp )
      ELSE
         ActivateMetaOI_ByName( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META,  zSINGLE, vDialog.ReusableSideDialog.Tag, 0 )
      // plListHandle = ActivateMetaOI_KeepList( vSubtask, vDialogTemp, 0, zREFER_DIALOG_META, zSINGLE, vDialog.ReusableSideDialog.Tag, 0, 0,
      //                                         0, plListHandle )
         SET CURSOR FIRST vDialogTemp.Window WHERE vDialogTemp.Window.ZKey = vDialog.ReusableSideWindow.ZKey
         IF RESULT >= zCURSOR_SET
            BuildSideNavSectionJ( vDialog, vDialogTemp, lFileJSP, "Y", vDfltMenu )  // dks ... want Reusable + Default
            szSideMenuExists = "Y"
         END
         DropObjectInstance( vDialogTemp )
      END

   ELSE
   // IF vDialogRoot.DfltMenu EXISTS AND
      IF vDialogRoot.DfltMenu EXISTS AND szShowSideMenu = "Y" AND
         (vDialog.ReusableMainDialog DOES NOT EXIST OR  // don't put out side menu if side == top
          lReusableDialogZKey != vDialog.ReusableMainDialog.ZKey OR
          lReusableWindowZKey != vDialog.ReusableMainWindow.ZKey)

         BuildSideNavSectionJ( vDialog, vDialogRoot, lFileJSP, "N", 0 )
         szSideMenuExists = "Y"
      END
   END

   szCSS_Class = vDialog.Window.CSS_Class
   IF szCSS_Class = ""
      szCSS_Class = vDialog.Dialog.CSS_Class
   END

   IF szCSS_Class != ""
      szDivContentClass = szCSS_Class
      //szWriteBuffer = "<div class=^" + szCSS_Class + "^>"
      szWriteBuffer = "<div id=^" + szCSS_Class + "^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   ELSE
      // KJS 10/30/08 - Do I want to put a div with id for dashboard window and
      // for popup window???
      IF  szWindowIsPopup = "Y"
         // If no class was given, create a default div with the id of content.
         szWriteBuffer = "<div id=^contentpopup^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "contentpopup"
      ELSE
      IF  szWindowIsForDashboard = "Y"
         // If no class was given, create a default div with the id of content.
         szWriteBuffer = "<div id=^contentdashboard^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "contentdashboard"
      ELSE
      IF szSideMenuExists = "Y"
         // If no class was given, create a default div with the id of content.
         szWriteBuffer = "<div id=^content^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "content"
      ELSE
         // If no class was given, and there is no side menu,
         // create a default div with the id of contentnosidemenu.
         szWriteBuffer = "<div id=^contentnosidemenu^>"
         WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )
         szDivContentClass = "contentnosidemenu"
      END
      END
      END
   END

   // KJS 03/04/10 - We are going to try adding an include file for system maintenance.  That way if we
   // want to kick people out of MyENC, we will put code in systemmaintenance.inc that will have a flashing
   // message that will show on each page.
//<!--System Maintenance-->

//<div> <%@ include file="./include/systemmaintenance.inc" %> </div>

//<!--System Maintenance-->

   szWriteBuffer = "<!--System Maintenance-->"
   WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%@ include file=^./include/systemmaintenance.inc^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<!-- END System Maintenance-->"
   WL_QC( vDialogRoot, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Generate FORM
   //CreateSizeString( vDialog, szSize )
   PIX_PER_DU( vDialog, dDLUnits )

   // For Popups, we will use the Width from the Window. Otherwise we won't.
   // The way we will determine if this Window is for a Popup is to see if any Action is Return from Popup.
// SET CURSOR FIRST vDialog.Action WHERE ( vDialog.Action.Type = zWAB_StartModalWebPopup OR vDialog.Action.Type = zWAB_StartModelessWebPopup )
   SET CURSOR FIRST vDialog.Action WHERE ( vDialog.Action.Type = 78 OR vDialog.Action.Type = 79 )
   IF RESULT >= zCURSOR_SET
      lSize = zLOUSHORT( vDialog.Window.SZDLG_X )
      lSize = lSize * dDLUnits
      szWidth = lSize
   ELSE
      szWidth = "750"
   END
   lSize = zLOUSHORT( vDialog.Window.SZDLG_Y )
   lSize = lSize * dDLUnits
   szHeight = lSize
   szStyle = "width:" + szWidth + "px;height:" + szHeight + "px;"

   szWriteBuffer = "<form name=^" + szFormName + "^ id=^" + szFormName + "^ method=^post^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // Eliminating <input termination.
   szWriteBuffer = "   <input name=^zAction^ id=^zAction^ type=^hidden^ value=^NOVALUE^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zTableRowSelect^ id=^zTableRowSelect^ type=^hidden^ value=^NOVALUE^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zDisable^ id=^zDisable^ type=^hidden^ value=^NOVALUE^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// szWriteBuffer = "   strSessionId = session.getId( );"
// WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // Add each view definition.
   FOR EACH vDialog.ViewObjRef //WHERE vDialog.ViewObjRef.wWindowUseFlag = "Y"
      szWriteBuffer = "   View " + vDialog.ViewObjRef.Name + " = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   //szWriteBuffer = "   zeidon.zView vKZXMLPGO = new zeidon.zView( );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strRadioGroupValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strComboCurrentValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strAutoComboBoxExternalValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strComboSelectedValue = ^0^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorColor = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorMapValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTextDisplayValue = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTextURL_Value = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strSolicitSave = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strTblOutput = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    ComboCount = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int    iTableRowCnt = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF  szWindowIsForDashboard = "Y"
      szWriteBuffer = "   strViewName = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      iFrameCount = 0;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "   CursorResult csrRC2 = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   task.log().info( ^InitWebPage: ^ + ^" + szDialogTag + szWindowTag + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   //szWriteBuffer = "   nRC2 = vKZXMLPGO.InitWebPage(^" + szDialogTag + "^, ^" + szWindowTag + "^ );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF  szWindowIsForDashboard = "Y"
      // HOW AM I GOING TO KNOW TO USE mUser????!!! Right now this is vDialog.CtrlMapView.Name but that is not correct.
      //szViewName = vDialog.CtrlMapView.Name
      szViewName = "mUser"
      szWriteBuffer = "   // Position on the correct Frame by looping through the dashboard object "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   iFrameCount = vKZXMLPGO.cursor( ^Session^ ).getIntegerFromAttribute( ^DashboardFrameCount^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( iFrameCount == 0 ) "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      iFrameCount = 1;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   task.log().info(^**** FrameCount *** ^ + iFrameCount);"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   " + szViewName + " = task.getViewByName( ^" + szViewName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   csrRC = " + szViewName + ".cursor( ^DashboardFrameUser^ ).setFirst( ^wFrameNbr^, iFrameCount, ^^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   task.log().info(^**** nRC after SetCursorFirstByInteger *** ^ + nRC);"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strViewName = " + szViewName + ".cursor( ^DashboardFrame^ ).getAttribute( ^Name^ ).getString( ^^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   task.log().info(^**** ReportName *** ^ + strViewName);"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC = " + szViewName + ".cursor( ^PresentationObjectInstance^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC >= 0 ) "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   { "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = mDashboard.SetOIFromBlob( ^^, task, " + szViewName + ", ^PresentationObjectInstance^, ^ObjectInstanceBlob^, 0 ); //zIGNORE_ERRORS "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strViewName = " + szViewName + ".cursor( ^DashboardFrame^ ).getAttribute( ^ObjectInstanceName^ ).getString( ^^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      mDashboard.SetName(strViewName );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   } "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   iFrameCount = iFrameCount + 1;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   vKZXMLPGO.cursor( ^Session^ ).getAttribute( ^DashboardFrameCount^ ).setValue( iFrameCount, ^^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   END

   // Build call to FindErrorFields and process any errors.
   szWriteBuffer = "   // FindErrorFields Processing"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   mMsgQ = new KZMSGQOO_Object( vKZXMLPGO );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   mMsgQ.setView( VmlOperation.getMessageObject( task ) );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strError = mMsgQ.FindErrorFields( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //KJS Trace
   //szWriteBuffer = "   task.log().info( ^Post FindErrorFields Pos1: ^ + nPos );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   // strError is of the form: ^Y\tChemicalName\tMax length exceeded\t\nMapping value in error\t\nY\tPercent\tInvalid numeric\t\n6.84%\t\n ...^"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // We want to find the first ^Y^ error flag if it exists."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int nLth = strError.length( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int nPos = strError.indexOf( ^\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   while ( nPos > 0 && nPos < nLth )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strErrorFlag = strError.substring( nPos - 1, nPos );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         int nPos2 = strError.indexOf( ^\t\n^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nPos2 >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strErrorMapValue = strError.substring( nPos + 1, nPos2 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            nPos = strErrorMapValue.indexOf( ^\t^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if ( nPos >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               strErrorTitle = strErrorMapValue.substring( 0, nPos );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               strErrorMsg = strErrorMapValue.substring( nPos + 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "         break;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         nPos = strError.indexOf( ^\t\n^, nPos + 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( nPos > 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            strErrorTitle = strError.substring( nPos + 2 ); // debugging"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            int nPos2 = strError.indexOf( ^\t\n^, nPos + 2 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if ( nPos2 >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               nPos = nPos2 + 2;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               strErrorTitle = strError.substring( nPos ); // debugging"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               task.log().info( ^Error: ^ + strErrorTitle ); // debugging"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               nPos = strError.indexOf( ^\t^, nPos );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               nPos = -1;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   // KJS 10/10/14
   IF vDialog.Window.WEB_UnregisterZeidonWindow = "Y"
      szWriteBuffer = "      // Setting strActionToProcess = null because this is an ^Unregister App^ page, if an error occurs on the page, we still unregister."
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strActionToProcess = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   //szWriteBuffer = "   task.log().info( ^Post FindErrorFields ErrorFlag: ^ + strErrorFlag );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "         task.log().info( ^After FindErrorFields ErrorFlag: ^ + strErrorFlag );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log().info( ^After FindErrorFields ErrorTitle: ^ + strErrorTitle );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log().info( ^After FindErrorFields ErrorMsg: ^ + strErrorMsg );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "   strSolicitSave = vKZXMLPGO.cursor( ^Session^ ).getAttribute( ^SolicitSaveFlag^ ).getString( ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // FindOpenFile processing.
   szDlgTag = vDialog.Dialog.Tag
   szWndTag = vDialog.Window.Tag
   szWriteBuffer = "   strFocusCtrl = VmlOperation.GetFocusCtrl( task, ^" + szDlgTag + "^, ^" + szWndTag + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strOpenFile = VmlOperation.FindOpenFile( task );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   //KJS Trace
   IF (lTrace = 1)
      szWriteBuffer = "   task.log().info( ^After Get OpenFile: ^ + strOpenFile );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "   //strDateFormat = task.GetDateDefaultContextFormat();"
   SysReadZeidonIni( -1, szSystemIniApplName, "WebDateFormat", szDateFormat )
   IF szDateFormat = ""
      szDateFormat = "MM/DD/YYYY"
   END

   szWriteBuffer = "   strDateFormat = ^" + szDateFormat + "^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // KJS 07/12/13 - Would like to try and catch java errors that occur while building the page. Then display this to the
   // user. We might want to do this for each field displayed on the page, but for now we are going to try an overall generic one.
   // try/catch
   //szWriteBuffer = "   try { "
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF szKeyRole = "Y"

      szWriteBuffer = "   wWebXA = task.getViewByName( ^wWebXfer^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( wWebXA ) )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = wWebXA.cursor( ^Root^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLoginName = wWebXA.cursor( ^Root^ ).getAttribute( ^LoginName^ ).getString( ^LoginName^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( strLoginName == null )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strLoginName = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strKeyRole = wWebXA.cursor( ^Root^ ).getAttribute( ^KeyRole^ ).getString( ^KeyRole^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( strKeyRole == null )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strKeyRole = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // szWriteBuffer = "         task.log().info( ^Root.KeyRole: ^ + strKeyRole );"
   // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   END

   //KJS Trace
   //szWriteBuffer = "   task.log().info( ^After Get DateFormat: ^ + strDateFormat );"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // Eliminating <input termination.
   szWriteBuffer = "   <input name=^zFocusCtrl^ id=^zFocusCtrl^ type=^hidden^ value=^<%=strFocusCtrl%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zOpenFile^ id=^zOpenFile^ type=^hidden^ value=^<%=strOpenFile%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zDateFormat^ id=^zDateFormat^ type=^hidden^ value=^<%=strDateFormat%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   IF szKeyRole = "Y"
      szWriteBuffer = "   <input name=^zLoginName^ id=^zLoginName^ type=^hidden^ value=^<%=strLoginName%>^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <input name=^zKeyRole^ id=^zKeyRole^ type=^hidden^ value=^<%=strKeyRole%>^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "   <input name=^zOpenPopupWindow^ id=^zOpenPopupWindow^ type=^hidden^ value=^<%=strOpenPopupWindow%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zPopupWindowSZX^ id=^zPopupWindowSZX^ type=^hidden^ value=^<%=strPopupWindowSZX%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zPopupWindowSZY^ id=^zPopupWindowSZY^ type=^hidden^ value=^<%=strPopupWindowSZY%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zErrorFlag^ id=^zErrorFlag^ type=^hidden^ value=^<%=strErrorFlag%>^>"  // Kelly?
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )  // Kelly?

   // KJS 09/09/2009 - We are using Timeout.inc (which says this is for Jeff) but if there is a value in
   // WEB_Timeout for the dialog or window, we want to use that.
   IF vDialog.Window.WEB_Timeout != ""
      szWriteBuffer = "   <input name=^zTimeout^ id=^zTimeout^ type=^hidden^ value=^"
      szWriteBuffer = szWriteBuffer + vDialog.Window.WEB_Timeout
      szWriteBuffer = szWriteBuffer + "^>"
   ELSE
      IF vDialog.Dialog.WEB_Timeout != ""
         szWriteBuffer = "   <input name=^zTimeout^ id=^zTimeout^ type=^hidden^ value=^"
         szWriteBuffer = szWriteBuffer + vDialog.Dialog.WEB_Timeout
         szWriteBuffer = szWriteBuffer + "^>"
      ELSE
         szWriteBuffer = "   <input name=^zTimeout^ id=^zTimeout^ type=^hidden^ value=^<%=nTimeout%>^>"
      END
   END
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <input name=^zSolicitSave^ id=^zSolicitSave^ type=^hidden^ value=^<%=strSolicitSave%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   szWriteBuffer = "   <div name=^ShowVMLError^ id=^ShowVMLError^ class=^ShowVMLError^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      <%=strVMLError%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   </div>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   // Generate HTML Control output.
   OrderEntityForView( vDialog, "Control", "PSDLG_Y A PSDLG_X A" )
   vGroupParent = 0

   /* KJS 04/16/15 - We do this above, so would I need to do this again?
   // KJS 07/23/08 - Check if this dialog window will be built with all relative positioning or with absolute positioning
   IF  vDialog.Dialog.WEB_RelativePositionFlag = "Y" OR vDialog.Window.WEB_RelativePositionFlag = "Y"
      szNoPositioning = "Y"
   ELSE
      szNoPositioning = ""
   END
   // KJS 02/19/09 - Added WEB_AbsolutePositionFlag because I would like to use absolute positioning on my popup pages but the rest
   // I want to use relative positioning.  Since I think from now on we will probably only want to use relative positioning for most
   // pages, I think it will be easier to have this flag.
   IF  vDialog.Window.WEB_AbsolutePositionFlag = "Y"
      szNoPositioning = ""
   END
   */

   GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFileJSP, szWriteBuffer, szIndentNext, lTableRowCnt, szNoPositioning, 0, 0, "" )


   // KJS 07/12/13 - Putting in the catch for our previous "try". try/catch
   /*
   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "     catch (Exception e)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<div style=^font-weight:bold;width:400px;^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      out.println(^An error has occurred on the page: ^ + e.getMessage());"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "</div"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   */
   // End of "catch code

   // Complete the JSP file.
   szWriteBuffer = ""
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "   if ( StringUtils.equals( strErrorFlag, ^X^ ) )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   IF (lTrace = 1)
      szWriteBuffer = "      task.log().info( ^Post FindErrorFields Error: ^ + strError );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "      nPos = strError.indexOf( ^\t^, 2 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( nPos >= 0 )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorTitle = strError.substring( 2, nPos );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         int nPos2 = strError.indexOf( ^\t\n^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorMsg = strError.substring( nPos + 1, nPos2 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   <input name=^zError^ id=^zError^ type=^hidden^ value=^<%=strErrorMsg%>^>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF szWebDebugView != ""
      szWriteBuffer = "   <div align=^clear:both;center;^><table style=^width:750px;background-color:black;color:white;border:none;font-size:8px;^><tr style=^background-color:blue;color:white;border:none;^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <td nowrap style=^background-color:blue;color:white;border:none;padding-top:6px;padding-bottom:6px;font-size:11px;^>Feedback: </td>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <td nowrap style=^background-color:blue;color:white;border:none;padding-top:6px;padding-bottom:6px;font-size:11px;^><input name=^zFeedback^ id=^zFeedback^ style=^left:4px;width:700px;^></td>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   </tr></table></div>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "</form>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // FORM GENERATION FOR FILE TRANSFER GROUPS
   // Create Form statements for each Group of type "File Transfer to Server".
   // Note that each Group requires a subcontrol of type EditBox and another of type PushBtn.
   CreateViewFromView( vDialogTemp, vDialog )
   NAME VIEW vDialogTemp "vDialogTemp"
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   szCtrlTag = "File Transfer to Server"
   nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" )
   LOOP WHILE nRC >= zCURSOR_SET
      // Generate Form Statement for Group, with hidden field zAction.
      szWriteBuffer = ""
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szFormName = vDialogTemp.Control.Tag
      szWriteBuffer = "<form name=^" + szFormName + "^  id=^" + szFormName + "^ method=^post^ enctype=^multipart/form-data^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <input name=^zAction^ id=^zAction^ type=^hidden^ value=^HELP^>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      CreateAbsolStyleString( vDialogTemp, szStyle, lSizeX, lSizeY, "" )

      szClass = ""
      IF vDialogTemp.Control.CSS_Class != ""
         szClass = " class=^" + vDialogTemp.Control.CSS_Class + "^"
      END
      szWriteBuffer = "<div" + szStyle + szClass + ">  <!-- " + vDialogTemp.Control.Tag + " --> "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      // Get Group positions for adding to subcontrols.
      //lSizeX = vDialogTemp.Control.PSDLG_X * dDLUnits
      //lSizeY = vDialogTemp.Control.PSDLG_Y * dDLUnits

      // Generate hidden field zTargetFileName, with JSP to retrieve name.
      // We are currently positioned on the GroupBox and need to reposition on the subcontrol Button
      // to generate the FileName mapping..
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = ^^;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      SetViewToSubobject( vDialogTemp, "CtrlCtrl" )
      FOR EACH vDialogTemp.Control
         IF vDialogTemp.ControlDef.Tag = "PushBtn"
            IF vDialogTemp.CtrlMapER_Attribute EXISTS
               // The mapping for the Push Button specifies the attribute that contains the Target File Name (without suffix).

            // szWriteBuffer = "   strSessionId = session.getId( );"
            // WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

               szWriteBuffer = "   " + vDialogTemp.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialogTemp.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialogTemp.CtrlMapView.Name + " ) )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               szWriteBuffer = "   {"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialogTemp.CtrlMapView.Name + ".cursor( ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strErrorMapValue = " +
                               vDialogTemp.CtrlMapView.Name + ".cursor(^" + vDialogTemp.CtrlMapRelatedEntity.Name +
                               "^).getAttribute( ^" +
                               vDialogTemp.CtrlMapER_Attribute.Name + "^ ).getString( ^^ );"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

               IF (lTrace = 1)
                  szWriteBuffer = "   else"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      task.log().info( ^Invalid View: ^ + ^" + vDialogTemp.Control.Tag + "^ );"
                  WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
               END

            END
         END
      END
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <input name=^zTargetFileName^ id=^zTargetFileName^ type=^hidden^ value=^<%=strErrorMapValue%>^ >"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      // Process EditBox and PushBtn as subcontrols.
      FOR EACH vDialogTemp.Control
         IF vDialogTemp.ControlDef.Tag = "EditBox"
            szCtrlTag     = vDialogTemp.Control.Tag
            szControlType = vDialogTemp.ControlDef.Tag
            szWriteBuffer = "   <% /* " + szCtrlTag + ":" + szControlType + " */ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            CreateAbsolStyleString( vDialogTemp, szStyle, lSizeX, lSizeY, "" )

            // For some reason with the <input type="file" control, the width property doesn't
            // seem to size the width correctly.  Use the "size" attribute instead.  The weird thing
            // is that if I don't include the width in style, then the "Browse" button that gets
            // created is not inline with the field that displays the upload file. ???!!!
            zIntegerToString( szWidth, 10, vDialogTemp.Control.SZDLG_X / 3.5 )

            szClass = vDialogTemp.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "   <input name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^" + szWidth + "^ " + szStyle + " type=^file^  >"
            ELSE
               szWriteBuffer = "   <input class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^" + szWidth + "^ " + szStyle + " type=^file^  >"
            END
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         END
         IF vDialogTemp.ControlDef.Tag = "PushBtn"
            szCtrlTag     = vDialogTemp.Control.Tag
            szControlType = vDialogTemp.ControlDef.Tag
            szWriteBuffer = "   <% /* " + szCtrlTag + ":" + szControlType + " */ %>"
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

            CreateAbsolStyleString( vDialogTemp, szStyle, lSizeX, lSizeY, "" )
            szActionTag = ""
            IF vDialogTemp.EventAct EXISTS
               szActionTag = vDialogTemp.EventAct.Tag
            END
            szClass       = vDialogTemp.Control.CSS_Class
            IF szClass = ""
               //szWriteBuffer = "   <input type=^submit^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + " value=^" + vDialogTemp.Control.Text + "^" +
               //                " onclick=^" + szActionTag + "()^ " + szStyle + " >"
               szWriteBuffer = "   <button type=^button^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                               " onclick=^" + szActionTag + "()^ " + szStyle + " >" + vDialogTemp.Control.Text + "</button>"
            ELSE
               //szWriteBuffer = "   <input class=^" + szClass + "^ type=^submit^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + " value=^" + vDialogTemp.Control.Text + "^" +
               //                " onclick=^" + szActionTag + "()^ " + szStyle + " >"
               szWriteBuffer = "   <button type=^button^ class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                               " onclick=^" + szActionTag + "()^ " + szStyle + " >" + vDialogTemp.Control.Text + "</button>"
            END
            WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
         END
      END
      ResetViewFromSubobject( vDialogTemp )

      szWriteBuffer = "</div>  <!-- " + vDialogTemp.Control.Tag + " --> "
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

      szWriteBuffer = "</form>"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

      lControl = zQUAL_STRING + zPOS_NEXT + zRECURS
      szCtrlTag = "File Transfer to Server"
      nRC = SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                             szCtrlTag, "", "", 0, "Window", "" )
   END
   DropView( vDialogTemp )

   szWriteBuffer = "</div>   <!-- This is the end tag for the div '" + szDivContentClass + "' -->"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   IF  szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "</div>   <!-- This is the end tag for the div 'maincontent' -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // KJS 07/31/08 I don't think we need the following lines.  We are always going to have a div with either
   // content or a name designated by the user.
   // If there is a side menu, a div is created with an id of content.  We
   // need to create the ending div tag.
   //IF szSideMenuExists = "Y"
   //   szWriteBuffer = "</div>  <!-- This is the end tag for the div 'content'  or the class given by the user -->"
   //   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   //END

   // KJS 07/31/08
   // Include a footer at the bottom before the end wrapper div.
   // Only put in a footer if we are generating with relative position.
   IF ( szNoPositioning = "Y" OR szNoPositioning = "S" ) AND szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      IF vDialogRoot.Dialog.WEB_FooterInclude = ""
         // If the user did not specify a footer, hardcode footer.inc
         szWriteBuffer = "<%@ include file=^./include/footer.inc^ %>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      ELSE
         szWriteBuffer = "<%@ include file=^" + vDialogRoot.Dialog.WEB_FooterInclude + "^ %>"
         WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      END
   END

   //<!--This text is a comment-->
   IF  szWindowIsPopup = "" AND szWindowIsForDashboard = ""
      szWriteBuffer = "</div>  <!-- This is the end tag for wrapper -->"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   END

   // DO WE PUT IN THE CODE FOR DASHBOARD HERE???? 1111

   szWriteBuffer = "</body>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   
   // KJS 12/08/15 - Currently we are always including animatedcollapse.js (for groupbox Show/Hide Toggle). We had been calling animatedcollapse.init(); 
   // each time we created an animatedcollapse groupbox but this only needs to be called once and inits all groups. So I am going to try calling init() here
   // at the end on all webpages. Doesn't seem to cause issues even if there is no animatedcollapse on the page (since we include the js). 
   szWriteBuffer = "<script type=^text/javascript^>animatedcollapse.init();</script>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "</html>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// szWriteBuffer = "<%@ include file=^menubottom.inc^ %>"
// WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   // If the Window HAS a menu, then this JSP has the navigation structure within it and contained
   // a div statement. So end the div.
// IF vDialogRoot.DfltMenu EXISTS  we never need it???  dks  2006.02.25
//    szWriteBuffer = "</div>"
//    WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
// END

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   session.setAttribute( ^ZeidonWindow^, ^" + szFormName + "^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   session.setAttribute( ^ZeidonAction^, null );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   // KJS 11/05/09 - For login screens, we want to unregisterzeidon at the end of building a page.  That way
   // when people come to this page but don't do anything, we don't have a session open.
   IF vDialog.Window.WEB_UnregisterZeidonWindow = "Y"
      //szWriteBuffer = "<%"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      // KJS 08/01/13 - I am changing this because now that I don't do a redirect if the action is on the same page, I
      // always get to this code and it nulls out the task. We only want to do this when we first come to the page (and action is null).
      //szWriteBuffer = "   if ( task != null )"
      szWriteBuffer = "   if ( task != null && strActionToProcess == null  )"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task.log().info( ^After building the page UnregisterZeidonApplication: ------>>> ^ + ^" + szFormName + "^ );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task.dropTask();"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task = null;"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      session.setAttribute( ^ZeidonTaskId^, task );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      /*
      // KJS 09/04/14 - Setting a logout date, to try and determine if a user tries to log into application when they already have a session open.
      // It looks like users write over data when they have a couple of browser sessions open.
      szWriteBuffer = "         // Setting a logout date to try and determine if a user tries to log into application when they already have a session open."
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         session.setAttribute( ^ZeidonTaskLogoutDate^, new java.util.Date() );"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
      */
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
      //szWriteBuffer = "%>"
      //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   END
   szWriteBuffer = "   strActionToProcess = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   DropView( vDialogRoot )

   SysCloseFile( vDialog, lFileJSP, 0 )

END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATION: GenJSPJ_DownloadFile
//    If we have a download file button, we are creating a separate jsp file to do the download if the
//    browser is firefox.  This creates that code.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
GenJSPJ_DownloadFile( VIEW vDialog,
                      STRING ( 32 ) szDownloadFileName )

   STRING ( 10000 ) szWriteBuffer
   INTEGER          lFileJSP

   lFileJSP = SysOpenFile( vDialog, szDownloadFileName, COREFILE_WRITE )
   IF lFileJSP < 0
      RETURN -1
   END

   szWriteBuffer = "<%-- wDownload_File --%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<%@ page import=^java.util.*,javax.servlet.*,javax.servlet.http.*,java.io.*,zeidon.zView^ %>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<% "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "session = request.getSession( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "Task task;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "View vKZXMLPGO;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "com.quinsoft.zeidon.system.Object_KZXMLPGO = null;"
   //WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int nRC;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   String strURL;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strError = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorFlag = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorTitle = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String strErrorMsg = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Check to see if the Zeidon subtask view already exists.  If not, create"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "  // it and copy it into the application object."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String taskId = (String) session.getAttribute( ^ZeidonTaskId^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   Task task = objectEngine.getTaskById( taskId );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )
   szWriteBuffer = "   if ( task == null )"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strURL = response.encodeRedirectURL( ^logout.jsp^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.sendRedirect( strURL );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      return;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      task.log().info( ^*** In wDownload_file: ^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      vKZXMLPGO = JspWebUtils.createWebSession( null, task, ^^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )

   szWriteBuffer = "      strURL = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      nRC = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   String sDownloadFile = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sSourceFileNameOnly = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   String sExtension = null;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int l;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   int x;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Download File Processing"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   sDownloadFile = (String)session.getAttribute( ^DownloadFile^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   task.log().info( ^*** Download File: ^ + sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Replace any quotes."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   sDownloadFile = sDownloadFile.replaceAll(^\^^,^^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   l = sDownloadFile.lastIndexOf(^.^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   x = sDownloadFile.lastIndexOf(^\\^);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   task.log().info( ^*** sDownloadFile: ^ + sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // If x > l then the filename has no extension and"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // there must be a period in the directory name."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // Right now we are not using sExtension but just"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // in case we want to change the encType I want"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   // to capture this."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if (x > l)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      sExtension = ^^;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      sExtension = sDownloadFile.substring( l + 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   // Get the filename only without directories."
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   sSourceFileNameOnly = sDownloadFile.substring( x + 1 );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   File InputFile = new File( sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   FileInputStream fis = new FileInputStream( InputFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   try"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      String contenttype = ^application/octet-stream^;  "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.setContentType( contenttype );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      response.addHeader( ^Content-Disposition^, ^attachment; filename=^ + sSourceFileNameOnly + ^;^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      task.log().info( ^*** In sSourceFileNameOnly: ^ + sSourceFileNameOnly );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      //response.setHeader( ^Cache-Control^, ^cache,must-revalidate^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      //response.addHeader( ^Pragma^, ^public^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      ServletOutputStream outStream = response.getOutputStream( );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      int c = 0;"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      while ((c=fis.read())!=-1)"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         outStream.write(c);"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      outStream.flush();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      outStream.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      fis.close();"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   catch (Exception e) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( InputFile!=null && InputFile.exists( ) ) "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      { "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         //TraceLine"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         task.log().info( ^Error downloading file: ^ + sDownloadFile );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      } "
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   task.log().info( ^*** In wDownload_file 2^ );"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "%>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )

   szWriteBuffer = "<html><body></body></html>"
   WL_QC( vDialog, lFileJSP, szWriteBuffer, "^", 1 )


   SysCloseFile( vDialog, lFileJSP, 0 )

   RETURN 0

END


/*************************************************************************************************
**    
**    OPERATION: GenerateJSPJavaInc
**    Generate the .jsp code with java calls. But only the control section, not the entire jsp page.
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
GenerateJSPJavaInc( VIEW ViewToInstance BASED ON LOD TZWDLGSO,
                    VIEW vSubtask )



END
/*
CHANGE LOG
2000.09.14   BL
   Modified CloneAction, Bugfix for Dialogs with more than one Source Files
2000.02.03   BL new PPE handling
   Modified special handling for Control Bitmap
2000.01.31   BL new PPE handling
   Modified CloneControl for search ControlDef.Tag, if not found search ControlDef.Key
   (not ControlDef.ZKey, because merge PPE)
2000.01.13   BL new PPE handling
   Modified CloneWindow and WndEventName for new PPE handling
   Update Datatype for remove warnings
from here old version
08.05.1997  DonC
   Changed CloneCtrlMap and PositionOnVOR operations from LOCAL
   operations to TRANSFORMATION operations, including modifying the order
   of the parameters and changing message titles so they would be appropriate
   for Reports as well as Dialogs.
14.05.1997  DonC
   Modified CloneAction to not create an Action if one exists by the same name.
   This protects against duplicate Actions after a Window merge.
29.06.1998  DonC
   Expanded error message WD00201 to make it more understandable.
1998.12.29  DKS
   Fixed clone control to act on ZKey (which is really an Id).
*/

// LAST MESSAGE ID: WD00218

/////////////////////////////////////////////////////////////////////////////
//
// OPERATION: WndEventName   DERIVED OPERATION
//
// PURPOSE:  This function sets the current window event name into
//           TZWDLGSO, ActWndEvent, EventName.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
WndEventName( VIEW           vTZWDLGSO BASED ON LOD TZWDLGSO,
              STRING ( 256 ) lpViewEntity,
              STRING ( 256 ) lpViewAttrib,
              SHORT          nMsg )

   VIEW vPE BASED ON LOD TZPESRCO
   VIEW vMetaList BASED ON LOD TZCMLPLO

   STRING ( 256 ) szEventString
   INTEGER       nRC

   nRC = GetViewByName( vPE, "TZPESRCO", vTZWDLGSO, zLEVEL_TASK )

   IF nRC = -1
      // Activate the presentation environment.
      // RetrieveViewForMetaList( vSubtask, vTZWDLGSO, vMetaList, zREFER_PENV_META )
      RetrieveViewForMetaList( vTZWDLGSO, vMetaList, zREFER_PENV_META )
      SET CURSOR FIRST vMetaList.W_MetaDef
      IF RESULT >= zCURSOR_SET
         szEventString = vTZWDLGSO.ActWndEvent.Type
         StoreStringInRecord( vTZWDLGSO, lpViewEntity, lpViewAttrib,
                              szEventString )
         RETURN -16
      ELSE
         LoadZeidonPPE( vTZWDLGSO, vPE, zREFER_PENV_META, vMetaList,
                        "Configuration Management", "" )
         SetNameForView( vPE, "TZPESRCO", vTZWDLGSO, zLEVEL_TASK )
         DropView( vMetaList )
      END
   END

   SET CURSOR FIRST vPE.WindowStyle
       WHERE  vPE.WindowStyle.Tag = vTZWDLGSO.WndStyle.Tag

   SET CURSOR FIRST vPE.EventDef
       WHERE  vPE.EventDef.Type = vTZWDLGSO.ActWndEvent.Type

   IF RESULT >= zCURSOR_SET
      szEventString = vPE.EventDef.Tag
      StoreStringInRecord( vTZWDLGSO, lpViewEntity, lpViewAttrib,
                           szEventString )
   ELSE
      szEventString = vTZWDLGSO.ActWndEvent.Type
      StoreStringInRecord( vTZWDLGSO, lpViewEntity, lpViewAttrib,
                           szEventString )
   END

   RETURN 0
END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    CloneWindow
//
// PURPOSE:  This function uses the Window subobject specified by the
//           vOrigW view and creates a clone of that Window
//           subobject in the vNewW view.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CloneWindow( VIEW vNewW BASED ON LOD TZWDLGSO,
             VIEW vOrigW BASED ON LOD TZWDLGSO,
             VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
             VIEW vSubtask )

   VIEW vPE      BASED ON LOD TZPESRCO
   VIEW LOD_List BASED ON LOD TZCMLPLO
   STRING ( 254 ) szMsg
   SHORT          nRC

   // Get View to Presentation Environment.
   RetrieveViewForMetaList( vSubtask, LOD_List, zREFER_PENV_META )
   IF GetViewByName( vPE, "TZPESRCO", vSubtask, zLEVEL_TASK ) < 0
      LoadZeidonPPE( vSubtask, vPE, zREFER_PENV_META, LOD_List,
                     "Configuration Management", "" )
      SetNameForView( vPE, "TZPESRCO", vSubtask, zLEVEL_TASK )
   END

   CreateMetaEntity( vSubtask, vNewW, "Window", zPOS_AFTER )
   SetMatchingAttributesByName( vNewW,  "Window",
                                vOrigW, "Window", zSET_NULL )

   // Clone Window Style.
   SET CURSOR FIRST vPE.WindowStyle WHERE
                    vPE.WindowStyle.Tag = vOrigW.WndStyle.Tag
   IF RESULT >= 0
      IncludeSubobjectFromSubobject( vNewW, "WndStyle",
                                     vPE, "WindowStyle", zPOS_AFTER )
   ELSE
      szMsg = "The Style value, '"
      szMsg = szMsg + vOrigW.WndStyle.Tag
      szMsg = szMsg + "', specified for source window, '"
      szMsg = szMsg + vOrigW.Window.Tag
      szMsg = szMsg + "', is not valid for the PE in the target LPLR."
      MessageSend( vSubtask, "WD00201", "Dialog Clone",
                   szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
   END

   /* Clone WndPhysOverride for background and foreground colors
   IF CheckExistenceOfEntity( vOrigW, "WndPhysOverride" ) = 0
      CreateMetaEntity( vSubtask, vNewW, "WndPhysOverride", zPOS_AFTER )
      IF CheckExistenceOfEntity( vOrigW, "WndColorBk" ) = 0
         SET CURSOR FIRST vPE.Color WHERE
                          vPE.Color.Tag = vOrigW.WndColorBk.Tag
         IF RESULT >= 0
            IncludeSubobjectFromSubobject( vNewW, "WndColorBk",
                                           vPE, "Color", zPOS_AFTER )
         ELSE
            szMsg ="Background color doesn't exist: " + vOrigW.WndColorBk.Tag
            MessageSend( vSubtask, "WD00202", "Dialog Clone",
                         szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         END
      END
      IF CheckExistenceOfEntity( vOrigW, "WndColorFg" ) = 0
         SET CURSOR FIRST vPE.Color WHERE
                          vPE.Color.Tag = vOrigW.WndColorFg.Tag
         IF RESULT >= 0
            IncludeSubobjectFromSubobject( vNewW, "WndColorFg",
                                           vPE, "Color", zPOS_AFTER )
         ELSE
            szMsg ="Foreground color doesn't exist: " + vOrigW.WndColorFg.Tag
            MessageSend( vSubtask, "WD00203", "Dialog Clone",
                         szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         END
      END
   END */

   nRC = MergeWindowComponents( vNewW, vOrigW, vSourceLPLR, vPE, vSubtask )

   DropView( LOD_List )
   RETURN  nRC

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    MergeWindowComponents
//
// PURPOSE:  This function clones the Controls from the vOrigW window
//           into the vNewW window.
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
MergeWindowComponents( VIEW vNewW  BASED ON LOD TZWDLGSO,
                       VIEW vOrigW BASED ON LOD TZWDLGSO,
                       VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
                       VIEW vPE   BASED ON LOD TZPESRCO,
                       VIEW vSubtask )

   VIEW TZDLG_List REGISTERED AS TZCMLPLO
   VIEW TZWND_List BASED ON LOD  TZWDLGSO
   VIEW vNewWC     BASED ON LOD  TZWDLGSO
   VIEW vOrigWC    BASED ON LOD  TZWDLGSO
   VIEW vTempNewW  BASED ON LOD  TZWDLGSO
   VIEW vTempOrigW BASED ON LOD  TZWDLGSO
   INTEGER nRC

   // Create View for processing each Control.  Must be different than
   // vNewW or vOrigW because of recursive Controls.
   CreateViewFromViewForTask( vNewWC, vNewW, 0 )
   CreateViewFromViewForTask( vOrigWC, vOrigW, 0 )
   CreateViewFromViewForTask( vTempNewW, vNewW, 0 )
   CreateViewFromViewForTask( vTempOrigW, vOrigW, 0 )
   NAME VIEW vNewWC "NewDialogWC"
   NAME VIEW vOrigWC "OldDialogWC"

   // Clone each Action (Must be cloned before Controls)
   FOR EACH vOrigW.Action
      nRC = CloneAction( vSourceLPLR, vOrigW, vNewW, vSubtask )
      IF nRC = -1
         DropView( vNewWC )
         DropView( vOrigWC )
         RETURN -1
      END
   END

   // Clone each Control
   FOR EACH vOrigWC.Control
      nRC = CloneControl( vSourceLPLR, vOrigW, vOrigWC, vNewW, vNewWC, vPE, vSubtask )
      IF nRC = -1
         DropView( vNewWC )
         DropView( vOrigWC )
         RETURN -1
      END
   END

   // Clone WndEvent
   // Don't clone a WndEvent if another one by the same type already
   // exists or if the Action Tag is null.
   FOR EACH vOrigW.WndEvent
      SET CURSOR FIRST vTempNewW.WndEvent
                        WHERE vTempNewW.WndEvent.Type = vOrigW.WndEvent.Type
      IF RESULT < 0 AND vOrigW.WndAct.Tag != ""
         CreateMetaEntity( vSubtask, vNewW, "WndEvent", zPOS_AFTER )
         SetMatchingAttributesByName( vNewW,  "WndEvent",
                                      vOrigW, "WndEvent", zSET_NULL )
         SET CURSOR FIRST vNewW.Action
            WHERE  vNewW.Action.Tag = vOrigW.WndAct.Tag
         IF RESULT >= 0
            IncludeSubobjectFromSubobject( vNewW, "WndAct",
                                           vNewW, "Action", zPOS_AFTER )
         END
      END
   END

   // Clone Menu and each Option
   nRC = CloneMenuAndOptions( vSourceLPLR, vOrigW, vNewW, vSubtask )
   IF nRC = -1
      DropView( vNewWC )
      DropView( vOrigWC )
      DropView( vTempNewW )
      RETURN -1
   END

   // Clone Web stuff
   //  ReusableSideMenu
   //  ReusableMainMenu
   MergeWebMenus( vTempNewW, vTempOrigW, vSubtask )

   // Clone Hotkeys, if the original HotAct is valid.
   FOR EACH vOrigW.Hotkey
      IF CheckExistenceOfEntity( vOrigW, "HotAct" ) = zCURSOR_SET
         IF vOrigW.HotAct.Tag != ""
            SET CURSOR FIRST vNewW.Action
                  WHERE  vNewW.Action.Tag = vOrigW.HotAct.Tag
            IF RESULT >= 0
               CreateMetaEntity( vSubtask, vNewW, "Hotkey", zPOS_AFTER )
               SetMatchingAttributesByName( vNewW,  "Hotkey",
                                            vOrigW, "Hotkey", zSET_NULL )
               IncludeSubobjectFromSubobject( vNewW, "HotAct",
                                              vNewW, "Action", zPOS_AFTER )
            END
         END
      END
   END

   DropView( vNewWC )
   DropView( vOrigWC )
   DropView( vTempNewW )
   DropView( vTempOrigW )
   RETURN 0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    MergeWebMenus
//
// PURPOSE:  This function clones the Controls from the vOrigW window
//           into the vNewW window.
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
MergeWebMenus( VIEW vNewW  BASED ON LOD TZWDLGSO,
               VIEW vOrigW BASED ON LOD TZWDLGSO,
               VIEW vSubtask )

   VIEW TZDLG_List REGISTERED AS TZCMLPLO
   VIEW TZWND_List BASED ON LOD  TZWDLGSO
   INTEGER nRC

   // Merge the following Web Menus only if they don't already exist.
   //  ReusableSideMenu
   //  ReusableMainMenu
   IF vOrigW.ReusableSideWindow EXISTS AND vNewW.ReusableSideWindow DOES NOT EXIST
      IF vOrigW.ReusableSideDialog.Tag = vNewW.Dialog.Tag
         // The Reusable Menu IS in this Dialog, so find the correct Window and include it.
         CreateViewFromView( TZWND_List, vNewW )
         SET CURSOR FIRST TZWND_List.Window
                    WHERE TZWND_List.Window.Tag = vOrigW.ReusableSideWindow.Tag
         IF RESULT >= zCURSOR_SET
            INCLUDE vNewW.ReusableSideWindow FROM TZWND_List.Window
         END
         DropView( TZWND_List )
      ELSE
         // The Reusable Menu is not in this Dialog, so look for an external Dialog.
         SET CURSOR FIRST TZDLG_List.W_MetaDef
                    WHERE TZDLG_List.W_MetaDef.Name = vOrigW.ReusableSideDialog.Tag
         IF RESULT >= zCURSOR_SET
            // Make sure that any left over ReusableDialogSelection entity is removed and then
            // include new Dialog.
            IF vNewW.ReusableDialogSelection EXISTS
               EXCLUDE vNewW.ReusableDialogSelection
            END
            INCLUDE vNewW.ReusableDialogSelection FROM TZDLG_List.W_MetaDef

            // Make sure the Dialog to be included is active in view TZWND_List.
            // Then find the Window and include it.
            GET VIEW TZWND_List NAMED "TZWND_List"
            IF RESULT >= 0
               IF TZWND_List.Dialog.Tag != vOrigW.ReusableSideDialog.Tag
                  DropMetaOI( vSubtask, TZWND_List )
                  TZWND_List = 0
               END
            ELSE
               TZWND_List = 0
            END

            IF TZWND_List = 0
               ActivateMetaOI( vSubtask, TZWND_List, TZDLG_List, zREFER_DIALOG_META, zSINGLE )
               NAME VIEW TZWND_List "TZWND_List"
            END

            IF TZWND_List != 0
               SET CURSOR FIRST TZWND_List.Window
                          WHERE TZWND_List.Window.Tag = vOrigW.ReusableSideWindow.Tag
               IF RESULT >= zCURSOR_SET
                  INCLUDE vNewW.ReusableSideWindow FROM TZWND_List.Window
               END
               DropView( TZWND_List )
            END
         END
      END
   END

   IF vOrigW.ReusableMainWindow EXISTS AND vNewW.ReusableMainWindow DOES NOT EXIST
      IF vOrigW.ReusableMainDialog.Tag = vNewW.Dialog.Tag
         // The Reusable Menu IS in this Dialog, so find the correct Window and include it.
         CreateViewFromView( TZWND_List, vNewW )
         SET CURSOR FIRST TZWND_List.Window
                    WHERE TZWND_List.Window.Tag = vOrigW.ReusableMainWindow.Tag
         IF RESULT >= zCURSOR_SET
            INCLUDE vNewW.ReusableMainWindow FROM TZWND_List.Window
         END
         DropView( TZWND_List )
      ELSE
         SET CURSOR FIRST TZDLG_List.W_MetaDef
                    WHERE TZDLG_List.W_MetaDef.Name = vOrigW.ReusableMainDialog.Tag
         IF RESULT >= zCURSOR_SET
            // Make sure that any left over ReusableDialogSelection entity is removed and then
            // include new Dialog.
            IF vNewW.ReusableDialogSelection EXISTS
               EXCLUDE vNewW.ReusableDialogSelection
            END
            INCLUDE vNewW.ReusableDialogSelection FROM TZDLG_List.W_MetaDef

            // Make sure the Dialog to be included is active in view TZWND_List.
            // Then find the Window and include it.
            GET VIEW TZWND_List NAMED "TZWND_List"
            IF RESULT >= 0
               IF TZWND_List.Dialog.Tag != vOrigW.ReusableMainDialog.Tag
                  DropMetaOI( vSubtask, TZWND_List )
                  TZWND_List = 0
               END
            ELSE
               TZWND_List = 0
            END

            IF TZWND_List = 0
               ActivateMetaOI( vSubtask, TZWND_List, TZDLG_List, zREFER_DIALOG_META, zSINGLE )
               NAME VIEW TZWND_List "TZWND_List"
            END

            IF TZWND_List != 0
               SET CURSOR FIRST TZWND_List.Window
                          WHERE TZWND_List.Window.Tag = vOrigW.ReusableMainWindow.Tag
               IF RESULT >= zCURSOR_SET
                  INCLUDE vNewW.ReusableMainWindow FROM TZWND_List.Window
               END
               DropView( TZWND_List )
            END
         END
      END
   END

   RETURN 0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    CloneControl
//
// PURPOSE:  This function uses the Control subobject specified by the
//           vOrigW view and creates a clone of that Control
//           subobject in the vNewW view.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CloneControl( VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
              VIEW vOrigW  BASED ON LOD TZWDLGSO,
              VIEW vOrigWC BASED ON LOD TZWDLGSO,
              VIEW vNewW   BASED ON LOD TZWDLGSO,
              VIEW vNewWC  BASED ON LOD TZWDLGSO,
              VIEW vPE    BASED ON LOD TZPESRCO,
              VIEW vSubtask )

   STRING ( 64 ) szMsg
   INTEGER nRC

   CreateMetaEntity( vSubtask, vNewWC, "Control", zPOS_AFTER )
   SetMatchingAttributesByName( vNewWC,  "Control",
                                vOrigWC, "Control", zSET_NULL )
   SET CURSOR FIRST vPE.ControlDef WHERE
                    vPE.ControlDef.Key = vOrigWC.ControlDef.Key
   IF RESULT < 0
      SET CURSOR FIRST vPE.ControlDef WHERE
                       vPE.ControlDef.Tag = vOrigWC.ControlDef.Tag
      IF RESULT < 0
         SET CURSOR FIRST vPE.ControlDef WHERE
                          vPE.ControlDef.Key = vOrigWC.ControlDef.ZKey
      END
   END
   IF RESULT >= 0
      IncludeSubobjectFromSubobject( vNewWC, "ControlDef",
                                     vPE,   "ControlDef", zPOS_AFTER )
   ELSE
      szMsg ="ControlDef doesn't exist: " + vOrigWC.ControlDef.Tag
      MessageSend( vSubtask, "WD00204", "Dialog Clone",
                   szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
   END

// // Clone the Color override, if it exists.
// FOR EACH vOrigWC.CtrlClrOverride
//    SET CURSOR FIRST vPE.CtrlColorDef WHERE
//                     vPE.CtrlColorDef.Tag = vOrigWC.CtrlColorDef.Tag
//    IF RESULT >= 0
//       CreateMetaEntity( vSubtask, vNewWC, "CtrlClrOverride", zPOS_AFTER )
//       IncludeSubobjectFromSubobject( vNewWC, "CtrlColorDef",
//                                      vPE, "CtrlColorDef", zPOS_AFTER )
//       SET CURSOR FIRST vPE.Color WHERE
//                        vPE.Color.Tag = vOrigWC.CtrlColor.Tag
//       IF RESULT >= 0
//          IncludeSubobjectFromSubobject( vNewWC, "CtrlColor",
//                                         vPE, "Color", zPOS_AFTER )
//       ELSE
//          IncludeSubobjectFromSubobject( vNewWC, "CtrlColor",
//                                         vPE, "CtrlColor", zPOS_AFTER )
//       END
//
//    ELSE
//       szMsg ="Color Definition doesn't exist: " + vOrigWC.CtrlColorDef.Tag
//       MessageSend( vSubtask, "WD00205", "Dialog Clone",
//                    szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
//    END
// END

// // Clone the Font override, if it exists.
// FOR EACH vOrigWC.CtrlFontOverride
//    SET CURSOR FIRST vPE.CtrlFontDef WHERE
//                     vPE.CtrlFontDef.Tag = vOrigWC.CtrlFontDef.Tag
//    IF RESULT >= 0
//       CreateMetaEntity( vSubtask, vNewWC, "CtrlFontOverride", zPOS_AFTER )
//       IncludeSubobjectFromSubobject( vNewWC, "CtrlFontDef",
//                                      vPE, "CtrlFontDef", zPOS_AFTER )
//       SET CURSOR FIRST vPE.Font WHERE
//                        vPE.Font.Tag = vOrigWC.CtrlFont.Tag
//       IF RESULT >= 0
//          IncludeSubobjectFromSubobject( vNewWC, "CtrlFont",
//                                         vPE, "Font", zPOS_AFTER )
//       ELSE
//          IncludeSubobjectFromSubobject( vNewWC, "CtrlFont",
//                                         vPE, "CtrlFont", zPOS_AFTER )
//       END
//
//    ELSE
//       szMsg ="Font Definition doesn't exist: " + vOrigWC.CtrlFontDef.Tag
//       MessageSend( vSubtask, "WD00206", "Dialog Clone",
//                    szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
//    END
// END

   // Clone each CtrlCtrl
   FOR EACH vOrigWC.CtrlCtrl
      SetViewToSubobject( vOrigWC, "CtrlCtrl" )
      SetViewToSubobject( vNewWC, "CtrlCtrl" )
      nRC = CloneControl( vSourceLPLR, vOrigW, vOrigWC, vNewW, vNewWC, vPE, vSubtask ) // vPE??
      ResetViewFromSubobject( vOrigWC )
      ResetViewFromSubobject( vNewWC )
      IF nRC = -1
         RETURN -1
      END
   END

   // Clone each CtrlMap
   // Save ViewName from first CtrlMap instance for use by instances
   // that expect to inherit it.
   FOR EACH vOrigWC.CtrlMap
      nRC = CloneCtrlMap( vNewW, vNewWC, vOrigW, vOrigWC, vSourceLPLR, vSubtask )
      IF nRC = -1
         RETURN -1
      END
   END

   // Clone each Event, as long as Tag is not blank
   FOR EACH vOrigWC.Event
      IF vOrigWC.EventAct.Tag != ""
         CreateMetaEntity( vSubtask, vNewWC, "Event", zPOS_AFTER )
         SetMatchingAttributesByName( vNewWC, "Event",
                                      vOrigWC, "Event", zSET_NULL )
         SET CURSOR FIRST vNewW.Action
            WHERE  vNewW.Action.Tag = vOrigWC.EventAct.Tag
         IF RESULT >= 0
            IncludeSubobjectFromSubobject( vNewWC, "EventAct",
                                           vNewW, "Action", zPOS_AFTER )
         END
      END
   END

   FOR EACH vOrigWC.WebControlProperty
      CreateMetaEntity( vSubtask, vNewWC, "WebControlProperty", zPOS_AFTER )
      SetMatchingAttributesByName( vNewWC, "WebControlProperty",
                                   vOrigWC, "WebControlProperty", zSET_NULL )
   END

   RETURN  0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    PositionOnVOR
//
// PURPOSE:  This function positions on the correct ViewObjRef entity
//           under the Dialog.  If necessary, it creates the ViewObjRef
//           entity and LOD.
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
PositionOnVOR( VIEW vNewW  BASED ON LOD TZWDLGSO,
               VIEW vOrigW BASED ON LOD TZWDLGSO,
               VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
               STRING (32) szViewName,
               VIEW vSubtask )

   VIEW VOR        BASED ON LOD TZWDVORO
   VIEW VOR_List   BASED ON LOD TZCMLPLO
   VIEW vLOD       BASED ON LOD TZZOLODO
   VIEW LOD_List   BASED ON LOD TZCMLPLO

   STRING (64) szMsg

   // Create necessary ViewObjRef entity and the relationship
   // from ViewObjRef to LOD
   SET CURSOR FIRST vNewW.ViewObjRef
      WHERE  vNewW.ViewObjRef.Name = szViewName
   IF RESULT < 0
      // Try to use existing VOR
      RetrieveViewForMetaList( vSubtask, VOR_List, zREFER_VOR_META )
      SET CURSOR FIRST VOR_List.W_MetaDef
         WHERE  VOR_List.W_MetaDef.Name = szViewName
      IF RESULT >= 0
         ActivateMetaOI( vSubtask, VOR, VOR_List, zREFER_VOR_META, zSINGLE )
         IncludeSubobjectFromSubobject( vNewW, "ViewObjRef",
                                        VOR, "ViewObjRef", zPOS_AFTER )
      ELSE
         // Create new VOR since it doesn't already exist.  This is required for
         // migrating from one LPLR to another, not for cloning within the same LPLR.
         RetrieveViewForMetaList( vSubtask, LOD_List, zREFER_LOD_META )
         SET CURSOR FIRST vOrigW.ViewObjRef WHERE
                          vOrigW.ViewObjRef.Name = szViewName
         IF RESULT < 0
            szMsg = "Window has mapping with no VOR: " + szViewName
            MessageSend( vSubtask, "WD00207", "Named View Clone",
                         szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            DropView( VOR_List )
            DropView( LOD_List )
            RETURN -1
         END

         SET CURSOR FIRST LOD_List.W_MetaDef WHERE
                          LOD_List.W_MetaDef.Name = vOrigW.LOD.Name
         IF RESULT >= 0
            ActivateEmptyMetaOI( vSubtask, VOR, zSOURCE_VOR_META, zSINGLE )
            CreateMetaEntity( vSubtask, VOR, "ViewObjRef", zPOS_AFTER )
            SetMatchingAttributesByName( VOR, "ViewObjRef",
                                         vOrigW, "ViewObjRef", zSET_NULL )
            ActivateMetaOI( vSubtask, vLOD, LOD_List, zREFER_LOD_META, zSINGLE )
            IncludeSubobjectFromSubobject( VOR, "LOD",
                                           vLOD, "LOD", zPOS_AFTER )
            CommitMetaOI( vSubtask, VOR, zSOURCE_VOR_META )
            IncludeSubobjectFromSubobject( vNewW, "ViewObjRef",
                                           VOR, "ViewObjRef", zPOS_AFTER )
            DropMetaOI( vSubtask, vLOD )
         ELSE
            szMsg = "Non-existent LOD: " + vOrigW.LOD.Name
            MessageSend( vSubtask, "WD00208", "Named View Clone",
                         szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            DropView( VOR_List )
            DropView( LOD_List )
            RETURN -1
         END
         DropView( LOD_List )

      END
      DropMetaOI( vSubtask, VOR )
      DropView( VOR_List )
   END

   RETURN  0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    CloneCtrlMap
//
// PURPOSE:  This function uses the CtrlMap subobject specified by the
//           vOrigW view and creates a clone of that CtrlMap
//           subobject in the vNewW view.
//
/////////////////////////////////////////////////////////////////////////////
TRANSFORMATION OPERATION
CloneCtrlMap( VIEW vNewW    BASED ON LOD TZWDLGSO,
              VIEW vNewWC   BASED ON LOD TZWDLGSO,
              VIEW vOrigW   BASED ON LOD TZWDLGSO,
              VIEW vOrigWC  BASED ON LOD TZWDLGSO,
              VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
              VIEW vSubtask )

   VIEW vLOD       BASED ON LOD TZZOLODO
   VIEW LOD_List   BASED ON LOD TZCMLPLO
   INTEGER       nRC
   STRING ( 64 ) szMsg

   CreateMetaEntity( vSubtask, vNewWC, "CtrlMap", zPOS_AFTER )
   SetMatchingAttributesByName( vNewWC, "CtrlMap",
                                vOrigWC, "CtrlMap", zSET_NULL )

   // If there is a CtrlMapView entity, reinclude it afresh.  Also
   // position on correct LOD for LOD_Entity or LOD_Attribute
   // includes.
   IF CheckExistenceOfEntity( vOrigWC, "CtrlMapView" ) >= 0
      nRC = PositionOnVOR( vNewW, vOrigW, vSourceLPLR,
                           vOrigWC.CtrlMapView.Name, vSubtask )
      IF nRC >= 0

         // We are now positioned on the correct ViewObjRef.  Create
         // the relationship from CtrlMap to ViewObjRef.
         IncludeSubobjectFromSubobject( vNewWC, "CtrlMapView",
                                        vNewW, "ViewObjRef", zPOS_AFTER )
      ELSE
         RETURN -1
      END
      RetrieveViewForMetaList( vSubtask, LOD_List, zREFER_LOD_META )
      SET CURSOR FIRST LOD_List.W_MetaDef
         WHERE  LOD_List.W_MetaDef.Name = vNewW.LOD.Name

      IF GetViewByName( vLOD, "TZTMPLOD", vSubtask, zLEVEL_TASK ) > 0
         DropMetaOI( vSubtask, vLOD )
      END
      ActivateMetaOI( vSubtask, vLOD, LOD_List, zREFER_LOD_META, zSINGLE )
      SetNameForView( vLOD, "TZTMPLOD", vSubtask, zLEVEL_TASK )
      DropView( LOD_List )
   END

   // If there is a CtrlMapLOD_Entity entity, reinclude it afresh.
   IF CheckExistenceOfEntity( vOrigWC, "CtrlMapLOD_Entity" ) >= 0
      // The View for the last MapView entity was named TZTMPLOD.
      GetViewByName( vLOD, "TZTMPLOD", vSubtask, zLEVEL_TASK )
      SET CURSOR FIRST vLOD.LOD_Entity
          WHERE  vLOD.LOD_Entity.Name = vOrigWC.CtrlMapLOD_Entity.Name
      IF RESULT >= 0
         IncludeSubobjectFromSubobject( vNewWC, "CtrlMapLOD_Entity",
                                        vLOD,  "LOD_Entity", zPOS_AFTER )
      ELSE
         szMsg ="LOD_Entity doesn't exist: " + vOrigWC.CtrlMapLOD_Entity.Name
         MessageSend( vSubtask, "WD00209", "Control Clone",
                      szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      END
   END

   // If there is a CtrlMapLOD_Attribute entity, reinclude it afresh.
   IF CheckExistenceOfEntity( vOrigWC, "CtrlMapLOD_Attribute" ) >= 0
      // We assume position on the correct LOD from the CtrlMapView.
      SET CURSOR FIRST vLOD.LOD_Entity
          WHERE  vLOD.LOD_Entity.Name = vOrigWC.CtrlMapRelatedEntity.Name
      IF RESULT >= 0
         // Include Attribute and Context, if necessary.
         CtrlAttributeMapping( vSubtask, vSourceLPLR, vOrigWC, vNewWC, vLOD )
      ELSE
         szMsg ="LOD_Entity doesn't exist: " + vOrigWC.CtrlMapRelatedEntity.Name
         MessageSend( vSubtask, "WD00210", "Control Clone",
                      szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      END
   END

   RETURN  0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    CtrlAttributeMapping
//
// PURPOSE:  This function does the includes of LOD_Attribute and
//           CtrlMapContext.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CtrlAttributeMapping( VIEW vSubtask,
                      VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
                      VIEW vOrigWC BASED ON LOD TZWDLGSO,
                      VIEW vNewWC  BASED ON LOD TZWDLGSO,
                      VIEW vLOD   BASED ON LOD TZZOLODO )

   VIEW vDomain    BASED ON LOD TZDGSRCO
   VIEW DomainList BASED ON LOD TZCMLPLO
   STRING ( 64 ) szMsg

   // We assume position is already on the correct LOD_Entity.
   SET CURSOR FIRST vLOD.ER_Attribute WITHIN vLOD.LOD_Entity
       WHERE  vLOD.ER_Attribute.Name = vOrigWC.CtrlMapER_Attribute.Name
   IF RESULT >= 0
      IncludeSubobjectFromSubobject( vNewWC, "CtrlMapLOD_Attribute",
                                      vLOD,  "LOD_Attribute", zPOS_AFTER )
      // Now create relationship to Domain Context, if necessary.
      IF CheckExistenceOfEntity( vOrigWC, "CtrlMapContext" ) >= 0
         SET CURSOR FIRST vSourceLPLR.W_MetaType WHERE
                          vSourceLPLR.W_MetaType.Type = 2003
         SET CURSOR FIRST vSourceLPLR.W_MetaDef WHERE
                          vSourceLPLR.W_MetaDef.CPLR_ZKey = vOrigWC.CtrlMapER_Domain.ZKey
         RetrieveViewForMetaList( vSubtask, DomainList, zREFER_DOMAIN_META )
         SET CURSOR FIRST DomainList.W_MetaDef
            WHERE DomainList.W_MetaDef.Name = vSourceLPLR.W_MetaDef.Name
         IF RESULT >= 0
            ActivateMetaOI( vSubtask, vDomain, DomainList, zREFER_DOMAIN_META,
                                                            zSINGLE )
            SET CURSOR FIRST vDomain.Context
               WHERE  vDomain.Context.Name =
                      vOrigWC.CtrlMapContext.Name
            IF RESULT >= 0
               IncludeSubobjectFromSubobject( vNewWC, "CtrlMapContext",
                                              vDomain, "Context", zPOS_AFTER )
            ELSE
               szMsg = "Context doesn't exist within Domain: " +
                      vOrigWC.CtrlMapContext.Name + ", " +
                      vSourceLPLR.W_MetaDef.Name
               MessageSend( vSubtask, "WD00211", "Dialog Clone",
                            szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            END
            DropMetaOI( vSubtask, vDomain )
         ELSE
            szMsg = "Domain doesn't exist: " + vSourceLPLR.W_MetaDef.Name
            MessageSend( vSubtask, "WD00212", "Dialog Clone",
                         szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         END
         DropView( DomainList )
      END
   ELSE
      szMsg = "ER_Attribute doesn't exist: " +
              vOrigWC.CtrlMapER_Attribute.Name
      MessageSend( vSubtask, "WD00213", "Dialog Clone",
                   szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
   END

   RETURN  0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    CloneAction
//
// PURPOSE:  This function uses the Action subobject specified by the
//           vOrigW view and creates a clone of that Action
//           subobject in the vNewW view.
//           It does not clone Actions with null Tags, since they have
//           no way of being associated to events.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CloneAction( VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
             VIEW vOrigW BASED ON LOD TZWDLGSO,
             VIEW vNewW  BASED ON LOD TZWDLGSO,
             VIEW vSubtask )

   INTEGER   nRC
   INTEGER   nLength
   STRING(1) szLanguageType
   STRING(32) szSourceName

   // Simply return if an Action by the same name already exists.
   SET CURSOR FIRST vNewW.Action WHERE vNewW.Action.Tag = vOrigW.Action.Tag
   IF RESULT >= zCURSOR_SET
      RETURN 0
   END

   IF vOrigW.Action.Tag != ""
      CreateMetaEntity( vSubtask, vNewW, "Action", zPOS_AFTER )
      SetMatchingAttributesByName( vNewW,  "Action",
                                   vOrigW, "Action", zSET_NULL )
   END

   // Clone each ActMap and dependents.
   FOR EACH vOrigW.ActMap
      nRC = CloneActMap( vSourceLPLR, vOrigW, vNewW, vSubtask )
      IF nRC = -1
         RETURN -1
      END
   END

   // If Action.ActOper exists, create a relationship to the
   // corresponding operation in the new dialog.
   // If the operation doesn't exist in the new dialog, add it.
   IF vOrigW.ActOper EXISTS
      SET CURSOR FIRST vNewW.Operation WITHIN vNewW.Dialog WHERE
                       vNewW.Operation.Name = vOrigW.ActOper.Name
      IF RESULT < zCURSOR_SET
         // Add the Operation under the SourceFile entity.  Look at the SourceFile of
         // the original Dialog to determine if type is C or VML and add the operation
         // to the correct SourceFile entry.  If one doesn't exist, create it.
         SET CURSOR FIRST vOrigW.Operation WITHIN vOrigW.Dialog WHERE
             vOrigW.Operation.Name = vOrigW.ActOper.Name
         szLanguageType = vOrigW.SourceFile.LanguageType
         SET CURSOR FIRST vNewW.SourceFile WHERE
             vNewW.SourceFile.LanguageType = szLanguageType
         IF RESULT < zCURSOR_SET
             // There was no SourceFileEntry of correct language type.
             // Add one, but make sure name is unique.
             szSourceName = vNewW.Dialog.Tag
             SET CURSOR FIRST vNewW.SourceFile WHERE
                vNewW.SourceFile.Name = szSourceName
             IF RESULT >= zCURSOR_SET
                // A SourceFile entity by dialog name already exists. Modify name.
                nLength = GetStringLength( szSourceName )
                IF nLength >= 8
                   szSourceName = szSourceName[1:7]
                END
                szSourceName = szSourceName + szLanguageType
             END
             CreateMetaEntity( vSubtask, vNewW, "SourceFile", zPOS_AFTER )
              vNewW.SourceFile.Name         = szSourceName
              vNewW.SourceFile.LanguageType = szLanguageType
              IF szLanguageType = "V"
                 vNewW.SourceFile.Extension = "VML"
              ELSE
                 vNewW.SourceFile.Extension = "C"
              END
         END

         CreateMetaEntity( vSubtask, vNewW, "Operation", zPOS_AFTER )
         SetMatchingAttributesByName( vNewW,  "Operation",
                                      vOrigW, "Operation", zSET_NULL )
         FOR EACH vOrigW.Parameter
             CreateMetaEntity( vSubtask, vNewW, "Parameter", zPOS_AFTER )
             SetMatchingAttributesByName( vNewW,  "Parameter",
                                          vOrigW, "Parameter", zSET_NULL )
         END
      END
      // Include the Operation in either case above.
      INCLUDE vNewW.ActOper FROM vNewW.Operation

   END

   RETURN 0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    CloneActMap
//
// PURPOSE:  This function uses the ActMap subobject specified by the
//           vOrigW view and creates a clone of that ActMap
//           subobject in the vNewW view.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CloneActMap( VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
             VIEW vOrigW  BASED ON LOD TZWDLGSO,
             VIEW vNewW   BASED ON LOD TZWDLGSO,
             VIEW vSubtask )

   VIEW vLOD       BASED ON LOD TZZOLODO
   VIEW LOD_List   BASED ON LOD TZCMLPLO
   INTEGER       nRC
   STRING ( 64 ) szMsg

   CreateMetaEntity( vSubtask, vNewW, "ActMap", zPOS_AFTER )
   SetMatchingAttributesByName( vNewW, "ActMap",
                                vOrigW, "ActMap", zSET_NULL )

   // If there is an ActMapView entity, reinclude it.
   IF CheckExistenceOfEntity( vOrigW, "ActMapView" ) >= 0
      nRC = PositionOnVOR( vNewW, vOrigW,
                           vSourceLPLR, vOrigW.ActMapView.Name, vSubtask )
      IF nRC >= 0

         // We are now positioned on the correct ViewObjRef.  Create
         // the relationship from ActMap to ViewObjRef.
         IncludeSubobjectFromSubobject( vNewW, "ActMapView",
                                        vNewW, "ViewObjRef", zPOS_AFTER )
      ELSE
         RETURN -1
      END

      // Now get a View to the associated LOD for inclusion of the
      // ActMapLOD_Entity.
      RetrieveViewForMetaList( vSubtask, LOD_List, zREFER_LOD_META )
      SET CURSOR FIRST LOD_List.W_MetaDef
         WHERE  LOD_List.W_MetaDef.Name = vNewW.LOD.Name
      IF GetViewByName( vLOD, "TZTMPLOD", vSubtask, zLEVEL_TASK ) > 0
         DropMetaOI( vSubtask, vLOD )
      END
      ActivateMetaOI( vSubtask, vLOD, LOD_List, zREFER_LOD_META, zSINGLE )
      SetNameForView( vLOD, "TZTMPLOD", vSubtask, zLEVEL_TASK )
      DropView( LOD_List )

      // If there is an ActMapLOD_Entity entity, reinclude it afresh.
      IF CheckExistenceOfEntity( vOrigW, "ActMapLOD_Entity" ) >= 0
         // We assume position on the correct LOD from the ActMapView.
         SET CURSOR FIRST vLOD.LOD_Entity
             WHERE  vLOD.LOD_Entity.Name = vOrigW.ActMapLOD_Entity.Name
         IF RESULT >= 0
            // Include Entity
            IncludeSubobjectFromSubobject( vNewW, "ActMapLOD_Entity",
                                           vLOD,  "LOD_Entity", zPOS_AFTER )

         ELSE
            szMsg ="LOD_Entity doesn't exist: " + vOrigW.ActMapLOD_Entity.Name
            MessageSend( vSubtask, "WD00214", "Dialog Clone",
                         szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         END
      END

   ELSE
      // Get the last vLOD  View, if not ActMapView.
      GetViewByName( vLOD, "TZTMPLOD", vSubtask, zLEVEL_TASK )
   END

   RETURN  0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    CloneMenuAndOptions
//
// PURPOSE:  This function clones each Menu and Option subobject.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CloneMenuAndOptions( VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
                     VIEW vOrigW BASED ON LOD TZWDLGSO,
                     VIEW vNewW  BASED ON LOD TZWDLGSO,
                     VIEW vSubtask )

   VIEW vNewWO  BASED ON LOD TZWDLGSO
   VIEW vOrigWO BASED ON LOD TZWDLGSO
   INTEGER nRC

   // Create Menu & Options if Menu exists.
   FOR EACH vOrigW.Menu
      CreateMetaEntity( vSubtask, vNewW, "Menu", zPOS_AFTER )
      SetMatchingAttributesByName( vNewW,  "Menu",
                                   vOrigW, "Menu", zSET_NULL )

      // Create View for processing each Option.  Must be different
      // than vNewW or vOrigW because of recursive Options.
      CreateViewFromViewForTask( vNewWO, vNewW, 0 )
      CreateViewFromViewForTask( vOrigWO, vOrigW, 0 )

      // Name them for debugging.
      SetNameForView( vNewWO, "vNewWO", vSourceLPLR, zLEVEL_TASK )
      SetNameForView( vOrigWO, "vOrigWO", vSourceLPLR, zLEVEL_TASK )

      FOR EACH vOrigWO.Option
         nRC = CloneOption( vNewWO, vNewW, vOrigWO, vOrigW, vSourceLPLR, vSubtask )
         IF nRC = -1
            RETURN -1
         END
      END
   END
   // Set Default Menu, if it exists.
   IF CheckExistenceOfEntity( vOrigW, "DfltMenu" ) = zCURSOR_SET
      SET CURSOR FIRST vNewW.Menu
                    WHERE vNewW.Menu.Tag = vOrigW.DfltMenu.Tag
      IncludeSubobjectFromSubobject( vNewW, "DfltMenu",
                                     vNewW, "Menu", zPOS_AFTER )
   END

   RETURN 0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    CloneOption
//
// PURPOSE:  This function uses the Option subobject specified by the
//           vOrigW view and creates a clone of that Option
//           subobject in the vNewW view.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CloneOption( VIEW vNewWO BASED ON LOD TZWDLGSO,
             VIEW vNewW   BASED ON LOD TZWDLGSO,
             VIEW vOrigWO BASED ON LOD TZWDLGSO,
             VIEW vOrigW  BASED ON LOD TZWDLGSO,
             VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
             VIEW vSubtask )

   INTEGER nRC

   CreateMetaEntity( vSubtask, vNewWO, "Option", zPOS_AFTER )
   SetMatchingAttributesByName( vNewWO,  "Option",
                                 vOrigWO, "Option", zSET_NULL )

   // Clone each OptOpt
   FOR EACH vOrigWO.OptOpt
      SetViewToSubobject( vOrigWO, "OptOpt" )
      SetViewToSubobject( vNewWO, "OptOpt" )
      nRC = CloneOption( vNewWO, vNewW, vOrigWO, vOrigW, vSourceLPLR, vSubtask )
      ResetViewFromSubobject( vOrigWO )
      ResetViewFromSubobject( vNewWO )
      IF nRC = -1
         RETURN -1
      END
   END

   // Clone OptMap
   IF CheckExistenceOfEntity( vOrigWO, "OptMap" ) = zCURSOR_SET
      nRC = CloneOptMap( vSourceLPLR, vOrigW, vOrigWO, vNewW, vNewWO, vSubtask )
      IF nRC = -1
         RETURN -1
      END
   END

   // Include the OptAct
   IF CheckExistenceOfEntity( vOrigWO, "OptAct" ) = zCURSOR_SET
      IF vOrigWO.OptAct.Tag != ""
         SET CURSOR FIRST vNewW.Action
            WHERE  vNewW.Action.Tag = vOrigWO.OptAct.Tag
         IF RESULT >= 0
            IncludeSubobjectFromSubobject( vNewWO, "OptAct",
                                           vNewW, "Action", zPOS_AFTER )
         END
      END
   END

   RETURN 0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    CloneOptMap
//
// PURPOSE:  This function uses the OptMap subobject specified by the
//           vOrigW view and creates a clone of that OptMap
//           subobject in the vNewW view.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
CloneOptMap( VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
             VIEW vOrigW  BASED ON LOD TZWDLGSO,
             VIEW vOrigWO BASED ON LOD TZWDLGSO,
             VIEW vNewW   BASED ON LOD TZWDLGSO,
             VIEW vNewWO  BASED ON LOD TZWDLGSO,
             VIEW vSubtask )

   VIEW vLOD       BASED ON LOD TZZOLODO
   VIEW LOD_List   BASED ON LOD TZCMLPLO
   INTEGER       nRC
   STRING ( 64 ) szMsg

   CreateMetaEntity( vSubtask, vNewWO, "OptMap", zPOS_AFTER )
   SetMatchingAttributesByName( vNewWO, "OptMap",
                                vOrigWO, "OptMap", zSET_NULL )

   // Initialize vLOD for later DropMetaOI check.
   vLOD = 0

   // If there is an OptMapView entity, reinclude it afresh.  Also
   // position on correct LOD for LOD_Attribute include.

   IF CheckExistenceOfEntity( vOrigWO, "OptMapView" ) >= 0
      nRC = PositionOnVOR( vNewW, vOrigW, vSourceLPLR,
                           vOrigWO.OptMapView.Name, vSubtask )
      IF nRC >= 0

         // We are now positioned on the correct ViewObjRef.  Create
         // the relationship from OptMap to ViewObjRef.
         IncludeSubobjectFromSubobject( vNewWO, "OptMapView",
                                        vNewW, "ViewObjRef", zPOS_AFTER )
      ELSE
         RETURN -1
      END

      RetrieveViewForMetaList( vSubtask, LOD_List, zREFER_LOD_META )
      SET CURSOR FIRST LOD_List.W_MetaDef
         WHERE  LOD_List.W_MetaDef.Name = vNewW.LOD.Name
      ActivateMetaOI( vSubtask, vLOD, LOD_List, zREFER_LOD_META, zSINGLE )
      DropView( LOD_List )
   END

   // If there is an OptMapLOD_Attribute entity, reinclude it afresh.
   IF CheckExistenceOfEntity( vOrigWO, "OptMapLOD_Attribute" ) >= 0
      // We assume position on the correct LOD from the OptMapView
      SET CURSOR FIRST vLOD.LOD_Entity
          WHERE  vLOD.LOD_Entity.Name = vOrigWO.OptMapRelatedEntity.Name
      IF RESULT >= 0
      // Include Attribute and Context, if necessary.
         OptAttributeMapping( vSubtask, vSourceLPLR, vOrigWO, vNewWO, vLOD )
      ELSE
         szMsg ="LOD_Entity doesn't exist: " + vOrigWO.OptMapRelatedEntity.Name
         MessageSend( vSubtask, "WD00215", "Dialog Clone",
                      szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         RETURN -1
      END
   END

   IF vLOD != 0
      DropMetaOI( vSubtask, vLOD )
   END

   RETURN  0

END

/////////////////////////////////////////////////////////////////////////////
//
// ENTRY:    OptAttributeMapping
//
// PURPOSE:  This function does the includes of LOD_Attribute and
//           OptMapContext.
//
/////////////////////////////////////////////////////////////////////////////
LOCAL OPERATION
OptAttributeMapping( VIEW vSubtask,
                     VIEW vSourceLPLR BASED ON LOD TZCMLPLO,
                     VIEW vOrigWO BASED ON LOD TZWDLGSO,
                     VIEW vNewWO  BASED ON LOD TZWDLGSO,
                     VIEW vLOD   BASED ON LOD TZZOLODO )

   VIEW vDomain    BASED ON LOD TZDGSRCO
   VIEW DomainList BASED ON LOD TZCMLPLO
   STRING ( 64 ) szMsg

   // We assume position is already on the correct LOD_Entity.
   SET CURSOR FIRST vLOD.ER_Attribute WITHIN vLOD.LOD_Entity
       WHERE  vLOD.ER_Attribute.Name = vOrigWO.OptMapER_Attribute.Name
   IF RESULT >= 0
      IncludeSubobjectFromSubobject( vNewWO, "OptMapLOD_Attribute",
                                     vLOD,  "LOD_Attribute", zPOS_AFTER )

      // Now create relationship to Domain Context, if necessary.
      IF CheckExistenceOfEntity( vOrigWO, "OptMapContext" ) >= 0
         SET CURSOR FIRST vSourceLPLR.W_MetaType WHERE
                          vSourceLPLR.W_MetaType.Type = 2003
         SET CURSOR FIRST vSourceLPLR.W_MetaDef WHERE
                          vSourceLPLR.W_MetaDef.CPLR_ZKey = vOrigWO.OptMapER_Domain.ZKey
         RetrieveViewForMetaList( vSubtask, DomainList, zREFER_DOMAIN_META )
         SET CURSOR FIRST DomainList.W_MetaDef
            WHERE DomainList.W_MetaDef.Name = vSourceLPLR.W_MetaDef.Name
         IF RESULT >= 0
            ActivateMetaOI( vSubtask, vDomain, DomainList, zREFER_DOMAIN_META, zSINGLE )
            SET CURSOR FIRST vDomain.Context
               WHERE  vDomain.Context.Name =
                      vOrigWO.OptMapContext.Name
            IF RESULT >= 0
               IncludeSubobjectFromSubobject( vNewWO, "OptMapContext",
                                              vDomain, "Context", zPOS_AFTER )
            ELSE
               szMsg = "Context doesn't exist within Domain: " +
                      vOrigWO.OptMapContext.Name + ", " +
                      vSourceLPLR.W_MetaDef.Name
               MessageSend( vSubtask, "WD00216", "Dialog Clone",
                            szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
               RETURN -1
            END
            DropMetaOI( vSubtask, vDomain )
         ELSE
            szMsg = "Domain doesn't exist: " +
                   vSourceLPLR.W_MetaDef.Name
            MessageSend( vSubtask, "WD00217", "Dialog Clone",
                         szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            RETURN -1
         END
         DropView( DomainList )
      END
   ELSE
      szMsg = "ER_Attribute doesn't exist: " +
             vOrigWO.OptMapER_Attribute.Name
      MessageSend( vSubtask, "WD00218", "Dialog Clone",
                   szMsg, zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      RETURN -1
   END

   RETURN  0

END

/*************************************************************************************************
**
**    OPERATION: BuildWebCtrlPropOpts
**
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildWebCtrlPropOpts( VIEW vDialog BASED ON LOD TZWDLGSO,
                      VIEW vSourceView,
                      STRING ( 32 ) SourceEntityName,
                      STRING ( 32 ) SourceAttributeName )

   STRING ( 32 ) szExternalValue
   STRING ( 32 ) ControlContext
   INTEGER       CursorPos
   SHORT nRC

   // Build the list of WebControlPropertyOptions from the Domain table entries.
   // vDialog is a root view of the Dialog that will contain the list of WebControlPropertyOption entities.
   // vSourceView.SourceEntityName.SourceAttributeName identifies an attribute for the table Domain that contains
   // the Control Property options.
   FOR EACH vDialog.WebControlPropertyOption
      DELETE ENTITY vDialog.WebControlPropertyOption NONE
   END
   ControlContext = ""
   nRC = GetFirstTableEntryForAttribute( szExternalValue,
                                         vSourceView, SourceEntityName, SourceAttributeName,
                                         ControlContext, CursorPos )
   LOOP WHILE nRC >= 0
      IF szExternalValue != ""
         //CREATE ENTITY vDialog.WebControlPropertyOption
         CreateMetaEntity( vDialog, vDialog, "WebControlPropertyOption", zPOS_AFTER )
         vDialog.WebControlPropertyOption.Name = szExternalValue
      END

      nRC = GetNextTableEntryForAttribute( szExternalValue,
                                           vSourceView, SourceEntityName, SourceAttributeName,
                                           ControlContext, CursorPos )
   END

END

/*************************************************************************************************
**
**    OPERATION: BuildMapTypeList
**
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildMapTypeList( VIEW vDialog BASED ON LOD TZWDLGSO,
                  VIEW vSourceView,
                  STRING ( 32 ) SourceEntityName,
                  STRING ( 32 ) SourceAttributeName )

   STRING ( 32 ) szExternalValue
   STRING ( 32 ) ControlContext
   INTEGER       CursorPos
   SHORT nRC

   // Build the combobox list of MapType values from the Domain table entries.
   // vDialog is a root view of the Dialog that will contain the list of values in vDialog.ComboBoxEntry.
   // vSourceView.SourceEntityName.SourceAttributeName identifies an attribute for the table Domain that contains
   // the Control Property options.
   FOR EACH vDialog.ComboBoxEntry
      DELETE ENTITY vDialog.ComboBoxEntry NONE
   END
   ControlContext = ""
   nRC = GetFirstTableEntryForAttribute( szExternalValue,
                                         vSourceView, SourceEntityName, SourceAttributeName,
                                         ControlContext, CursorPos )
   LOOP WHILE nRC >= 0
      IF szExternalValue != ""
         //CREATE ENTITY vDialog.WebControlPropertyOption
         CREATE ENTITY vDialog.ComboBoxEntry
         vDialog.ComboBoxEntry.Name = szExternalValue
      END

      nRC = GetNextTableEntryForAttribute( szExternalValue,
                                           vSourceView, SourceEntityName, SourceAttributeName,
                                           ControlContext, CursorPos )
   END

END

/*************************************************************************************************
**
**    OPERATION: BuildCtrlMapByTagList
**
*************************************************************************************************/
TRANSFORMATION OPERATION
BuildCtrlMapByTagList( VIEW vDialogC BASED ON LOD TZWDLGSO )

   VIEW vDialogT BASED ON LOD TZWDLGSO
   STRING ( 32 ) ControlContext
   INTEGER       CursorPos
   SHORT nRC

   // Build the CtrlMap select list for all entries with a Tag name.
   CreateViewFromView( vDialogT, vDialogC )
   FOR EACH vDialogT.CtrlMap
      IF vDialogT.CtrlMap.Tag != ""
         INCLUDE vDialogC.ListCtrlMap FROM vDialogT.CtrlMap
      END
   END
   DropView( vDialogT )

END

/************************************************************************
   ENTRY:    DialogMigrate
   PURPOSE:  Migrate a Dialog from one LPLR to another.  Most of the code
             for this routine is the code in TZWDLGSO, which is also used
             for cloning windows.
***********************************************************************/
TRANSFORMATION OPERATION
DialogMigrate( VIEW          NewDialog  BASED ON LOD TZWDLGSO,
               STRING ( 32 ) DialogName,
               VIEW          SourceLPLR BASED ON LOD TZCMLPLO,
               VIEW          vSubtask )

   VIEW SourceLPLR2 BASED ON LOD TZCMLPLO
   VIEW CurrentLPLR BASED ON LOD TZCMLPLO
   VIEW TZDLG_List  BASED ON LOD TZCMLPLO
   VIEW OldDialog   BASED ON LOD TZWDLGSO

   STRING ( 513 ) SourceFileName            // zMAX_FILESPEC_LTH+1
   STRING ( 32 )  SourceName
   INTEGER        nRC
   STRING ( 9 )   ExtensionName
   STRING ( 513 ) SourceFileName1           // zMAX_FILESPEC_LTH+1
   STRING ( 513 ) SourceFileName2           // zMAX_FILESPEC_LTH+1
   STRING ( 32 )  MetaName
   STRING ( 1 )   NewDialogFlag

   // Activate existing source meta OldDialog
   SourceFileName = SourceLPLR.LPLR.MetaSrcDir + "\" + DialogName + ".PWD"

   ActivateOI_FromFile( OldDialog, "TZWDLGSO", SourceLPLR, SourceFileName, 8192 )
   // 8192 is zIGNORE_ATTRIB_ERRORS
   NAME VIEW OldDialog "OldDialog"

   // Make sure that TZDLG_List exists.
   GET VIEW TZDLG_List NAMED "TZDLG_List"
   IF RESULT < 0
      RetrieveViewForMetaList( vSubtask, TZDLG_List, zREFER_DIALOG_META )
      NAME VIEW TZDLG_List "TZDLG_List"
   END

   //ActivateEmptyMetaOI( vSubtask, NewDialog, zSOURCE_DIALOG_META, zSINGLE )
   //NAME VIEW NewDialog "NewDialog"

   IF NewDialog.Dialog DOES NOT EXIST
      CreateMetaEntity( vSubtask, NewDialog, "Dialog", zPOS_AFTER )
      NewDialog.Dialog.Tag          = OldDialog.Dialog.Tag
      NewDialog.Dialog.LastSyncDate = OldDialog.Dialog.LastSyncDate
      NewDialog.Dialog.Desc         = OldDialog.Dialog.Desc
      NewDialog.Dialog.DLL_Name     = OldDialog.Dialog.DLL_Name
      NewDialogFlag = "Y"
   END

   CreateViewFromViewForTask( SourceLPLR2, SourceLPLR, 0 )

   // Copy each Registered View Name that is used by the Dialog.
   FOR EACH OldDialog.ViewObjRef
      // The following routine not only positions on the VOR but also
      // includes it, if it doesn't already exist.
      PositionOnVOR( NewDialog, OldDialog,
                     SourceLPLR, OldDialog.ViewObjRef.Name, vSubtask )
   END

   // Execute the Clone Window code for each window that doesn't exist in the new dialog.
   FOR EACH OldDialog.Window
      SET CURSOR FIRST NewDialog.Window WHERE NewDialog.Window.Tag = OldDialog.Window.Tag
      IF RESULT < zCURSOR_SET
         nRC = CloneWindow( NewDialog, OldDialog, SourceLPLR, vSubtask )
         IF nRC = -1
            DropObjectInstance( OldDialog )
            RETURN -1
         END
      END
   END

   // Execute the Merge Web Menus for each Window. This is necessary because it is very possible that the Window
   // defining the Menus did not exist when a Window referencing the Menus was cloned.
   FOR EACH OldDialog.Window
      SET CURSOR FIRST NewDialog.Window WHERE NewDialog.Window.Tag = OldDialog.Window.Tag
      IF RESULT >= zCURSOR_SET
         MergeWebMenus( NewDialog, OldDialog, vSubtask )
      END
   END

   // Now include the Primary Window.
   IF OldDialog.DfltWnd EXISTS
      IF NewDialog.DfltWnd DOES NOT EXIST
         SET CURSOR FIRST NewDialog.Window WHERE NewDialog.Window.Tag = OldDialog.DfltWnd.Tag
         INCLUDE NewDialog.DfltWnd FROM NewDialog.Window
      END
   END

   // Copy Operations and Source File
   // If the Dialog was created here, we'll simply copy over the SourceFile/Operation prototypes and files.
   // If the Dialog is being merged, we'll copy over SourceFile/Operation prototypes and files not marked to be be saved.
   /*IF NewDialogFlag = "Y"
      // This is a new Dialog, copy over everything.
      FOR EACH OldDialog.SourceFile
         ExtensionName = OldDialog.SourceFile.Extension
         MetaName = OldDialog.SourceFile.Name
         CreateMetaEntity( vSubtask, NewDialog, "SourceFile", zPOS_AFTER )
         SetMatchingAttributesByName( NewDialog, "SourceFile", OldDialog, "SourceFile", zSET_NULL )
         FOR EACH OldDialog.Operation
            CreateMetaEntity( vSubtask, NewDialog, "Operation", zPOS_AFTER )
            SetMatchingAttributesByName( NewDialog, "Operation", OldDialog, "Operation", zSET_NULL )
            FOR EACH OldDialog.Parameter
               IF OldDialog.Parameter.ShortDesc = ""
                  OldDialog.Parameter.ShortDesc = "Subtask"
               END
               CreateMetaEntity( vSubtask, NewDialog, "Parameter", zPOS_AFTER )
               SetMatchingAttributesByName( NewDialog, "Parameter", OldDialog, "Parameter", zSET_NULL )
            END
         END
         // Copy the .C file or the .VML file, if it exists, from the source directory to the
         // target directory.
         // Note that if it isn't there (it wasn't created in the source LPLR), we're going to
         // just ignore it; we're not going to return an error message.
         RetrieveViewForMetaList( vSubtask, CurrentLPLR, zSOURCE_ERD_META ) // Get a view for directory info.
         ResetViewFromSubobject( CurrentLPLR ) // Get visibility to root.
         IF ExtensionName = "C"
            SourceName = MetaName + ".C"
         ELSE
            SourceName = MetaName + ".VML"
         END
         SourceFileName1 = SourceLPLR.LPLR.PgmSrcDir + "\" + SourceName
         SourceFileName2 = CurrentLPLR.LPLR.PgmSrcDir + "\" + SourceName
         SysCopyFile( vSubtask, SourceFileName1, SourceFileName2, TRUE )
         DropView( CurrentLPLR )
      END
   ELSE
      // This is an existing Dialog, copy over Operations not flagged to be saved.
      FOR EACH OldDialog.SourceFile
         //SET CURSOR FIRST ???
      END
   END*/

   // Create the subtask name and set cursor at beginning of object, both for the
   // correct building of the XWD in CommitMetaOI.
   NAME VIEW SourceLPLR "TZCM_DialogSubtask"
   SET CURSOR FIRST NewDialog.Dialog
   CommitMetaOI( vSubtask, NewDialog, 11 )
   DropObjectInstance( OldDialog )
   RETURN 0

END

/*************************************************************************************************
**    
**    OPERATION: ConvertListBoxToGrid
**    
*************************************************************************************************/
TRANSFORMATION OPERATION
ConvertListBoxToGrid( VIEW vControl BASED ON LOD TZWDLGSO )

   VIEW vPE       BASED ON LOD TZPESRCO
   VIEW vControl2 BASED ON LOD TZWDLGSO
   STRING ( 50 ) szGridName
   INTEGER       CurrentPOSX
   INTEGER       Count

   // Convert the current control (if it is a ListBox) to a grid to ease conversion of Windows dialogs to web dialogs.
   
   // Make sure this is a ListBox.
   IF vControl.ControlDef.Tag != "ListBox"
      MessageSend( vControl, "WD00204", "Dialog Clone",
                   "The current control is not a List Box.", zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
      RETURN -1
   END
   
   // Change the ControlDef for the main control.
   GetViewByName( vPE, "TZPESRCO", vControl, zLEVEL_TASK )
   SET CURSOR FIRST vPE.ControlDef WHERE vPE.ControlDef.Tag = "Grid"
   EXCLUDE vControl.ControlDef 
   INCLUDE vControl.ControlDef FROM vPE.ControlDef 
   szGridName = vControl.Control.Tag + "Grid"
   vControl.Control.Tag = szGridName
   
   // Add a select subcontrol and modify the other subcontrols, if there is a subcontrol.
   SET CURSOR FIRST vControl.CtrlCtrl
   IF RESULT >= zCURSOR_SET
      SetViewToSubobject( vControl, "CtrlCtrl" )    // Step down to CtrlCtrl
   
      // Add a CheckBox control as first control in grid. Map it the same as the first field, so there isn't an error on update.
      CreateViewFromView( vControl2, vControl )     // vControl2 is pointing to first regular Control.
      CreateMetaEntity( vControl, vControl, "Control", zPOS_BEFORE )
      vControl.Control.Tag = szGridName + "Select"
      vControl.Control.Text = "Sel"
      SET CURSOR FIRST vPE.ControlDef WHERE vPE.ControlDef.Tag = "CheckBox"
      INCLUDE vControl.ControlDef FROM vPE.ControlDef 
      vControl.Control.PSDLG_X = 0
      vControl.Control.PSDLG_Y = 0
      vControl.Control.SZDLG_X = 15
      vControl.Control.SZDLG_Y = 15
      CurrentPOSX = 15
      CreateMetaEntity( vControl, vControl, "CtrlMap", zPOS_BEFORE )
      INCLUDE vControl.CtrlMapLOD_Attribute FROM vControl2.CtrlMapLOD_Attribute 
      INCLUDE vControl.CtrlMapView          FROM vControl2.CtrlMapView 
      DropView( vControl2 )
      
      // Change the ControlDef for each subcontrol.
      SET CURSOR FIRST vPE.ControlDef WHERE vPE.ControlDef.Tag = "GridEditCtl"
      Count = 0
      FOR EACH vControl.Control 
         Count = Count + 1
         IF Count > 1    // We skip the first record we just created.
            EXCLUDE vControl.ControlDef 
            INCLUDE vControl.ControlDef FROM vPE.ControlDef 
            vControl.Control.PSDLG_X = CurrentPOSX                  // Position is from determined from last iteration.
            CurrentPOSX = CurrentPOSX + vControl.Control.SZDLG_X    // Increment position past length of Control.
         END
      END
       
      ResetViewFromSubobject( vControl )       // Step back up to Grid Control
   END

END
/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_CrteCtrlsRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_CrteCtrlsRecurs( VIEW vDialog      BASED ON LOD TZWDLGSO,
                        VIEW vGroupParent BASED ON LOD TZWDLGSO,
                        VIEW vDialogRoot  BASED ON LOD TZWDLGSO,
                        INTEGER           lFile,
                        STRING ( 10000 )  szWriteBuffer,
                        STRING ( 100 )    szIndent,
                        INTEGER           lTableRowCnt,
                        STRING ( 1 )      szNoPositioning,
                        INTEGER           lOffsetX,
                        INTEGER           lOffsetY )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vList    BASED ON LOD TZWDLGSO  // identifies attribute mapping for list entries
   VIEW vEntity  BASED ON LOD TZWDLGSO  // identifies entity mapping for list entries
   VIEW vScope   BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 64 )  szViewName
   STRING ( 32 )  szMapEntityName
   STRING ( 32 )  szMapAttributeName
   STRING ( 32 )  szActionName
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szCtrlCtrlTag
   STRING ( 50 )  szControlType
   STRING ( 50 )  szCtrlCtrlType
   STRING ( 32 )  szListCtrlTag
   STRING ( 100 ) szIndentGroup
   STRING ( 100 ) szIndentHold
   STRING ( 100 ) szPosition
   STRING ( 10 )  szColCount
   STRING ( 100 ) szSort
   STRING ( 256 ) szAbsoluteStyle
   STRING ( 20 )  szAbsoluteWidth
   STRING ( 256 ) szRelStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 50 )  ListBoxDoubleClickAction
   STRING ( 16 )  szTabIndex
   STRING ( 32 )  szSize
   STRING ( 16 )  szWidth
   STRING ( 16 )  szHeight
   STRING ( 1 )   szBorder
   STRING ( 32 )  szRadioGroupName
   STRING ( 256 ) szWidget
   STRING ( 256 ) szText
   STRING ( 64 )  szTerm
   STRING ( 20 )  szJustify
   STRING ( 50 )  szWebCtrlType
   STRING ( 35 )  szControlTag
   STRING ( 85 )  szHTMLCtrlID
   STRING ( 50 )  szGridView
   STRING ( 50 )  szGridOrigViewName
   STRING ( 2 )   szSuffix
   STRING ( 10 )  szMaxStringLength
   STRING ( 200 ) szItemTableHeader
   STRING ( 50 )  szParentWebType
   STRING ( 1 )   szRepeatingGroupFlag
   STRING ( 1 )   szSurveyGroupFlag
   STRING ( 1 )   szGridGroupingFlag
   STRING ( 1 )   szIncludeFileFlag
   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   STRING ( 1 )   szSpanFlag
   STRING ( 1 )   szDivFlag
   STRING ( 1 )   szToggleFlag
   STRING ( 1 )   sziFrameFlag
   STRING ( 1 )   szDashboardFlag
   STRING ( 1 )   szScrollableFlag
   STRING ( 1 )   szScrollingTable
   STRING ( 1 )   szFilterTable
   STRING ( 1 )   szFileTransferFlag
   STRING ( 1 )   szGroupIsTable
   STRING ( 1 )   szreCAPTCHAFlag
   STRING ( 1 )   szTinyMCEFlag
   STRING ( 1 )   szWCP_Edit
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szWCP_Multiline
   STRING ( 1 )   szWCP_EmailAddress
   STRING ( 1 )   szWCP_Hyperlink
   STRING ( 1 )   szWCP_AbsoluteWidth
   STRING ( 1 )   szWCP_FirstOccurrenceOnly
   STRING ( 1 )   szFirstTimeThrough
   STRING ( 1 )   szGridInGroup
   STRING ( 1 )   szTableExport
   STRING ( 10 )  szDisabled
   STRING ( 100 ) szStyle
   DECIMAL        dDLUnits
   INTEGER        LastY_Pos
   INTEGER        LastY_Height
   INTEGER        LastY_PosGroup
   INTEGER        LastX_Pos
   INTEGER        LastX_Width
   INTEGER        MaxY_HeightForLine
   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   INTEGER        nbsp_count
   INTEGER        Size
   INTEGER        Width
   INTEGER        WidthPercent
   INTEGER        lSubtype
   INTEGER        lSubtypeX
   INTEGER        lSort
   INTEGER        lHeader
   INTEGER        lColCnt
   INTEGER        lCol
   INTEGER        lPushBtn
   INTEGER        lEditBox
   INTEGER        lStyleX
   INTEGER        lTemp
   INTEGER        lMaxStringLength
   SHORT          bResetToPlaceHolder
   SHORT          nRC

   PIX_PER_DU( vDialog, dDLUnits )

   // Generate the code for creating HTML statements for controls.
   // A major issue is determining which Controls are on the same row, as they need table entries
   // around them. Note that Groups must be handled differently from other Controls.

   // Make sure the Controls are ordered by row and column.

   szIndentHold = szIndent

   // These variables are for if we are not using absolute positioning.
   LastY_Pos      = 0
   LastY_Height   = 0
   LastY_PosGroup = 0
   LastX_Pos      = 0
   LastX_Width    = 0
   MaxY_HeightForLine = 0
   szFirstTimeThrough = "Y"

   // Process each Control
   FOR EACH vDialog.Control

      //zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
      //zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

      // If szNoPositioning = "Y" then we are not using absolute positioning.  We need to
      // create some divs or spans to make this look similar to what's in the painter.
      IF  szNoPositioning = "Y"

         // Need to reset the x positions
         IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND szFirstTimeThrough != "Y"
         //IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND LastY_Pos != 0
            szWriteBuffer = "</div>  <!-- End of a new line -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            LastX_Pos       = 0
            LastX_Width     = 0

            // If we are using relative positioning, then we have automatically put
            // float:left on any groupboxes.  Because of this, I think if we are onto
            // a new row, then we should put a "clear" div in.
            szWriteBuffer = "<div style=^clear:both;^></div>  <!-- Moving to a new line, so do a clear -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

         // We may have controls on the same line with varying heights.  When determining if there is
         // blank space in between these lines, make sure we are comparing the highest control.
         Y_Pos = LastY_Pos + LastY_Height
         IF  Y_Pos > MaxY_HeightForLine
            MaxY_HeightForLine = Y_Pos
         END

         // Determine if there is blank space in between the y coordinates of the last
         // control and the current control.  If so, then we need to put in a div as a spacer control.
         IF  Y_Pos < vDialog.Control.PSDLG_Y

               //TraceLineS("****  SPACE BETWEEN Ys *** ", vDialog.Control.Tag )
               //Y_Size = ( vDialog.Control.PSDLG_Y - ( LastY_Pos + LastY_Height ) ) * dDLUnits + lOffsetY
               Y_Size = ( vDialog.Control.PSDLG_Y - ( MaxY_HeightForLine ) ) * dDLUnits + lOffsetY
               X_Size = 100
               zIntegerToString( szHeight, 16, Y_Size )
               zIntegerToString( szWidth, 16, X_Size )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = " <!-- This is added as a line spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;^></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         // There should be a <div> surrounding each line.
         IF ( LastY_Pos < vDialog.Control.PSDLG_Y ) OR szFirstTimeThrough = "Y"

               LastY_Pos    = vDialog.Control.PSDLG_Y

               // KJS 08/01/08 - Seems as though I need to give this div a width, otherwise,
               // it many times places things on different lines.
               //KELLY8
               CreateViewFromView( vDialog2, vDialog )

               X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
               SET CURSOR  NEXT vDialog2.Control
               // Loop through all the controls that are at the same y pos and see how wide they
               // are.
               LOOP  WHILE RESULT >= zCURSOR_SET AND LastY_Pos = vDialog2.Control.PSDLG_Y

                  //X_Size = X_Size + vDialog2.Control.SZDLG_X
                  X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
                  SET CURSOR  NEXT vDialog2.Control

               END

               DropView(vDialog2)

               X_Size = X_Size * dDLUnits + lOffsetY
               // KJS 09/03/08 - does this help??
               X_Size = X_Size + 1
               zIntegerToString( szWidth, 16, X_Size )

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<div style=^width:" + szWidth + "px;^>  <!-- Beginning of a new line -->"
               szWriteBuffer = "<div>  <!-- Beginning of a new line -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         X_Pos = LastX_Pos + LastX_Width
         // If there is blank space to the left of a control put in a spacer control.
         IF X_Pos < vDialog.Control.PSDLG_X

            //TraceLineS("****  SPACE BETWEEN Xs *** ", vDialog.Control.Tag )
            X_Size = ( vDialog.Control.PSDLG_X  - ( LastX_Pos + LastX_Width ) ) * dDLUnits + lOffsetX
            Y_Size = vDialog.Control.SZDLG_Y * dDLUnits + lOffsetY
            zIntegerToString( szHeight, 16, Y_Size )
            zIntegerToString( szWidth, 16, X_Size )

            // KJS 11/19/08 - Currently we are placing a span with spacers in between controls that have space between them.
            // If there is a div control (or grid or tab) in a row and there is space before it, then we should really
            // put a floating div there instead of a span.  10/07/09 - Added RadioGrp as well.
            IF vDialog.ControlDef.Tag = "GroupBox" OR vDialog.ControlDef.Tag = "Grid" OR
               vDialog.ControlDef.Tag = "Tab" OR vDialog.ControlDef.Tag = "RadioGrp"
               //szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               // Taking out the height for this spacer since in IE this causes some issue.
               szWriteBuffer = "<div style=^height:1px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               nbsp_count = X_Size / 5
               //TraceLineI("**** nbsp_count ", nbsp_count )

               IF  nbsp_count > 0
                  szWriteBuffer = "<span style=^height:" + szHeight + "px;^>"
                  LOOP WHILE nbsp_count > 0
                      nbsp_count = nbsp_count - 1
                      szWriteBuffer = szWriteBuffer + "&nbsp"
                  END
                  szWriteBuffer = szWriteBuffer + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
            END

         END

         LastY_Pos    = vDialog.Control.PSDLG_Y
         LastY_Height = vDialog.Control.SZDLG_Y
         LastX_Pos    = vDialog.Control.PSDLG_X
         LastX_Width  = vDialog.Control.SZDLG_X
      END

      szFirstTimeThrough = ""
      szControlType = vDialog.ControlDef.Tag
      szWebCtrlType = vDialog.Control.WebCtrlType
      szIndent = szIndentHold + "   "
      szCtrlTag = vDialog.Control.Tag

      szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "

      IF szControlType = "GroupBox"

         // Do I need to check if this is a groupbox and we are not using absolute positioning, then I want to
         // check if there are other groupboxes at this same PSDLG_Y.  If so, then these groups would need to
         // have a float:left applied to them.
         // Would I only want to do this once for the row?
         // Or, do I want to put a float on every div created and then create a <div style="clear:both;"</div> after
         // every row?
         //IF  szNoPositioning = "Y" AND szCheckedRowForGroups         //END

         // InitializeRepeatingGroup for GroupBox

         // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
         // as a table and try and position what is in this group box as a table.
         szGroupIsTable = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
         IF RESULT >= zCURSOR_SET
            szGroupIsTable = "Y"
         END

         // There are times when the user wants to paint a div that has no height so it will grow with the
         // data within it.  This flags the div will have no height.
         szNoHeightFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
         IF RESULT >= zCURSOR_SET
            szNoHeightFlag = "Y"
         END

         // There are times when the user wants to paint a div that has no width so it will grow with the
         // data within it.  This flags the div will have no width.
         szNoWidthFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
         IF RESULT >= zCURSOR_SET
            szNoWidthFlag = "Y"
         END

         // KJS 05/01/09
         // When the user paints a grid, they may not want this grid (and any leading header text) to show
         // during run-time if there is no data for the grid.  If the user puts this grid and any other
         // controls in a groupbox with the control property of "Table Grouping", we will not display anything
         // within this groupbox if the grid has no data during run-time.
         szGridGroupingFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Grid Grouping"
         IF RESULT >= zCURSOR_SET
            szGridGroupingFlag = "Y"
            // This div should not have any height or width.
            szNoHeightFlag = "Y"
            szNoWidthFlag = "Y"
         END

         // Set flag for RepeatingGroup either from old szWebCtrlType or new WebControlProperty.
         // Repeating Group is used for the situation where a Group of controls is to be repeated for each controlling
         // entity, very much as is done in Reports. An example in Zencas is the page of student pictures and basic
         // information for either a class or an advisor.
         IF szWebCtrlType = "RepeatingGroup"
            szRepeatingGroupFlag = "Y"
         ELSE
            szRepeatingGroupFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Repeating Group"
            IF RESULT >= zCURSOR_SET
               szRepeatingGroupFlag = "Y"
            END
         END

         // Set flag for Survey Group, which is a repeating group for survey questions.
         szSurveyGroupFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Survey Group"
         IF RESULT >= zCURSOR_SET
            szSurveyGroupFlag = "Y"
         END

         // Set flag for FileTransfer, as all GroupBox and subcontrol processing is skipped for that case.
         szFileTransferFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "File Transfer to Server"
         IF RESULT >= zCURSOR_SET
            szFileTransferFlag = "Y"
         END

         szIncludeFileFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Include File"
         IF RESULT >= zCURSOR_SET
            szIncludeFileFlag = "Y"
         END

         // Wondering if somehow this should be different in the sense that a group box can only be
         // either div, include file, iframe, table etc. whereas the "No Height" etc. can go with
         // div but only div, "Include File" etc.  How would a user know?
         sziFrameFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "iFrame"
         IF RESULT >= zCURSOR_SET
            sziFrameFlag = "Y"
         END

         szDashboardFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Dashboard"
         IF RESULT >= zCURSOR_SET
            szDashboardFlag = "Y"
         END

         szreCAPTCHAFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "reCAPTCHA"
         IF RESULT >= zCURSOR_SET
            szreCAPTCHAFlag = "Y"
         END

         szToggleFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Show/Hide Toggle"
         IF RESULT >= zCURSOR_SET
            szToggleFlag = "Y"
         END

         // Set Group flags either from old szWebCtrlType or new WebControlProperty.
         IF szWebCtrlType = "Scrollable"
            szScrollableFlag = "Y"
         ELSE
            szScrollableFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrollable"
            IF RESULT >= zCURSOR_SET
               szScrollableFlag = "Y"
            END
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET
               szDivFlag = "Y"
            END
         END

      END

      // Initialize the szAbsoluteStyle variable with X and Y values.
      IF  szNoPositioning = "Y"
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szAbsoluteStyle = ""
         ELSE
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
            szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
         ELSE
         IF szControlType = "GroupBox" AND szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
            szAbsoluteStyle = "style=^height:" + szHeight + "px;^"
         ELSE
            CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
         END
         END
         END
      ELSE
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
      END

      szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      IF szControlType = "GroupBox" AND szGroupIsTable = "Y"

         X_Size = vDialog.Control.SZDLG_X
         Y_Size = vDialog.Control.SZDLG_Y

         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         CreateViewFromView( vGroupParent, vDialog )
         // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndentGroup = szIndent
         GenJSP_CrteGroupTable( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, lTableRowCnt, szNoPositioning )
         ResetViewFromSubobject( vDialog )
         DropView( vGroupParent )
         vGroupParent = 0
      END

      // Inside this div there should be a grid control.  Look for the first grid control and check it's mapping.
      // During run-time, we will not display anything within this groupbox if the grid has no data.  If there is
      // other items in the group box don't worry about them.  Should we give an error message if this group box
      // has no grid?
      IF szControlType = "GroupBox" AND szGridGroupingFlag = "Y"

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szViewName = ""
         szMapEntityName = ""

         SetViewToSubobject( vDialog, "CtrlCtrl" )
         FOR EACH vDialog.Control
            IF vDialog.ControlDef.Tag = "Grid" AND szViewName = ""
               // Should I get grid mapping here?
               szViewName = vDialog.CtrlMapView.Name
               szMapEntityName = vDialog.CtrlMapLOD_Entity.Name
            END
         END
         ResetViewFromSubobject( vDialog )

         // If there was a grid with mapping, use these to check the existence of the entity and paint what's in the groupbox
         // if the entity exists.
         IF szViewName != "" AND szMapEntityName != ""

            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + szViewName + ".GetView( strSessionId, ^" + szViewName + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + szViewName + ".CheckExistenceOfEntity( strSessionId, ^" + szMapEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

             // Generate everything within this groupbox.
            CreateViewFromView( vGroupParent, vDialog )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0


            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            // Do I drop the view here?
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
            // Should I give a message here that there is no grid within this groupbox or
            // should I just ignore it?
         END
            szWriteBuffer = "</div>  <!--  " + vDialog.Control.Tag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "" AND szFileTransferFlag = "" AND szGroupIsTable = "" AND
         szGridGroupingFlag = "" AND szSurveyGroupFlag = ""


         // Is this clear even working???!!!
         IF szWebCtrlType = "Clear"
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.PSDLG_X * dDLUnits + lOffsetX  // borrow these for a second
            Y_Size = vDialog.Control.PSDLG_Y * dDLUnits + lOffsetY
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, X_Size, Y_Size )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szSpanFlag = "Y"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<span" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<span" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szWebCtrlType = "DivScroll"
            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div "+ szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF  szDashboardFlag = "Y"

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

//*******************************  DASHBOARD CODE   ******************************************************

            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardSource = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardMore = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szFunction = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDisplayFrame = ^^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardMax = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardCnt = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxColumns = 3; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxInCol = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iNbrInCol = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColStartNbr = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColEndNbr = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iRemainder = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColNbr = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iSortOrder = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int i = 0; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   nRC = vKZXMLPGO.GetView( strSessionId, ^KZXMLPGO^, vAppSubtask ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   vKZXMLPGO.SetAttribute( strSessionId, ^Session^, ^DashboardFrameCount^, 1 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( nRC > 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^DashboardFrameUser^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //Order by Sort Order "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //nRC = " + vDialog.CtrlMapView.Name + ".OrderEntityForView( strSessionId, " + vDialog.CtrlMapView.Name + ", ^DashboardFrameUser^, ^PresentationSortOrder A^); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //" + vDialog.CtrlMapView.Name + ".TraceLine(^*** nRC after OrderEntityForView *** ^, nRC ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".SetCursorFirst( strSessionId, ^DashboardFrameUser^, ^^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         while ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            szDisplayFrame = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrameUser^, ^ActiveOnCurrentDashboard^, ^^, 254 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( szDisplayFrame.equals( ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // When we've reached the max number of columns then "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // start at column one again.   "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if (iColNbr > iMaxColumns ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iColNbr = 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // Set what column this frame will be positioned in. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".SetAttribute( strSessionId, ^DashboardFrameUser^, ^wColumnNbr^, iColNbr ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iDashboardMax++; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColNbr++; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            nRC =  " + vDialog.CtrlMapView.Name + ".SetCursorNext( strSessionId, ^DashboardFrameUser^, ^^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         iRemainder = iDashboardMax % iMaxColumns;  // mod function  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( iRemainder == 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns) + 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Loop through each frame that is in the first column, then those in the "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // second column etc.        "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         for  ( i=1; i <= iMaxColumns; i++ ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColNbr = i; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // If we are onto a new dashboard column, put the closing tag on the previous column "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( i != 1 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  <div id=^column-<%=iColNbr%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // These variables are used in the Expand function. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColStartNbr = iDashboardCnt; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColEndNbr = (iColStartNbr + iMaxInCol) - 1; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if (iColEndNbr > iDashboardMax ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColEndNbr = iDashboardMax; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name + ".SetCursorFirst( strSessionId, ^DashboardFrameUser^, ^wColumnNbr^, i, ^^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               szDisplayFrame = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrameUser^, ^ActiveOnCurrentDashboard^, ^^, 254 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iSortOrder = " + vDialog.CtrlMapView.Name + ".GetInteger( strSessionId, ^DashboardFrameUser^, ^PresentationSortOrder^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( iSortOrder <= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iSortOrder = iDashboardCnt; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  " + vDialog.CtrlMapView.Name + ".TraceLine(^*** There is no sort order *** ^, iSortOrder ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".SetAttribute( strSessionId, ^DashboardFrameUser^, ^wFrameNbr^, iDashboardCnt ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               //" + vDialog.CtrlMapView.Name + ".TraceLine(^*** Dashboard Column *** ^, iColNbr ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( szDisplayFrame.equals( ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardSource = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrame^, ^DashboardDisplayURL^, ^^, 254 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardMore = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^DashboardFrame^, ^ExpandedDisplayURL^, ^^, 254 ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szFunction = ^Expand(this, ^ + iDashboardCnt + ^, ^ + iColNbr + ^, ^ + iColStartNbr + ^, ^ + iColEndNbr + ^)^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  //" + vDialog.CtrlMapView.Name + ".TraceLine(^*** Expand Function *** ^, szFunction );         "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     <div id=^rpt-display-<%=iDashboardCnt%>^ class=^region-display^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div class=^region-header^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-title-<%=iDashboardCnt%>^ class=^region-header-title^ >A Report <%=iSortOrder%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-expand-<%=iDashboardCnt%>^ class=^region-header-title-expand^ title=^Expand^ onclick=^<%=szFunction%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-open-<%=iDashboardCnt%>^ class=^region-header-title-open^ title=^More Detail...^ onclick=^OpenFrame(this,'<%=szDashboardMore%>' );^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div id=^rpt-display-content-<%=iDashboardCnt%>^ class=^region-body-content^ > "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          <iframe src=^<%=szDashboardSource%>^ width=^100%^ height=^100%^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          </iframe> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "    "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                   iDashboardCnt++; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               } // if ( szDisplayFrame.equals( ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               nRC =  " + vDialog.CtrlMapView.Name + ".SetCursorNext( strSessionId, ^DashboardFrameUser^, ^wColumnNbr^, i, ^^ ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } // While "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            //vComboBox2.DropView( strSessionId ); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }  // For each i "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Now close the last column div. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = " "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      } // if CheckExistenceOfEntity "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

//*****************************************  END OF DASHBOARD   ********************************************************

            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
         IF  sziFrameFlag = "Y"

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<iframe " + szAbsoluteStyle + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ src=^" + vDialog.Control.WebFileName + "^>  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<iframe class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "</iframe>  <!-- " + vDialog.Control.Tag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
         // Div is the default group for now so we don't have to check IF szDivFlag = "Y" for the moment.
         //IF szDivFlag = "Y"

            // Add Scrollable if requested.
            IF szScrollableFlag = "Y"
               zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            END

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // If this is a div we want to toggle
            IF szToggleFlag = "Y"
               //szWriteBuffer = "<div style=^float:left;^>  <!-- Div surrounding toggle --> "
               // KJS 11/05/15 - Jeff asked for float to be changed to clear.
               szWriteBuffer = "<div style=^clear:left;^>  <!-- Div surrounding toggle --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^height:20px;^><a href=^#^ onclick=^animatedcollapse.toggle('" + szCtrlTag + "');^ style=^^>" + vDialog.Control.Text + "</a></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END


            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Should we put reCAPTCHA code here???  Or should I have done this up above?
            IF szreCAPTCHAFlag = "Y"
               szWriteBuffer = "<script type=^text/javascript^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   src=^https://api-secure.recaptcha.net/challenge?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <iframe src=^https://api-secure.recaptcha.net/noscript?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       height=^300^ width=^500^ frameborder=^0^></iframe><br>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <textarea name=^recaptcha_challenge_field^ rows=^3^ cols=^40^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   </textarea>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <input type=^hidden^ name=^recaptcha_response_field^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       value=^manual_challenge^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            ELSE

            // KJS 09/19/08 - Adding the ability to include a file inside a div.  I am assuming that if there
            // is an include file, there will be nothing else inside the div so we dont' need to call
            // GenJSP_CrteCtrlsRecurs.
            IF szIncludeFileFlag = "Y"

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%@include file=^" + vDialog.Control.WebFileName + "^ %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            ELSE
               // Only put this in if there was no web type.  We might want to change this later.
               IF szDivFlag = ""
                  IF vDialog.Control.Text != ""
                     szWriteBuffer = "<div " + szHTMLCtrlID + ">" + vDialog.Control.Text + "</div>"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
               END

               IF szToggleFlag = "Y"
                  szWriteBuffer = "<script type=^text/javascript^>animatedcollapse.addDiv('" + szCtrlTag + "', 'fade=400,hide=1,persist=1');animatedcollapse.init();</script>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
               CreateViewFromView( vGroupParent, vDialog )
               //TraceLineS("*** About to call recurs code from div *** ", vDialog.Control.Tag )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               szIndentGroup = szIndent
               GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                       lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0
            END
            END

            IF szToggleFlag = "Y"
               szWriteBuffer = "</div> <!-- End Div for surrounding toggle --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!--  " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         END
         END
         END
         END

      ELSE  // Not a groupbox
         IF szControlType = "Text"  // TEXT
            TraceLineS("*** Creating Text *** ", szCtrlTag )
            GenJSP_CrteText( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, szCtrlTag,
                             szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "EditBox"  // EDITBOX
            GenJSP_CrteEditBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                "", szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "Calendar"  // CALENDAR
            GenJSP_CrteCalendar( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                 "", szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "RadioGrp" // RADIO BUTTON GROUP
            szRadioGroupName = szCtrlTag
            szWriteBuffer = "<% strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                               ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nRC <= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                               ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                               ".CheckExistenceOfEntity( strSessionId, ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strRadioGroupValue = " +
                               vDialog.CtrlMapView.Name + ".GetString( strSessionId, ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
            //I'm going to do this like the way group box is (or was).  If there is text
            //to go on the box then we will create <fieldset.  If there is no text then
            //we will create a div.
            //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
            //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
            //an id and name but think it should.
            IF vDialog.Control.Text = ""
             //szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ " + szAbsoluteStyle + ">"     Kelly 2012.06.15
               szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ style=^float:left;^>"
            ELSE
               szWriteBuffer = "<fieldset " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSP_CrteCtrlsRadio( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                   szRadioGroupName, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            IF vDialog.Control.Text = ""
               szWriteBuffer = "</div>"
            ELSE
               szWriteBuffer = "</fieldset>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         IF szControlType = "CheckBox"  // CHECKBOX
            GenJSP_CrteCheckBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                 "", szJustify, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "PushBtn"  // PUSH BUTTON
            szActionName = ""
            IF vDialog.EventAct EXISTS
               szActionName = vDialog.EventAct.Tag
               nRC = zstrcmpi( szActionName, "alt-f4" )
               IF nRC = 0
                  szActionName = "AltF4"
               END
            END

            CreateTabIndexString( vDialog, szTabIndex )
            szAbsoluteStyle = szAbsoluteStyle + szTabIndex
         // szWriteBuffer = "<button name=^" + szCtrlTag + "^ onclick=^" +
         //                 szActionName + "( )^ " + "value=^^" + szAbsoluteStyle +
         //                 ">" + vDialog.Control.Text + "</button>"

            szText = vDialog.Control.Text
            // Set Class as either null or with Class value.
            IF vDialog.Control.CSS_Class = ""
               szClass = ""
            ELSE
               szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
            END

            //If we put a title on the control, when the mouse is hovered over the control, this text will display.
            szTitleHTML = ""
            szTitle = vDialog.Control.DIL_Text
            IF szTitle != ""
               szTitleHTML = " title=^" + szTitle + "^ "
            END

            //KJS 10/19/07 - Added title.
            /*
            IF szWebCtrlType = "Button"
               szWidget = "<button type=^button^ " + szClass + szTitleHTML + "name=^"
               szTerm = szText + "</button>"
               szText = ""
            ELSE
               szWidget = "<input type=^submit^ " + szClass + szTitleHTML + "name=^"
               szTerm = ""
            END
            */
               szWidget = "<button type=^button^ " + szClass + szTitleHTML + "name=^"
               szTerm = szText + "</button>"
               szText = ""

            szParentWebType = ""
            IF vGroupParent != 0
               // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
               // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
               /*
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szParentWebType = "RelativePos"
               ELSE
                  szParentWebType = vGroupParent.Control.WebCtrlType
               END
               */
               szParentWebType = vGroupParent.Control.WebCtrlType
            END
            IF szParentWebType = "Div" OR szParentWebType = "DivScroll" OR
               szParentWebType = "Span"

               szWriteBuffer = "<p></p>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               CreateSizeString( vDialog, szSize )
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szActionName + "( )^ " + "style=^" + szSize + "^>" + szTerm
            ELSE
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szActionName + "( )^ " + szAbsoluteStyle + ">" + szTerm
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  //End of PushBtn

         IF szControlType = "ComboBox"  // COMBOBOX
            GenJSP_CrteComboBox( vDialog, lFile, szWriteBuffer, szIndentGroup, szCtrlTag, "", szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "Bitmap" OR szControlType = "BitmapBtn"  // BITMAP or JPG
            GenJSP_CrteJPG( vDialog, lFile, szWriteBuffer, szIndentGroup, szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "ListBox"  // LISTBOX
            GenJSP_CrteListBox( vDialog, lFile, szWriteBuffer, szIndentGroup, szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END  // IF szControlType = "ListBox"

         IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "Y"  // REPEATING GROUP

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP BEGIN */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP BEGIN -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Begin with JSP first cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                               vDialog.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nRC > 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
               ELSE
                  szScopingEntityName = ""
               END

               DropView( vDialog2 )

               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                               ".SetCursorFirst( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process GroupBox begin.

            //KJS 09/11/08 - Now that we can generate using relative positioning, this
            // repeating group doesn't work right.  Instead of using fieldset, I will use the
            // div.
            IF  szNoPositioning = "Y"
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<div " + szAbsoluteStyle + "> <!-- div for repeating group --> "
               ELSE
                  szWriteBuffer = "<div class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- div for repeating group -->"
               END
            ELSE
               CreateRelStyleString( vDialog, szRelStyle, 0, 0, "" )
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<fieldset " + szRelStyle + ">"
               ELSE
                  szWriteBuffer = "<fieldset class=^" + szClass + "^ " + szRelStyle + ">"
               END
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Process fields on GroupBox.
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0

            // Process GroupBox end.
            IF  szNoPositioning = "Y"
               szWriteBuffer = "</div>   <!-- end div for repeating group -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^clear:both;^></div> <!-- clear before each repeating group -->"
            ELSE
               szWriteBuffer = "</fieldset>"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Conclude with JSP next cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                               ".SetCursorNext( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP END */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP END -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END  // END OF REPEATING GROUP

         // SURVEY GROUP
         IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y" AND vDialog.CtrlMapView EXISTS

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<!-- SURVEY GROUP BEGIN -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div> <!-- surrounding div for survey --> "
            ELSE
               szWriteBuffer = "<div class=^" + szClass + "^>  <!-- surrounding div for survey -->"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iQuestionCount = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iQuestionInGroupCount = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szQuestion = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szTblMultChName = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szCheckType = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String strBtnTwo = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String strBtnOne = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szGroupNbr = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // First begin with Question Group loop.
            szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                         vDialog.CtrlMapView.Name + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( nRC > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // See if a scoping entity has been specified, and if so, use it.
            CreateViewFromView( vDialog2, vDialog )
            SET CURSOR NEXT vDialog2.CtrlMap
            IF vDialog2.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
            ELSE
               szScopingEntityName = ""
            END

            DropView( vDialog2 )

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                         ".CheckExistenceOfEntity( strSessionId, ^SurveyQuestionGroup^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szGroupNbr = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestionaire^, ^wCurrentSurveyGroup^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorFirst( strSessionId, ^SurveyQuestionGroup^" +
                         ", ^wOrder^, szGroupNbr, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szGroupName = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestionGroup^, ^Name^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<div class=^surveygroup^> <!-- div for survey question group --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<span><%=szGroupName%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "</div> <!-- end div for survey question group --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<div class=^surveygroupspacing^> <!-- div for survey question group spacing --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
             szWriteBuffer = "</div> <!-- end div for survey question group spacing --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Now go through question loop.
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // See if a scoping entity has been specified, and if so, use it.
            CreateViewFromView( vDialog2, vDialog )
            SET CURSOR NEXT vDialog2.CtrlMap
            IF vDialog2.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
            ELSE
               szScopingEntityName = ""
            END

            DropView( vDialog2 )

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorFirst( strSessionId, ^" + "SurveyQuestion" +
                         "^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      while ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Get the Question
            szWriteBuffer = "          iQuestionCount = iQuestionCount + 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szQuestion = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Number^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          if ( szQuestion.length() > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "             szQuestion = szQuestion + ^. ^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szQuestion = szQuestion + " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Question^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionID = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^ID^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szHelp = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^HelpDescription^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szType = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Type^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szCommentFlag = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^AllowCommentFlag^, ^^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionIDName = ^QuestionID^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionTypeName = ^QuestionType^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szAllowCommentName = ^AllowComment^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szIsOptional = ^IsOptionalt^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szResponseIsOptional = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^ResponseIsOptional^, ^^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionHelp = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^HelpDescription^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // THIS IS WHERE WE WOULD CREATE THE VARIOUS QUESTIONS ETC>

            // We have a couple of hidden inputs to keep track of the question id and the type.
            szWriteBuffer = "   <input name=^<%=szQuestionIDName%>^ id=^<%=szQuestionIDName%>^ type=^hidden^ value=^<%=szQuestionID%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szQuestionTypeName%>^ id=^<%=szQuestionTypeName%>^ type=^hidden^ value=^<%=szType%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szAllowCommentName%>^ id=^<%=szAllowCommentName%>^ type=^hidden^ value=^<%=szCommentFlag%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szIsOptional%>^ id=^<%=szIsOptional%>^ type=^hidden^ value=^<%=szResponseIsOptional%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<div class=^surveyquestion^> <!-- div for survey question --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<span title=^<%=szQuestionHelp%>^ ><%=szQuestion%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div> <!-- end div for survey question --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:5px;^></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Create Question Text
            szWriteBuffer = "<div class=^surveyquestionanswers^>  <!-- div around survey answers --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Check if this is single answer or multiple choice
            szWriteBuffer = "   if ( szType.equals(^Text^) ) // Text Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Single Question code
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // MLEdit: mleTextAnswer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szTxtAnswerName = ^txtAnswer^ + szQuestionID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^wTextAnswer^, ^^, 10000 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<div >  <!-- textarea answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<textarea name=^<%=szTxtAnswerName%>^ id=^<%=szTxtAnswerName%>^ style=^width:700px;height:94px;border:'2px solid';border-style:'groove';^ wrap=^wrap^><%=strErrorMapValue%></textarea>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div >  <!-- end textarea answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // End of Single Question code

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else if ( szType.equals(^Yes/No^) ) // Yes/No Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Start of Multiple choice code
            szWriteBuffer = "      if ( szType.equals(^Multiple Choice Single Response^) ) // Multiple Choice Single Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCheckType = ^radio^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCheckType = ^checkbox^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szTblMultChName = ^tblMultChoice^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            //Create table that will list multiple choice answers
               // Check if this should be a radio or checkbox.
            szWriteBuffer = "<table  cols=2 style=^^  name=^<%=szTblMultChName%>^ id=^<%=szTblMultChName%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      iTableRowCnt = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      int    lEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      String strEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strTag;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswer = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswerName = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswerId = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strAnswerText = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strQuestionChoiceID = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      zeidon.zView vtblMultChoice = new zeidon.zView( strSessionId );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      vtblMultChoice.CreateViewFromView( strSessionId, " + vDialog.CtrlMapView.Name + " );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC2 = vtblMultChoice.SetCursorFirst( strSessionId, ^SurveyMultiChoiceOption^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      while ( nRC2 >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         iTableRowCnt++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //szWriteBuffer = "         lEntityKey = vtblMultChoice.GetEntityKey( strSessionId, ^SurveyMultiChoiceOption^ );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         strEntityKey = Integer.toString( lEntityKey );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswer = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strAnswerText = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^OptionText^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswer = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^wSelectedAnswer^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strQuestionChoiceID = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^ID^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         if ( szCheckType.equals(^radio^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswerName = ^chkAnswer^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswerName = ^chkAnswer^ + strQuestionChoiceID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswerId = ^chkAnswer^ + strQuestionChoiceID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //szWriteBuffer = "         if ( strchkAnswer.equals( ^Y^ ) )"
            szWriteBuffer = "         if ( strchkAnswer.equals( strQuestionChoiceID ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswer = ^<input name='^ + strchkAnswerName + ^' id='^ + strchkAnswerId + ^' value='^ + strQuestionChoiceID + ^' type='^ + szCheckType + ^'  CHECKED >^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswer = ^<input name='^ + strchkAnswerName + ^' id='^ + strchkAnswerId + ^' value='^ + strQuestionChoiceID + ^' type='^ + szCheckType + ^' >^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "   <td style=^width:15px;^ nowrap><%=strchkAnswer%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <td nowrap><%=strAnswerText%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC2 = vtblMultChoice.SetCursorNext( strSessionId, ^SurveyMultiChoiceOption^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC2 = vtblMultChoice.DropView( strSessionId );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // End of Multiple choice code

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // END OF CREATING VARIOUS QUESTIONS

            szWriteBuffer = "</div>  <!-- div around survey answers --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Does question allow a comment

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( szCommentFlag.equals(^Y^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szCommentText = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szCommentText = " + vDialog.CtrlMapView.Name +
                 ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^RequestCommentText^, ^^, 0 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( szCommentText.equals(^^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCommentText = ^Comment^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<div style=^height:24px^></div>  <!-- Spacer before comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<div class=^surveyquestioncommenttext^>  <!-- div for comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<span><%=szCommentText%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "</div>  <!-- End of comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:5px;^></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<div class=^surveyquestioncomment^>  <!-- div comment text answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // MLEdit: MLEdit1"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String szCommentName = ^txtComment^ + szQuestionID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^wComment^, ^^, 10000 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<textarea name=^<%=szCommentName%>^ id=^<%=szCommentName%>^ style=^width:700px;height:94px;border:'2px solid';border-style:'groove';^ wrap=^wrap^><%=strErrorMapValue%></textarea>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "</div>  <!-- comment text answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // End of Question Comment


            // Spacing between questions
            szWriteBuffer = "<div class=^surveyquestionspacing^></div> <!-- spacing between survey questions -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Loop to next Question.
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorNext( strSessionId, ^" + "SurveyQuestion" +
                         "^, ^" + szScopingEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Loop to next Question Group.
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorNext( strSessionId, ^" + "SurveyQuestionGroup" +
                         "^, ^" + szScopingEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )



            // This is where we create the buttons at the bottom of the page.
            // Create Next and Prev buttons if necessary and when we are on the last page
            // create the Done button.  These assume that there are the following actions
            // in the dialog for this page: SUBMIT_Survey, NEXT_SurveyPage and PREV_SurveyPage
            szWriteBuffer = "         // This is where we create the buttons at the bottom of the page.  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Create Next and Prev buttons if necessary and when we are on the last page"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // create the Done button.  These assume that there are the following actions"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in the dialog for this page: SUBMIT_Survey, NEXT_SurveyPage and PREV_SurveyPage"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnTwo = ^<button type='button' name='btnNext' id='btnNext' value='' onclick='NEXT_SurveyPage( )'>Next-></button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( Integer.parseInt(szGroupNbr) > 1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnOne = ^<button type='button' name='btnPrev' id='btnPrev' value='' onclick='PREV_SurveyPage( )'><-Prev</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnTwo = ^<button type='button' name='btnSubmit' id='btnSubmit' value='' onclick='SUBMIT_Survey( )'>Submit Survey</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( Integer.parseInt(szGroupNbr) > 1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnOne = ^<button type='button' name='btnPrev' id='btnPrev' value='' onclick='PREV_SurveyPage( )'><-Prev</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "   <input name=^SurveyQuestionCount^ id=^SurveyQuestionCount^ type=^hidden^ value=<%=iQuestionCount%>>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- end div for survey -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<div class=^surveybuttons^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<td><%=strBtnOne%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<td><%=strBtnTwo%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<!-- SURVEY GROUP END -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END  // END OF SURVEY GROUP

         // Generation of the Tab control
         IF szControlType = "Tab"

            IF  vDialog.Control.CSS_Class != ""
               szClass = "tab-pane " + vDialog.Control.CSS_Class
            ELSE
               szClass = "tab-pane"
            END

            // If we are using relative positioning, don't give the tab a height.
            IF  szNoPositioning = "Y"
               // We might not want the groupbox to have a height (so it grows)
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
            END

            // Create the parent tab control
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div id=^" + szCtrlTag + "^ class=^" + szClass + "^ " + szAbsoluteStyle + "> <!-- Beginning of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //<script type="text/javascript">tp1 = new WebFXTabPane( document.getElementById( "tabPane1" ) );</script>
            szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + " = new WebFXTabPane( document.getElementById( ^" + szCtrlTag + "^ ) );</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )

            // If we are using relative positioning, don't give each tab page a height.
            IF  szNoPositioning = "Y"
               szStyle = ""
            ELSE
               szStyle = "style=^height:" + szHeight + "px;^"
            END

            // Set to the ctrl subobject to loop thru the tabs on the tab control
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            OrderEntityForView( vDialog, "Control", "Type A" )

            FOR EACH vDialog.Control

               szCtrlCtrlTag = vDialog.Control.Tag

               IF  vDialog.Control.CSS_Class != ""
                  szClass = "tab-page " + vDialog.Control.CSS_Class
               ELSE
                  szClass = "tab-page "
               END

               // Currently there are three actions associated with the tab (premapoi, postmapoi and preleae) currently I can only see
               // onclick working so I am not going to worry about pre-leae yet.  Also, we are not differenciating between the
               // premapoi and postmapoi, just take the action if one of these exists.
               szActionName = ""
               FOR  EACH  vDialog.EventAct
                  IF  vDialog.Event.Type = "1" OR vDialog.Event.Type = "3"
                     szActionName = vDialog.EventAct.Tag
                     nRC = zstrcmpi( szActionName, "alt-f4" )
                     IF nRC = 0
                        szActionName = "AltF4"
                     END
                  END
               END

               szWriteBuffer = "<div id=^" + szCtrlCtrlTag + "^ class=^" + szClass + "^ " + szStyle + "> <!-- Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF  szActionName = ""
                  szWriteBuffer = "<h2 class=^tab^><span>" + vDialog.Control.Text +"</span></h2>"
               ELSE
                  szWriteBuffer = "<h2 class=^tab^><span onclick=^" + szActionName + "();^>" + vDialog.Control.Text +"</span></h2>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + ".addTabPage( document.getElementById( ^" + szCtrlCtrlTag + "^ ) );</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szIndentGroup = szIndent
               CreateViewFromView( vGroupParent, vDialog )
               //Set to ctrl subobject and generate the controls that are on this tab
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                       lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )

               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0
               szWriteBuffer = "</div> <!-- End of Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            END

            ResetViewFromSubobject( vDialog )
            szWriteBuffer = "</div> <!-- End of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<script type=^text/javascript^>setupAllTabs();</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  // End of tab control

//********************** START OF GRID ***********************************

         IF szControlType = "Grid"   // SPREADSHEET

            // For each table, we will create an export option that allows the user to
            // copy the contents of a table into excel.  The problem is that this only reflects
            // values of the table as the page is being built so if the table can be changed by
            // the user, those changes would not be seen unless the page was refreshed,  Don't create
            // this export option if "No Table Export" is a webcontrolproperty for the table.
            // Also don't create this export option if we are using absolute positioning.
            szTableExport = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table Export Option"
            IF RESULT >= zCURSOR_SET AND szNoPositioning = "Y"
               szTableExport = "Y"
            END

            lSubtypeX = vDialog.Control.ExtendedStyle

            // #define zSS_SORTEDHEADERS 0x00040000 = 262144
            // #define zSS_REMEMBERSORT  0x00020000 = 131072

            lSort = IsFlagSequenceSet( lSubtypeX, 262144 )
            IF lSort = 0
               lSort = IsFlagSequenceSet( lSubtypeX, 131072 )
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            lTableRowCnt = lTableRowCnt + 1   // Set up iTableRowCnt variable suffix.
            szSuffix = lTableRowCnt
         // X_Size = vDialog.Control.SZDLG_X
         // Width = X_Size * 2
         // zIntegerToString( szWidth, 10, Width )

            //KJS 02/12/08 - We had been looping through CtrlCtrl instead of setting
            //the view to the subobject but if there is a hidden column, then
            //we don't want to count that column so we need to look at the web properties.
            SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
            lColCnt = 0
            FOR EACH vDialog.Control
               SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
               //Don't count this if it is hidden.
               IF RESULT < zCURSOR_SET
                  lColCnt = lColCnt + 1
               END
            END
            ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

            //lColCnt = 0
            //FOR EACH vDialog.CtrlCtrl
            //   lColCnt = lColCnt + 1
            //END

            //KJS 7/26/07 - Previously the "cols=..." was only being added to the
            //table def if the headers were sortable.  In trying to get the absolute width
            //to work for individual columns, it seems I need this set so I am going to always
            //set "cols=...".
            szColCount = ""
            IF  lColCnt > 0
               zIntegerToString( szPosition, 10, lColCnt )
               szColCount = " cols=" + szPosition
            END

            szClass = vDialog.Control.CSS_Class
            //If there is no sorting of headers...
            IF lSort = 0
               IF szClass = ""
                  szSort = ""
               ELSE
                  szSort = "class=^" + szClass + "^"
               END
            // TraceLineS( "Table not sorted: ", vDialog.Control.Tag )
            ELSE
            //Headers are being sorted
            // TraceLineS( "Table sorted: ", vDialog.Control.Tag )
               IF szClass = ""
                  szSort = "class=^sortable^ "
               ELSE
                  szSort = "class=^sortable " + szClass + "^ "
               END
            END

            // Reset szPosition from using is above as the column count.
            szPosition = ""

            // If szNoPositioning is null then we are using absolute positioning.
            IF  szNoPositioning = ""
               // Set up "top" and "left" positions for absolute positioning.
               CreateAbsolPosStringTable( vDialog, szPosition, 0, 0 )
            END

            IF szTableExport = "Y"
               // KJS 09/29/10 - Trying to set up a system for displaying a table's values as output so the user
               // can cut and paste this into excel.  The textarea we will create should be as wide as the
               // grid.
               szWriteBuffer = "<div class=^tableexport^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<img src=^./images/btn_expand.gif^ name=^btmp" + szCtrlTag + "^ id=^btmp" + szCtrlTag + "^ " +
                               "onclick=^" + szCtrlTag + "ExportOnClick( )^ style=^width:16px;height:14px;^ alt=^ExportBmp^ >"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<span name=^spn" + szCtrlTag + "^ id=^spn" + szCtrlTag + "^>export table data</span>"
               szWriteBuffer = "<span name=^spn" + szCtrlTag + "^ id=^spn" + szCtrlTag + "^>Click here to display data for export</span>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szWriteBuffer = "<div name=^gb" + szCtrlTag + "^ id=^gb" + szCtrlTag + "^ style=^width:" +
                                szWidth + "px;height:70px;display:none;^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<textarea name=^o" + szCtrlTag + "^ id=^o" + szCtrlTag + "^ style=^width:" +
                                szWidth + "px;height:50px;border:'2px solid';border-style:'groove';^ wrap=^wrap^></textarea> <!-- textarea for table values output  -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END


            // If Absolute Width is requested, add Width to szPosition.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
            IF RESULT >= zCURSOR_SET
               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szPosition = szPosition + "width:" + szWidth + "px;"
               // The width in percent of the table will be the pixel width divided by 400. Multiplying by 100 gives
               // an integer value of the percent.
               //WidthPercent = (Width * 100) / 400
               //szWidth = WidthPercent
            END

            szClass = vDialog.Control.CSS_Class

            szWebCtrlType = ""
            IF vGroupParent != 0
               // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
               // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
               /*
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szWebCtrlType = "RelativePos"
               ELSE
                  szWebCtrlType = vGroupParent.Control.WebCtrlType
               END
               */
               szWebCtrlType = vGroupParent.Control.WebCtrlType
            END

            // KJS 6/19/08 - We want to add filtering on a table.  If the user chooses the web control property "Filter Rows" then
            // they need to have an attribute on the table entity called wHideTableRow.  If this attribute is set to "Y" then
            // that entity will not be displayed in the table.
            szFilterTable = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Filter Rows (wHideTableRow='Y')"
            IF RESULT >= zCURSOR_SET
               szFilterTable = "Y"
            END

            // KJS 05/06/09 - I am placing this div around the <table> being generated so that if there is a
            // WebGridNoDataMessage, I can create this message under the table lined up with the table.  Otherwise,
            // I need to save any spacing that happens before this grid.
            // KJS 12/23/15 - I am not going to do this if we are not generating with any style. Jeff's group has an outer div
            // with a css and with this div, then css doesn't work correctly. I use this in older code so keeping in.
            IF vDialog.Control.WebNoGridDataMessage != "" AND szNoPositioning != "S"
               szWriteBuffer = "<div style=^float:left^>  <!-- Div around the table, this is for the message if no data -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            szScrollingTable = ""
            //KJS 04/10/08 - Want to try and add a scrolling table with stationary headings.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrolling Table"
            IF RESULT >= zCURSOR_SET
               szScrollingTable = "Y"
               szWriteBuffer = "<div class=^tableScroll^ "
               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
               // For the scrollable table we need to give the table a height.
               szPosition = szPosition + "height:" + szHeight + "px;"

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer= szWriteBuffer + " style=^position:relative;width:" + szWidth + "px;height:" + szHeight + "px;^>"
               ELSE
                  szWriteBuffer= szWriteBuffer + " style=^" + szPosition + "^>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<table name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ cellspacing=0 " + szSort + szColCount + "  >"
            ELSE

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^position:relative^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               ELSE
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^" + szPosition + "^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               END
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process Grid Headings, unless "NoHeadings" is requested.
            // Create a Class statement for each column in the list.
            lSubtype = vDialog.Control.Subtype
            lHeader = IsFlagSequenceSet( lSubtype, 262144 ) // zSS_HIDEROWHEADER = zCONTROL_SPECIFIC_1
            IF lHeader = 0     // NoHeader was not set
               IF lSort = 0
                  szWriteBuffer = "<thead><tr>"
               ELSE
                  szWriteBuffer = "<thead bgcolor=green><tr>"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
               lCol = 0

               //Loop through each field in the grid and create the headers
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  //KJS 2/12/2008
                  SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"

                  //Don't ceate a header if this control is hidden
                  IF RESULT < zCURSOR_SET

                     IF szCtrlCtrlType = "PushBtn"  // PUSH BUTTON
                        lPushBtn = 1
                     ELSE
                        lPushBtn = 0
                     END

                     //KJS 7/26/07 - If we want "Absolute Width" for this control, we should put the
                     //width on the <th> as well as on the <td>.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested.
                     szAbsoluteWidth = ""
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szAbsoluteWidth = "width:" + szWidth + "px;"
                     END

                     // Set Grid Title either from static text or variable.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Variable Header"
                     IF RESULT >= zCURSOR_SET
                        //Yes, there is a variable header.
                        IF szWriteBuffer != "   }"
                           // The last entry was NOT a variable text, so create the "<%" statement.
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                        szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                                        ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      nRC =  " + vDialog.CtrlMapView.Name +
                                     ".CheckExistenceOfEntity( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END
                        szWriteBuffer = "         strErrorMapValue =  " + vDialog.CtrlMapView.Name +
                                     ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^^, " + szMaxStringLength + " );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "          strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "    else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( strErrorMapValue.length( ) > 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "%>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF  szAbsoluteWidth = ""
                           szWriteBuffer = "   <th><%=strErrorMapValue%></th>"
                        ELSE
                           szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^><%=strErrorMapValue%></th>"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "<%"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF szTableExport = "Y"
                           // KJS 09/29/10
                           szWriteBuffer = "      strTblOutput = strTblOutput + strErrorMapValue + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        // The Title is a constant.
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // If this is sortable and this is a pushbutton on the grid...
                        IF lSort != 0 AND lPushBtn != 0
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th class=^gridheading^>" + vDialog.Control.Text
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^ class=^gridheading^>" + vDialog.Control.Text
                           END
                        ELSE
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th"
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^"
                           END

                           //If this column is for a checkbox with no header text, we are creating a checkbox so that
                           //the user can "select all" for this column.  Because of this, we do not want this
                           //column to be able to sort.  Put on the class "gridheading" which keeps this column
                           //from sorting.
                           IF vDialog.Control.Text = "" AND ( vDialog.ControlDef.Tag = "GridCheckCtl" OR vDialog.ControlDef.Tag = "CheckBox" )
                              szWriteBuffer = szWriteBuffer + " class=^gridheading^"
                           END

                           //Put the ending on the tag and the text if there is any.
                           szWriteBuffer = szWriteBuffer + ">" + vDialog.Control.Text
                        END

                        //KJS 10/19/07 - If there is no Text and the control is a checkbox, then we want to create a
                        //checkbox in the header with an onclick to "CheckAllInGrid"
                        //Need to put class="gridheading" on <th>.
                        //I shouldn't have to do this for the variable headers (code up above) because we are only doing this
                        //if there is no header text.
                        IF vDialog.Control.Text = "" AND ( vDialog.ControlDef.Tag = "GridCheckCtl" OR vDialog.ControlDef.Tag = "CheckBox" )
                           szWriteBuffer = szWriteBuffer + "<input type=^checkbox^ onclick=^CheckAllInGrid(this,'" + vDialog.Control.Tag +"')^>"
                        ELSE
                           szWriteBuffer = szWriteBuffer + ""
                        END

                        szWriteBuffer = szWriteBuffer + "</th>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF szTableExport = "Y"
                           // KJS 09/29/10
                           // If this is simply a checkbox for checking values in the table then we don't want to include this
                           // in the strTblOutput string.
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           IF vDialog.Control.Text != ""
                              szWriteBuffer = "         strTblOutput = strTblOutput + ^" + vDialog.Control.Text + "^ + ^\t^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           ELSE
                           IF vDialog.Control.Text = "" AND vDialog.ControlDef.Tag != "GridCheckCtl" AND vDialog.ControlDef.Tag != "CheckBox"
                              szWriteBuffer = "   strTblOutput = strTblOutput + ^\t^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           END
                           END
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                     END

                  END //End of checking if the current control is hidden.

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END

               END  //End of looping through each field in the grid and creating the headers.

               // If the last entry was a variable text, create the "" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               IF szTableExport = "Y"
                  // We need to add a carriage return and line feed to strTblOutput
                  szWriteBuffer = "   <%"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   strTblOutput = strTblOutput + ^\r\n^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   %>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "</tr></thead>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            IF szScrollingTable = "Y"
               // Make tbody's height 50px (this might not always be right) less than the div height.  Otherwise you get a
               // scrollbar within the scrollbar.
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits - 50 )
               szWriteBuffer = "<tbody height=^" + szHeight + "px;^>"
            ELSE
               szWriteBuffer = "<tbody>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapView EXISTS

               // szWriteBuffer = "   zeidon.zView " + vDialog.CtrlMapView.Name + " = new zeidon.zView( strSessionId );"
               // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      int    iTableRowCnt" + szSuffix + " = 0;"
               szWriteBuffer = "   iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                               ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nRC > 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      int    iTableRowCnt" + szSuffix + " = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      int    lEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strButtonName;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strOdd;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strTag;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               IF szFilterTable = "Y"
                  szWriteBuffer = "      String strFilter;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               //szWriteBuffer = "      iTableRowCnt = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls

               // Create a work variable for each column in the list.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl"
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + ";"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        // Checkboxes need the extra work value.
                        szWriteBuffer = "      String str" + vDialog.Control.Tag + "Value;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END
                  END

                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                     szListCtrlTag = vDialog.Control.Tag
                     szWriteBuffer = "      String str" + szListCtrlTag + "ErrorColor;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  // KJS 05/06/09 - First Occurrence Only is when the user wants to show only the first occurrence of a value in
                  // a table column.  We need to keep track of the last value for the column so we need to create a variable to
                  // hold the last value.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurrence Only"
                  IF RESULT >= zCURSOR_SET
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "LV = ^^;  // Last value of this column "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  // If the Grid entry requests URL Mapping, generate the variable definition here.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                  IF RESULT >= zCURSOR_SET
                     // Define variable for URL Mapping.
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "_URL;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid
               szWriteBuffer = "      "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 5/1/08 - Jeff is a pain in the butt so I need to add this code.
               // We are creating a temporary view to the table view so that when we loop through the
               // entities to create this grid, we do not lose the original entity position.
               // If you have several grids on one page mapped to the same entity path, when one grid was
               // being painted, that messed up the position of the other grids.
               szGridView = "v" + vDialog.Control.Tag
               szGridOrigViewName = vDialog.CtrlMapView.Name

               szWriteBuffer = "      zeidon.zView " + szGridView + " = new zeidon.zView( strSessionId );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + szGridView + ".CreateViewFromView( strSessionId, " + vDialog.CtrlMapView.Name + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      nRC2 = " + szGridView +
                                  ".SetCursorFirst( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                                  "^, ^" + szScopingEntityName + "^ );"
               ELSE
                  szWriteBuffer = "      nRC2 = " + szGridView +
                                  ".SetCursorScopeOI( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name + "^, 1 ); // first" // zPOS_FIRST
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( nRC2 >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Create an "IF" statement to filter rows if one of the web control properties was "Filter Rows"
               IF  szFilterTable = "Y"

                  szWriteBuffer = "         strFilter = " + szGridView +
                               ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, ^wHideTableRow^, ^^, 1 );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  szWriteBuffer = "         // If the attribute wHideTableRow is null then we want to show this row."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         if ( strFilter.length( ) == 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END

               //szWriteBuffer = "         strOdd = (iTableRowCnt" + szSuffix + " % 2) != 0 ? ^ class='odd'^ : ^^;"
               szWriteBuffer = "         strOdd = (iTableRowCnt % 2) != 0 ? ^ class='odd'^ : ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "         iTableRowCnt" + szSuffix + "++;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // szWriteBuffer = "         strSuffix" + szSuffix + " = Integer.toString( iTableRowCnt" + szSuffix + " );"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         lEntityKey = " + szGridView +
                               ".GetEntityKey( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Integer.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strButtonName = ^SelectButton^ + strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Process the subcontrols for mapping.
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
            // szIndentGroup = szIndent + "   "

               // Get the mapping attributes for each column in the table.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szJustify = ""
                  lSubtype = vDialog.Control.Subtype
                  lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_CENTERJUSTIFY )
                  IF lTemp != 0
                     szJustify = " align=^center^"
                  ELSE
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_RIGHTJUSTIFY )
                     IF lTemp != 0
                        szJustify = " align=^right^"
                     END
                  END

                  // Position on display mapping value, which is CtrlMap named "Displayed Text" or unnamed CtrlMap.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Displayed Text"
                  IF RESULT < zCURSOR_SET
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                                WHERE vDialog.CtrlMap.Tag = ""
                  END

                  // Grid Control Mapping
                  // We don't generate mapping for Push Button or if there wasn't mapping.
                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "BitmapBtn" AND
                     szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl" AND
                     RESULT >= zCURSOR_SET
                     // Regular text

                     szListCtrlTag = vDialog.Control.Tag
                     szControlTag = "str" + szListCtrlTag
                     szWriteBuffer = "         " + szControlTag + " = ^^;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                     //IF RESULT >= zCURSOR_SET OR vDialog.Control.WebCtrlType = "Edit"
                     IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                        lEditBox = 1
                        szWriteBuffer = "         " + szControlTag + "ErrorColor = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        lEditBox = 0
                     END

                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                     ELSE
                        szContextName = ""
                     END

                     szWriteBuffer = "         nRC = " + szGridView +
                                  ".CheckExistenceOfEntity( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     IF lEditBox = 1

                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strTag = ^" + szListCtrlTag + "::^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strErrorMapValue = vAppSubtask.CheckError( strSessionId, strTag, strErrorTitle );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( strErrorMapValue.length( ) > 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + "ErrorColor = ^ style='color: red'^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + " = strErrorMapValue;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END

                        szWriteBuffer = "               " + szControlTag + " = " + szGridView +
                                     ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLength + " );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"

                     ELSE
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END

                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, strDateFormat, " + szMaxStringLength + " );"
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLength + " );"
                        END
                     END
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                     // KJS 05/06/09 - Check if the user wants this column to show only the first occurrence of the column value.
                     // All other occurrences of a value are null.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurrence Only"
                     IF RESULT >= zCURSOR_SET
                           szWriteBuffer = "            // Only show the first occurrence of this column value."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( " + szControlTag + ".equals(" + szControlTag + "LV" + ") )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + " = ^^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            else "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        // If the value of the checkbox for not being checked is anything but null, the
                        // .length( ) wouldn't work properly.  All checkboxes would be checked.  Changing this...
                        szWriteBuffer = "         if ( " + szControlTag + ".equals( ^" + vDialog.Control.RadioOrCheckboxValue + "^ ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        IF szTableExport = "Y"
                           // KJS 09/29/10 - for table output
                           szWriteBuffer = "         strTblOutput = strTblOutput + " + szControlTag + " + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END

                        szWriteBuffer = "         if ( " + szControlTag + ".length( ) == 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"

                        //KJS 10/19/07 - We want to add "title" to controls and should I add class here as well?

                        //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                        szTitleHTML = ""
                        szTitle = vDialog.Control.DIL_Text
                        IF szTitle != ""
                           szTitleHTML = " title='" + szTitle + "' "
                        END

                        //KJS 7/26/07 - Added disabled option for the checkbox.
                        CreateDisabledString( vDialog, szDisabled )

                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 11/16/10 - adding an action to the checkbox inside a grid. Currently the GridCheckbox
                        // doesn't allow an action but we can copy in a normal checkbox which has an action.
                        IF vDialog.EventAct EXISTS
                           szText = " onclick='" + vDialog.EventAct.Tag + "( this.id )'"
                        ELSE
                           szText = ""
                        END

                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox'  CHECKED " +
                                        szDisabled + szTitleHTML + szText + "> ^;"
                        //szWriteBuffer = "            " + szControlTag + " = ^<input name='^ + " + szControlTag +
                        //                "Value + ^' value='Y' type='checkbox' CHECKED " + szDisabled + szTitleHTML + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // KJS 09/29/10 - for table output
                        // If this is a checkbox with no text then this is only for selecting table rows, only add
                        // this to strTblOutput.if this checkbox has a text value (this is what is shown in the table header).
                        // This is code for when the checkbox is checked so put in the checked value.
                        IF szTableExport = "Y" AND vDialog.Control.Text != ""
                           szWriteBuffer = "         strTblOutput = strTblOutput + ^" + vDialog.Control.RadioOrCheckboxValue + "^ + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END

                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox' " +
                                        szDisabled + szTitleHTML + szText + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // KJS 09/29/10 - for table output
                        // If this is a checkbox with no text then this is only for selecting table rows, only add
                        // this to strTblOutput.if this checkbox has a text value (this is what is shown in the table header).
                        // This is code for when the checkbox is not checked (there is no value) so just add the tab.
                        IF szTableExport = "Y" AND vDialog.Control.Text != ""
                           szWriteBuffer = "         strTblOutput = strTblOutput + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     ELSE
                        IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y" OR szCtrlCtrlType = "Calendar" OR
                           szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                           szWriteBuffer = "            " + szControlTag + " = ^^;"
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = ^&nbsp^;"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // If the Grid entry requests URL Mapping, generate the code here.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                     IF RESULT >= zCURSOR_SET
                        szControlTag = "str" + vDialog.Control.Tag + "_URL"
                        szWriteBuffer = "         " + szControlTag + " = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         nRC = " + szGridView +
                                     ".CheckExistenceOfEntity( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END
                        szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                        ".GetStringFromAttributeByContext( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name +
                                        "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLength + " );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid
            // szWriteBuffer = "         strEntityID = " + szGridView +
            //                 ".GetString( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name + "^, ^ID^ );"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Create the table entries with values.
               szWriteBuffer = "<tr<%=strOdd%>>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
               lCol = 0
               FOR EACH vDialog.Control   // Loop to create table columns.

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // Set up "<td" constant with optional Class.
                  // !!! KJS 01/16/09

                  // KJS 01/16/09 - I am putting in "WRAP" as a Web Control Property because I think it's confusing
                  // to have the Wrap option on a different screen (under "Common" button).  I would think you would
                  // choose, "Absolute Width" and then choose "WRAP" if you want your field to wrap.  Should I instead
                  // have a web property of "Absolute Width Wrap"??  so you only have to add one property instead of
                  // two?
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "WRAP"
                  IF RESULT >= zCURSOR_SET
                     szItemTableHeader = "<td"
                  ELSE
                     // Under the "Common" button there is a checkbox for "Wrap".  Need to check this as well as
                     // the webcontrol property.
                     IF vDialog.Control.WebWrap = "Y"
                        szItemTableHeader = "<td"
                     ELSE
                        szItemTableHeader = "<td nowrap"
                     END

                  END

                  CreateDisabledString( vDialog, szDisabled )

                  // The id attribute is a unique identification for an HTML element.
                  // The id attribute is often used with CSS or JavaScript (using the HTML DOM)
                  // to style or change the HTML element with the specified unique id.
                  // The id must be unique within the HTML document, this means that you can only
                  // use the id once on a page, but re-use it on another page.
                  //
                  // Naming rules:
                  //  - Must begin with a letter A-Z or a-z
                  //  - Can be followed by: letters (A-Za-z), digits (0-9), hyphens ("-"),
                  //    underscores ("_"), colons (":"), and periods (".")
                  //  - Values are case-sensitive
                  //
                  // dks 2008.12.10 - Because of the above statements regarding valid id's for HTML
                  // elements, I believe the following Hidden generation should produce invalid HTML.

                  //KJS 2/12/2008 - If this control is a hidden control, then we do not care what other web controls
                  //properties there might be.  Create this as a hidden field. This does not have <td> tags.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
                  IF RESULT >= zCURSOR_SET
                     szListCtrlTag = vDialog.Control.Tag
                     szWriteBuffer = "<input type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ " +
                                            "name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^>"

                  ELSE
                     //Not a hidden control.

                     //KJS 7/25/07 - Look for values in the WebControlProperties.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Multiline"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Multiline = "Y"
                     ELSE
                        szWCP_Multiline = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "EmailAddress"
                     IF RESULT >= zCURSOR_SET
                        szWCP_EmailAddress = "Y"
                     ELSE
                        szWCP_EmailAddress = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested, add Width to szItemTableHeader.
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                     END

                     //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                     szTitleHTML = ""
                     szTitle = vDialog.Control.DIL_Text
                     IF szTitle != ""
                        szTitleHTML = " title=^" + szTitle + "^ "
                     END

                     szClass = vDialog.Control.CSS_Class
                     IF szClass != "" AND szCtrlCtrlType != "PushBtn"  // Don't add Class here for Push Button.
                        szItemTableHeader = szItemTableHeader + " class=^" + szClass + "^"
                     END

                     //KJS 10/19/07 - Added title
                     IF szTitle != "" AND szCtrlCtrlType != "PushBtn"  // Don't add title here for Push Button.
                        szItemTableHeader = szItemTableHeader + szTitleHTML
                     END

                     IF szCtrlCtrlType = "PushBtn"
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // Push Button
                        szActionName = ""
                        IF vDialog.EventAct EXISTS
                           szActionName = vDialog.EventAct.Tag
                        END

                        // Set Class as either null or with Class value.
                        IF vDialog.Control.CSS_Class = ""
                           szClass = ""
                        ELSE
                           szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
                        END

                        //KJS 7/26/07 - Added DISABLED option.
                        //KJS 10/19/07 - Added title

                        // KJS 06/22/09 - I am noticing that there is no width for a push button
                        // in a grid.  I'm thinking there should be so I am going to get the
                        // width here (buttons don't have a WebControlProperty of Absolute Width).
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szStyle = " style=^width:" + szWidth + "px;^ "

                     // szWriteBuffer = "   " + szItemTableHeader + "><input type=^submit^ " + szTitleHTML + szClass + "name=<%=strButtonName%> onclick=^" + szActionName +
                     //                 "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ value=^" + vDialog.Control.Text + "^" + szDisabled + "></td>"
                        szWriteBuffer = "   " + szItemTableHeader + "><button type=^button^ " + szTitleHTML + szClass + "name=<%=strButtonName%> onclick=^" + szActionName +
                                        "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szStyle + szDisabled + ">"+
                                        vDialog.Control.Text + "</button></td>"
                     ELSE
                        szListCtrlTag = vDialog.Control.Tag

                        // If Title is variable mapping, only create entries for columns with titles.
                        CreateViewFromView( vDialog2, vDialog )
                     // SET CURSOR NEXT vDialog2.CtrlMap WHERE vDialog2.CtrlMap.Tag = "Variable Header"
                     // IF RESULT >= zCURSOR_SET AND vDialog2.CtrlMapLOD_Attribute EXISTS
                     //    szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                     //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // ELSE
                        IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"

                           //IF szWCP_AbsoluteWidth = "Y"
                              PIX_PER_DU( vDialog, dDLUnits )
                              zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                              //szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                           //END

                           //szViewName = vDialog.CtrlMapView.Name
                           szViewName = szGridView
                           szMapEntityName = vDialog.CtrlMapRelatedEntity.Name
                           szMapAttributeName = vDialog.CtrlMapER_Attribute.Name

                           szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                           IF vDialog.Event EXISTS
                              IF vDialog.Event.Type = 1
                                 szSelectAction   = "onchange"
                                 szSelectFunction = "OnChange"
                              ELSE
                                 szSelectAction   = "onblur"
                                 szSelectFunction = "OnBlur"
                              END
                           ELSE
                              szSelectAction   = "onchange"
                              szSelectFunction = "OnChange"
                           END

                           //Can be a domain combo box or a table combo box
                           lSubtype = vDialog.Control.Subtype
                           nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                           IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                              //Domain combo box

                           // szWriteBuffer = szWriteBuffer + "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ >"
                           // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              //KELLY - Do I need to add DISABLED here?

                              //032609

                              IF szClass = ""
                                 szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " +
                                                 szDisabled + szSelectAction + "=^" +
                                                 szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              ELSE
                                 szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML +
                                                " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," +
                                                szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              END

                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // szWriteBuffer = "      nRC = " + szViewName + ".GetView( strSessionId, ^" + szViewName + "^, vAppSubtask );"

                              // This view should be the same as the view we are getting for the grid so we don't need to retrieve
                              // it again.  Set nRC = 1 so that we go into the IF statement (should really take that out).
                              szWriteBuffer = "      nRC = 1;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      if ( nRC > 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         int    nRowCnt= 0;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         Vector ComboVector;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                                 lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                                 szMaxStringLength = lMaxStringLength
                              ELSE
                                 szMaxStringLength = "254"
                              END

/***** 04/26/11 */
                              szWriteBuffer = "         nRC = " + szViewName +
                                       ".CheckExistenceOfEntity( strSessionId, ^" +
                                       szMapEntityName + "^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         if ( nRC >= 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
/*****/
                              szWriteBuffer = "            strComboCurrentValue = " + szViewName + ".GetStringFromAttributeByContext( strSessionId, ^" + szMapEntityName + "^, ^" +
                                              szMapAttributeName + "^, ^^, " + szMaxStringLength + " );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         ComboVector = " + szViewName + ".GetTableListForAttribute( strSessionId, ^" + szMapEntityName + "^, ^" + szMapAttributeName + "^, ^^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         nRowCnt = (int) ComboVector.size( );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         int k;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         int nFirst;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         if ( nRowCnt > 0 ) "
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              IF vDialog.CtrlMapER_Attribute.NotNull = "Y"
                                 // Generate code when attribute IS required.
                                 szWriteBuffer = "            // Code for required attribute, which doesn't allow a blank entry."
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            nFirst = (ComboVector.elementAt( 0 ) == ^^) ? 1 : 0;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              ELSE
                                 // Generate code when attribute is NOT required.
                                 szWriteBuffer = "            // Code for NOT required attribute, which makes sure a blank entry exists."
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            if ( ComboVector.elementAt( 0 ) != ^^ )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               if ( strComboCurrentValue == ^^ )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  <option selected=^selected^ value=^^></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               else"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  <option value=^^></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                                 szWriteBuffer = "            nFirst = 0;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              END

                              szWriteBuffer = "            for ( k = nFirst; k < nRowCnt; k++ )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               strErrorMapValue = (String) ComboVector.elementAt( k );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               if ( strErrorMapValue.length( ) != 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  if ( strComboCurrentValue.equals( strErrorMapValue ) )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                     <option selected=^selected^ value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  else"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                     <option value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "                  }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      } //if ( nRowCnt > 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "   </select>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           // szWriteBuffer = szWriteBuffer + "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ >"
                              szWriteBuffer = "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboCurrentValue%>^ >"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           ELSE

                              // Select type combo box
                              CreateViewFromViewForTask( vList, vDialog, 0 )
                              SET CURSOR NEXT vList.CtrlMap
                              CreateViewFromViewForTask( vEntity, vList, 0 )
                              SET CURSOR NEXT vEntity.CtrlMap
                              CreateViewFromViewForTask( vScope, vEntity, 0 )
                              SET CURSOR NEXT vScope.CtrlMap

                              // The Select Action is either onblur or onchange depending on the following.
                              // 1. If no Action, use onchange because this allows using keystrokes in the control.
                              // 2. If Action is SelectChange, use onchange.
                              // 3. If Action is SelectEnd, use onfocusout.
                              IF vDialog.Event EXISTS
                                 IF vDialog.Event.Type = 1
                                    szSelectAction   = "onchange"
                                    szSelectFunction = "OnChange"
                                 ELSE
                                    szSelectAction   = "onblur"
                                    szSelectFunction = "OnBlur"
                                 END
                              ELSE
                                 szSelectAction = "onchange"
                                 szSelectFunction = "OnChange"
                              END


                              szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                              IF szClass = ""
                              // szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:152px;height:20px;^ " +
                                 szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " +
                                                 szDisabled + szSelectAction + "=^" +
                                                 szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              ELSE
                                 szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML +
                                                " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," +
                                                szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              END
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              IF vDialog.CtrlMapView EXISTS
                                 szWriteBuffer = "   nRC = " + vList.CtrlMapView.Name +
                                                 ".GetView( strSessionId, ^" + vList.CtrlMapView.Name + "^, vAppSubtask );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "   if ( nRC > 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "   {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         strComboCurrentValue = ^^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      zeidon.zView v" + szListCtrlTag + " = new zeidon.zView( strSessionId );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // If mapping is specified, set up the value to be used in selecting
                                 // the correct entry.
                                 IF vDialog.CtrlMapLOD_Attribute EXISTS
                                    IF vDialog.CtrlMapView.Name = szGridOrigViewName
                                       szWriteBuffer = "      nRC = 1;"
                                       szViewName = szGridView
                                    ELSE
                                       szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                                                       ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name +
                                                       "^, vAppSubtask );"
                                       szViewName = vDialog.CtrlMapView.Name
                                    END
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      if ( nRC > 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         nRC = " + szViewName + ".CheckExistenceOfEntity( strSessionId, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    IF vDialog.CtrlMapContext EXISTS
                                       szContextName = vDialog.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                                       lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "254"
                                    END

                                    szWriteBuffer = "            strComboCurrentValue = " + szViewName + ".GetStringFromAttributeByContext( strSessionId, ^" +
                                             vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                                             vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLength + " );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                 ELSE
                                    szWriteBuffer = "      strComboCurrentValue = ^^;"
                                 END
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // See if a list entity has been specified, and if so, use it.
                                 IF vEntity.CtrlMapLOD_Entity EXISTS
                                    szListEntityName = vEntity.CtrlMapLOD_Entity.Name
                                 ELSE
                                    szListEntityName = vList.CtrlMapRelatedEntity.Name
                                 END

                                 // See if a scoping entity has been specified, and if so, use it.
                                 lSubtype = vDialog.Control.Subtype
                                 lSubtype = IsFlagSequenceSet( lSubtype, zCOMBOBOX_SCOPE_OI )
                                 IF lSubtype = 0
                                    IF vScope.CtrlMapLOD_Entity EXISTS
                                       szScopingEntityName = vScope.CtrlMapLOD_Entity.Name
                                    ELSE
                                       szScopingEntityName = ""
                                    END
                                 END

                                 szWriteBuffer = "      v" + szListCtrlTag + ".CreateViewFromView( strSessionId, " + vList.CtrlMapView.Name + " );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      ComboCount = 0;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      strComboSelectedValue = ^0^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // Auto Include
                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    szWriteBuffer = ""
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      // For Auto Include, process null entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      ComboCount++;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      if ( strComboCurrentValue == null )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         <option selected=^selected^ value=^^></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         <option value=^^></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                 END

                                 IF lSubtype = 0
                                    szWriteBuffer = "      nRC = v" + szListCtrlTag + ".SetCursorFirst( strSessionId, ^" +
                                                                 szListEntityName + "^, ^" + szScopingEntityName + "^ );"
                                 ELSE
                                    szWriteBuffer = "      nRC = v" + szListCtrlTag + ".SetCursorScopeOI( strSessionId, ^" + szListEntityName + "^, 1 ); // first" // zPOS_FIRST
                                 END

                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      while ( nRC >= 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vList.CtrlMapLOD_Attribute EXISTS
                                    IF vList.CtrlMapContext EXISTS
                                       szContextName = vList.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END


                                    IF vList.CtrlMapER_Domain.MaxStringLth > 254
                                       lMaxStringLength = vList.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "254"
                                    END

                                    szWriteBuffer = "         strErrorMapValue = v" + szListCtrlTag +
                                                    ".GetStringFromAttributeByContext( strSessionId, ^" +
                                                    vList.CtrlMapRelatedEntity.Name + "^, ^" +
                                                    vList.CtrlMapER_Attribute.Name + "^, ^" +
                                                    szContextName + "^, " + szMaxStringLength + " );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 szWriteBuffer = "         if ( strComboCurrentValue.equals( strErrorMapValue ) )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            <option selected=^selected^ value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            <option value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                 szWriteBuffer = "         ComboCount++;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF lSubtype = 0
                                    szWriteBuffer = "         nRC =  v" + szListCtrlTag +
                                                    ".SetCursorNext( strSessionId, ^" + szListEntityName +
                                                    "^, ^" + szScopingEntityName + "^ );"
                                 ELSE
                                    szWriteBuffer = "         nRC =  v" + szListCtrlTag +
                                                    ".SetCursorScopeOI( strSessionId, ^" + szListEntityName + "^, 3 ); // next" // zPOS_NEXT
                                 END

                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 DropView( vList )
                                 DropView( vEntity )
                                 DropView( vScope )
                              END

                              szWriteBuffer = "      }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              szWriteBuffer = "      v" + szListCtrlTag + ".DropView( strSessionId );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              szWriteBuffer = "   }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "   </select>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           END  //IF vDialog.Control.Subtype < 12000 (domain combobox)
                           szWriteBuffer = "   </td>"

                        ELSE
                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "   " + szItemTableHeader + ">"
                           //KJS 7/26/07 - Added DISABLED option.
                           szWriteBuffer = szWriteBuffer + "<input name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ "
                           szWriteBuffer = szWriteBuffer + "style=^width:80px^ type=^text^" + szDisabled + " value=^<%=str" + szListCtrlTag + "%>^ />"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "              <img src=^images/scw.gif^  name=^" + szListCtrlTag + "Img::<%=strEntityKey%>^ id=^" + szListCtrlTag + "Img::<%=strEntityKey%>^ title=^Select Date^ alt=^Select Date^ " + szDisabled + " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "              onclick=^scwShow( document.getElementById( '" + szListCtrlTag + "::<%=strEntityKey%>' ), this );^ /></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                           X_Size = vDialog.Control.SZDLG_X
                           Size = X_Size / 3
                           zIntegerToString( szSize, 10, Size )
                           //KJS 7/26/07 - Added DISABLED option.
                           //KJS 10/19/07 - Added title
                           szWriteBuffer = "   " + szItemTableHeader + "><input size=^" + szSize + "^ value=^<%=str" + szListCtrlTag + "%>^<%=str" + szListCtrlTag +
                                                  "ErrorColor%> name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szTitleHTML + szDisabled + "></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "Multiline" OR szWCP_Multiline = "Y"
                           // KJS 09/26/2008 - Taking out the <pre> because it makes the grid too large (can't do a "WRAP" on the
                           // <td>.  I don't think in a grid that we would want that.
                           szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                        // szWriteBuffer = "   " + szItemTableHeader + "><pre><%=str" + szListCtrlTag + "%></pre></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "EmailAddress" OR szWCP_EmailAddress = "Y"
                           szWriteBuffer = "   " + szItemTableHeader + " class=^Email^><%=str" + szListCtrlTag + "%></td>"
                        ELSE
                        //KJS 11/18/2007 - Adding Bitmap as a grid control
                        IF szCtrlCtrlType = "Bitmap"

                           szText = ""
                           IF vDialog.Control.Text != ""
                              szText = " alt=^" + vDialog.Control.Text + "^ "
                           END
                           IF vDialog.EventAct EXISTS
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szListCtrlTag + "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ^onclick=^" +
                                              vDialog.EventAct.Tag + "( this.id )^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           ELSE
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szListCtrlTag + "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ><img src=^" +
                                              vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           END
                        ELSE
                        //DKS 02/01/2008 - Adding BitmapBtn as a grid control
                        IF szCtrlCtrlType = "BitmapBtn"

                           IF vDialog.Control.Text != ""
                              szText = "alt=^" + vDialog.Control.Text + "^"
                           ELSE
                              szText = ""
                           END

                           IF vDialog.EventAct EXISTS
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szListCtrlTag + "^ onclick=^" + vDialog.EventAct.Tag +
                                                 "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + " /></a></td>"
                           ELSE
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^  name=^" + szListCtrlTag +
                                                 "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + " /></a></td>"
                           END

                        ELSE
                        IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                           // KJS 11/16/10 - I needed to add this because if I copy a CheckBox into a grid that
                           // has an EventAct (action) then previously it was creating an <a href.  GridCheckCtl
                           // does not have EventActs but normal Checkboxes do..
                           szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                        ELSE
                           IF vDialog.EventAct EXISTS
                              // Right now the only EventAct on a regular grid subcontrol is HotText (now there is Bitmap and BitmapBtn)
                              // Process HotText Action the same as for the Text Control.
                              // KJS 11/16/10 - A normal checkbox copied into a grid can have an EventAct.
                              //KJS 10/19/07 - added title
                              IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
                                 // For a Hyperlink in a Grid, we assume there is ALWAYS both "Displayed Text" mapping and
                                 // "Hyperlink URL" mapping, which have been set above.
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^<%=str" + szListCtrlTag + "_URL%>^ " + szTitleHTML + "><%=str" + szListCtrlTag + "%></a></td>"
                              ELSE
                                 // This is HotText mapping to an Action.
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ onclick=^" + vDialog.EventAct.Tag + "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^" + szTitleHTML + "><%=str" + szListCtrlTag + "%></a></td>"
                              END
                           ELSE
                              // Regular default Grid subcontrol.
                              szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                           END
                        END // szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        END // szCtrlCtrlType = "BitmapBtn"
                        END // szCtrlCtrlType = "Bitmap"
                        END // WebCtrlType = "EmailAddress"
                        END // WebCtrlType = "Multiline"
                        END // WebCtrlType = "Edit"
                        END // szCtrlCtrlType = "Calendar"
                        END // szCtrlCtrlType = "ComboBox"
                        //END
                        DropView( vDialog2 )
                     END // End ELSE of PushButton
                  END // End ELSE of checking if this is a hidden field
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END  // Loop to create table columns.

               IF szTableExport = "Y"
                  // We need to add a carriage return and line feed to strTblOutput
                  szWriteBuffer = "   <%"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   strTblOutput = strTblOutput + ^\r\n^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   %>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               // If the last entry was a variable text, create the "<%" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "</tr>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //If on this table we are filtering rows, we need to add the closing bracket for the "if ( strFilter.length == 0 ) statement
               IF  szFilterTable = "Y"

                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               IF lSubtypeX = 0
                  szWriteBuffer = "         nRC2 = " + szGridView +
                                  ".SetCursorNext( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name +
                                  "^, ^" + szScopingEntityName + "^ );"
               ELSE
                  szWriteBuffer = "         nRC2 = " + szGridView +
                                  ".SetCursorScopeOI( strSessionId, ^" + vDialog.CtrlMapLOD_Entity.Name + "^,  3 ); // next" // zPOS_NEXT
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC2 = " + szGridView + ".DropView( strSessionId );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Put ending div for the scrollable table with stationary headings
            IF  szScrollingTable = "Y"
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            IF szTableExport = "Y"
               // KJS 09/29/10 - Hidden text area that will hold table values as output.  I have two of these because I am assuming the
               // user would want to see the output in a text area above the table but because we build the output string as we
               // build the table, then we need to store this value after the table.  We will copy the values from this table
               // to the text area created above.  Or could I simply build javascript code here that would copy strTblOutput to
               // the correct textarea?
               szWriteBuffer = "<textarea name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ style=^display:none;^ ><%=strTblOutput%></textarea> <!-- textarea for table values output  -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<script type=^text/javascript^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "document.getElementById(^o"+ szCtrlTag + "^).value = document.getElementById(^h"+ szCtrlTag + "^).value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            // If the user has entered a WebGridNoDataMessage for this grid, then create
            // code to check if there was no data and if so, display this message to the
            // user in a <span>.
            // I believe I would need to know if there is a spacer in front of the grid, if
            // so, then I would assume I would put that spacer in front of this message
            // as well.
            // What if I put this message as part of the table?  Do a colspan and then
            // put this message in?  But then I wouldn't have the class.
            IF vDialog.Control.WebNoGridDataMessage != ""

               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( iTableRowCnt == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               IF vDialog.Control.WebNoGridDataMsgClass = ""
                  szWriteBuffer = "<span style=^^>" + vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               ELSE
                  szWriteBuffer = "<span class=^" + vDialog.Control.WebNoGridDataMsgClass + "^ style=^^>" +
                                   vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 05/06/09 - I am putting a div with style float:left around the tables so that if there
               // is a message to display if the table has no data, then this message will line up with the
               // table.  Not sure if placing this div will affect how the tables are painted but I hope not.
               IF  szNoPositioning != "S"
                  szWriteBuffer = "</div>  <!-- End of div around table -->"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END

         END  // IF szControlType = "Grid"

//********************** END OF GRID ***********************************

         IF szControlType = "MLEdit"  // MLEDIT
            SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
            IF RESULT >= zCURSOR_SET
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   strErrorMapValue = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                               vDialog.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( nRC <= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + vDialog.CtrlMapView.Name + ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                               ".CheckExistenceOfEntity( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szContextName = ""
               IF vDialog.CtrlMapContext EXISTS
                  szContextName = vDialog.CtrlMapContext.Name
               END

               IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                  lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                  szMaxStringLength = lMaxStringLength
               ELSE
                  szMaxStringLength = "254"
               END

               szWriteBuffer = "         strErrorMapValue = " +
                               vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                               szContextName + "^, " + szMaxStringLength + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
               szWriteBuffer = "         if ( strErrorMapValue == null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            strErrorMapValue = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"

               lStyleX = vDialog.Control.ExtendedStyle
               lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
               IF lTemp != 0
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               X_Size = vDialog.Control.SZDLG_X
               Size = X_Size / 4
               zIntegerToString( szSize, 10, Size )
               Y_Size = vDialog.Control.SZDLG_Y
               Size = Y_Size / 12
               zIntegerToString( szHeight, 10, Size )

               IF vDialog.Control.VisibleBorder = "Y"
                  zAppendQuotedString( szAbsoluteStyle, "border:'4px solid';border-style:'groove';", "style=", "^" )
               ELSE
                  zAppendQuotedString( szAbsoluteStyle, "border:'2px solid';border-style:'groove';", "style=", "^" )
               END

               SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "wysiwyg TinyMCE"
               IF RESULT >= zCURSOR_SET
                  szTinyMCEFlag = "Y"
               END

               IF vDialog.Control.WebCtrlType = "wysiwygEditor" OR szTinyMCEFlag = "Y"

                  szClass = vDialog.Control.CSS_Class
                  IF szClass = ""
                     szClass = "mceSimple"  // "mceSimple" is TinyMCE default
                  END

                  szWriteBuffer = "<textarea name=^" + szCtrlTag + "^ id=^" + szCtrlTag +
                                  "^ class=^" + szClass + "^ " + szTitleHTML +
                                  szAbsoluteStyle + ">" +
                                  "<%=strErrorMapValue%></textarea>"

               ELSE
                  szClass = ""
                  szClass = vDialog.Control.CSS_Class
                  CreateTabIndexString( vDialog, szTabIndex )
                  szWriteBuffer = "<textarea name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szTitleHTML +
                                  "class=^" + szClass + "^ " + 
                                  szAbsoluteStyle + szTabIndex + " wrap=^wrap^>" +
                                  "<%=strErrorMapValue%></textarea>"

               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
         END   //IF szControlType = "MLEdit"
      END
   END // FOR EACH

   // I am creating a div for every new y position.  Need to close this.  This
   // will not be correct if there are no controls.
   // If szFirstTimeThrough = "Y" then that means we were on a groupbox that doesn't have
   // any controls inside it.  If that's true, we didn't create the beginning <div so don't create
   // the closing div.
   // Only do this if we are positioning with relative positioning.
   IF  szNoPositioning = "Y"
      IF szFirstTimeThrough = ""
         szWriteBuffer = "</div>  <!-- End of a new line -->"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // szIndent = szIndentHold
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_InputMapRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_InputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                       STRING ( 32 )    ViewName,
                       INTEGER          lFile,
                       STRING ( 10000 ) szWriteBuffer,
                       INTEGER          lTableRowCnt )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vDialog3 BASED ON LOD TZWDLGSO
   STRING ( 32 ) szContextName
   STRING ( 32 ) szScopingEntityName
   STRING ( 32 ) szListMappingEntityName
   STRING ( 50 ) szViewName
   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlCtrlType
   STRING ( 50 ) szCtrlTag
   STRING ( 50 ) szCheckBoxValue
   STRING ( 1 )  szFlag
   STRING ( 2 )  szSuffix
   STRING ( 10 ) szMaxStringLength
   STRING ( 1 )  szWCP_Edit
   STRING ( 1 )  szhFlag
   STRING ( 1 )  szXSSEncode
   STRING ( 1 )  szSurveyGroupFlag
   INTEGER       lEditBox
   INTEGER       lSubtype
   INTEGER       lSubtypeX
   INTEGER       lTemp
   INTEGER       lMaxStringLength
   SHORT         nViewNameLth
   SHORT         bResetToPlaceHolder
   SHORT         nRC
   TraceLineS("*** DoInputMapping for view *** ",ViewName)

   // Handle mapping for the named view (ViewName) that was passed in.
   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.  // not true!!!! // dks 2008.04.04
   FOR EACH vDialog.Control
      szControlType = vDialog.ControlDef.Tag
      TraceLineS("*** DoInputMapping looping through controls *** ",szControlType)

      // To prevent cross-scripting attacks, we will run what was entered in the editbox field through some code that will
      // convert certain characters so that they are not html compatible (like "<" to "&lt;").  This is only for edit fields
      // where this is specified with XSS control property.
      szXSSEncode = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "XSS Encode"
      IF RESULT >= zCURSOR_SET
         szXSSEncode = "Y"
      END

      szSurveyGroupFlag = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Survey Group"
      IF RESULT >= zCURSOR_SET
         szSurveyGroupFlag = "Y"
      END

      lSubtype = vDialog.Control.Subtype
      lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
      IF lTemp != 0
         // Disabled entries are skipped.
      ELSE
         szCtrlTag = vDialog.Control.Tag
         // On 6/25/07, DonC eliminated the code that kept hidden fields from being mapped on input. Thus, hidden
         // fields are being mapped on both output and input.
         SET CURSOR FIRST vDialog.CtrlMapView WITHIN vDialog.Control
                    WHERE vDialog.CtrlMapView.Name = ViewName
         IF RESULT >= zCURSOR_SET //AND vDialog.Control.WebCtrlType != "Hidden"

            szControlType = vDialog.ControlDef.Tag
            IF szControlType = "Text"     OR
               szControlType = "EditBox"  OR
               szControlType = "ComboBox"

               szFlag = "8"   // SetAttribute.. will be by default Context.
            ELSE
               szFlag = "0"   // SetAttribute.. will NOT be by default Context.
            END

            IF szControlType = "EditBox"  OR
               szControlType = "CheckBox" OR
               szControlType = "MLEdit"   OR
               szControlType = "RadioGrp"

               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  IF vDialog.CtrlMapContext EXISTS
                     szContextName = vDialog.CtrlMapContext.Name
                     //If the user specifies a context name then we will use this
                     //and not the default context.
                     szFlag = "0"
                  ELSE
                     szContextName = ""
                  END

                  szViewName = vDialog.CtrlMapView.Name
                  nViewNameLth = zstrlen( szViewName )

                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      nRC = " + szViewName +
                                                  ".CheckExistenceOfEntity( strSID, ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strMapValue = request.getParameter( ^" + szCtrlTag + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  IF szControlType = "EditBox" AND szXSSEncode = "Y"
                     szWriteBuffer = "         strMapValue = ReplaceXSSValues( strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
                  szWriteBuffer = "         nRC = " + szViewName +
                                                  ".SetAttributeFromVariable( strSID, ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name +
                                                  "^, ^" +
                                                  vDialog.CtrlMapER_Attribute.Name + "^,"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  zReplicate( " ", nViewNameLth, szWriteBuffer, 32 )
                  szWriteBuffer = szWriteBuffer +
                                  "                                          strMapValue, 'S', 0, " +
                                  "^" + szContextName + "^, " + szFlag + " );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         if ( nRC < 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            nMapError = nRC;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            strError += ^" + szCtrlTag +
                                  "^ + ^\t^ + strMapValue + ^\t^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               END
            ELSE
            IF szControlType = "ComboBox"

               nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
               IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                  // This is currently the same as Editbox above.
                  SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                  IF RESULT >= zCURSOR_SET
                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                        //If the user specifies a context name then we will use this
                        //and not the default context.
                        szFlag = "0"
                     ELSE
                        szContextName = ""
                     END

                     szViewName = vDialog.CtrlMapView.Name
                     nViewNameLth = zstrlen( szViewName )

                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      nRC = " + szViewName +
                                                  ".CheckExistenceOfEntity( strSID, ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue = request.getParameter( ^h" +
                                     szCtrlTag + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     szWriteBuffer = "         // If "
                     szWriteBuffer = "         if ( strMapValue != null )"
                     szWriteBuffer = "         {"
                     szWriteBuffer = "         }"  // Kelly ... purpose of these lines???

                     szWriteBuffer = "         nRC = " + szViewName +
                                                     ".SetAttributeFromVariable( strSID, ^" +
                                                     vDialog.CtrlMapRelatedEntity.Name +
                                                     "^, ^" +
                                                     vDialog.CtrlMapER_Attribute.Name + "^,"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     zReplicate( " ", nViewNameLth, szWriteBuffer, 32 )
                     szWriteBuffer = szWriteBuffer +
                                     "                                          strMapValue, 'S', 0, " +
                                     "^" + szContextName + "^, " + szFlag + " );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         if ( nRC < 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            nMapError = nRC;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            strError += ^" + szCtrlTag +
                                     "^ + ^\t^ + strMapValue + ^\t^;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  END
               ELSE
                  // Combobox with Auto Include or Set Position Only
                  // Note that this code is not executed if the view being
                  // passed is for the list mapping, instead of the edit
                  // mapping. Otherwise, the code would be generated twice,
                  // once when this routine is called for the edit view and
                  // once for the list view.
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR PREVIOUS vDialog2.CtrlMap
                  IF RESULT < zCURSOR_SET
                     // We were positioned on the first CtrlMap, which means we
                     // were being called for the edit view.
                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // Position on second CtrlMap, which is for list mapping Attribute.
                     SET CURSOR NEXT vDialog2.CtrlMap

                     // Position on third CtrlMap, which is for list mapping Entity.
                     // If it is null, the list mapping entity is from the prior CtrlMap.
                     CreateViewFromView( vDialog3, vDialog2 )
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                     ELSE
                        szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                     END

                     // Position on fourth CtrlMap, which is for scoping Entity.
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szScopingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                     ELSE
                        szScopingEntityName = ""
                     END

                     DropView( vDialog3 )

                     IF vDialog2.CtrlMapView EXISTS
                        szWriteBuffer = "      nRC = " + vDialog2.CtrlMapView.Name +
                                        ".GetView( strSID, ^" + vDialog2.CtrlMapView.Name + "^, vAS );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( nRC > 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "         strMapValue = request.getParameter( ^h" + szCtrlTag + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( strMapValue != null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            nRelPos = java.lang.Integer.parseInt( strMapValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                           // For Auto Include, we must decrement nRelPos for blank entry.
                           szWriteBuffer = "            nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        szWriteBuffer = "            nRC = " + vDialog2.CtrlMapView.Name +
                                        ".SetCursorFirst( strSID, ^" + szListMappingEntityName + "^, ^" + szScopingEntityName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + vDialog2.CtrlMapView.Name +
                                        ".SetCursor( strSID, ^" + szListMappingEntityName + "^, nRelPos, ^" + szScopingEntityName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                           //Set Foreign Key
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // Set Foreign Key Code "
                           //Check the existence of the edit mapping entity
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                                           ".CheckExistenceOfEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           IF vDialog2.CtrlMapContext EXISTS
                              szContextName = vDialog2.CtrlMapContext.Name
                              //If the user specifies a context name then we will use this
                              //and not the default context.
                              szFlag = "0"
                           ELSE
                              szFlag = "8"
                              szContextName = ""
                           END

                           IF vDialog2.CtrlMapER_Domain.MaxStringLth > 254
                              lMaxStringLength = vDialog2.CtrlMapER_Domain.MaxStringLth
                              szMaxStringLength = lMaxStringLength
                           ELSE
                              szMaxStringLength = "254"
                           END

                           szWriteBuffer = "            strMapValue = " + vDialog2.CtrlMapView.Name +
                           ".GetStringFromAttributeByContext( strSID, ^" +
                           vDialog2.CtrlMapRelatedEntity.Name + "^, ^" +
                           vDialog2.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLength + " );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                           IF vDialog.CtrlMapContext EXISTS
                              szContextName = vDialog.CtrlMapContext.Name
                              //If the user specifies a context name then we will use this
                              //and not the default context.
                              szFlag = "0"
                           ELSE
                              szFlag = "8"
                              szContextName = ""
                           END

                           szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name +
                           ".SetAttributeFromVariable( strSID, ^" +
                           vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                           vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, 'S', 0, ^" + szContextName + "^, " + szFlag + " );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // IF Auto Include
                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                           // Auto Include only.
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // Auto Include Code "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // If the value is ^0^ then the user has selected the null entry, we do not want to do an include."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // If there is an entity, we want to exclude it. "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         if ( !strMapValue.equals(^0^))"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name +
                                           ".CheckExistenceOfEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                           //Entity, so then we would not want to exclude and include.  Seems like this is only
                           //going to matter if this combo box is in a grid.
                           //KELLY121008
                           szWriteBuffer = "               // Only do the automatic include if this is a different entity"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               strTemp = " + vDialog.CtrlMapView.Name + ".GetString( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "               if ( !strTemp.equals( " + vDialog2.CtrlMapView.Name +
                                           ".GetString( strSID, ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name + "^, ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ))) "

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".ExcludeEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^, " + vDialog.CtrlMapView.Name + ".zREPOS_NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".IncludeSubobjectFromSubobject( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^, " +
                                           vDialog2.CtrlMapView.Name + ", ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name +
                                           "^, " + vDialog.CtrlMapView.Name + ".zPOS_AFTER );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".IncludeSubobjectFromSubobject( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^, " +
                                           vDialog2.CtrlMapView.Name + ", ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name +
                                           "^, " + vDialog.CtrlMapView.Name + ".zPOS_AFTER );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            nRC = " + vDialog.CtrlMapView.Name +
                                           ".CheckExistenceOfEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + vDialog.CtrlMapView.Name +
                                           ".ExcludeEntity( strSID, ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^, " + vDialog.CtrlMapView.Name + ".zREPOS_NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        END

                        szWriteBuffer = "      }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                     ELSE
                        MessageSend( vDialog, "", "XSL Generation",
                                     "Missing List Mapping.",
                                     zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     END
                  END

                  DropView( vDialog2 )

               END
            ELSE
            IF szControlType = "ListBox"
               szScopingEntityName = ""
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
               END

               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               //                ".SetAllSelectStatesForEntity( strSID, ^" +
               //                vDialog.CtrlMapLOD_Entity.Name +
               //                "^, (short) 0, ^" + szScopingEntityName + "^ );"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               //                ".SetCursorFirst( strSID, ^" +
               //                vDialog.CtrlMapLOD_Entity.Name +
               //                "^, ^" + szScopingEntityName + "^ );"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      strMapValue = request.getParameter( ^h" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( strMapValue != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRelPos = java.lang.Integer.parseInt( strMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                               ".SetCursorFirst( strSID, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "            " + vDialog.CtrlMapView.Name +
                               ".SetCursor( strSID, ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^, nRelPos, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //szWriteBuffer = "         " + vDialog.CtrlMapView.Name +
               //                ".SetSelectStateOfEntity( strSID, ^" +
               //                vDialog.CtrlMapLOD_Entity.Name + "^, (short) 1 );"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               DropView( vDialog2 )

            ELSE
            IF szControlType = "Calendar"
               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szViewName = vDialog.CtrlMapView.Name
                  szWriteBuffer = "      nRC = " + szViewName +
                                         ".CheckExistenceOfEntity( strSID, ^" +
                                         vDialog.CtrlMapRelatedEntity.Name + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strMapValue = request.getParameter( ^" + szCtrlTag + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strDateFormat = request.getParameter( ^zDateFormat^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                                  ".SetAttributeFromVariable( strSID, ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^,"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  zReplicate( " ", nViewNameLth, szWriteBuffer, 32 )
                  szWriteBuffer = szWriteBuffer +
                                  "                                          strMapValue, 'S', 0, strDateFormat, 0 );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         if ( nRC < 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            nMapError = nRC;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            strError += ^" + szCtrlTag +
                                  "^ + ^\t^ + strMapValue + ^\t^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  WL_QC( vDialog, lFile, "", "^", 0 )

               END
            ELSE
            IF szControlType = "Grid"

               szCtrlTag = vDialog.Control.Tag
               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // KJS 5/1/08 - Create a temp view to the grid view and loop through that creating the mapping.
               // That way, if there are other grids on the page using the same view, we have not messed up
               // the positioning for their mapping.
               szWriteBuffer = "      // We are creating a temp view to the grid view so that if there are "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // grids on the same window with the same view we do not mess up the "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // entity positions. "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      vGridTmp.CreateViewFromView( strSID, " + vDialog.CtrlMapView.Name + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      nRC = vGridTmp.SetCursorFirst( strSID, ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^, ^" + szScopingEntityName + "^ );"
               ELSE
                  szWriteBuffer = "      nRC = vGridTmp.SetCursorScopeOI( strSID, ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^, 1 ); // first" // zPOS_FIRST
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         lEntityKey = " +
                                         "vGridTmp.GetEntityKey( strSID, ^" + vDialog.CtrlMapLOD_Entity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Integer.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // szWriteBuffer = "         strSuffix = Integer.toString( iTableRowCnt );"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Process each subcontrol.
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag

                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szCtrlTag = vDialog.Control.Tag
                  IF szCtrlCtrlType = "EditBox" OR
                     szCtrlCtrlType = "ComboBox" OR
                     szCtrlCtrlType = "GridEditCtl" OR
                     szCtrlCtrlType = "GridComboCtl"
                     szFlag = "8"   // SetAttribute... will be by default Context.
                  ELSE
                     szFlag = "0"   // SetAttribute... will NOT be by default Context.
                  END

                  IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                     //If this is a combobox, then we get our request.GetParameter from the
                     //hidden field (ex: hComboBox1)
                     szhFlag = "h"
                  ELSE
                     szhFlag = ""
                  END

                  //KELLY - Would I want to make an "IF" statement here to check if this control id
                  //is disabled.  If so, I assume I don't want to create any of the mapping code.

                  IF  vDialog.Control.Disabled != "Y"

                  //KJS 7/25/07 - Check if this control should be an edit control
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  // If this is an edit box, then set the mapping code.
                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"

                     lEditBox = 1

                     szContextName = ""
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                     IF RESULT >= zCURSOR_SET
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                           //If the user specifies a context name then we will use this
                           //and not the default context.
                           szFlag = "0"
                        ELSE
                           szContextName = ""
                        END
                     END

                     //szWriteBuffer = "         strTag = ^@" + szCtrlTag + "#^ + strEntityKey;"
                     szWriteBuffer = "         strTag = ^" + szCtrlTag + "::^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // If strMapValue is null, then that means that this row of the grid is being hidden and so
                     // no value was assigned.  If this is the case, then we do not want to process this row so ignore.
                     szWriteBuffer = "         if ( strMapValue != null ) "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         { "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                        lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                        szMaxStringLength = lMaxStringLength
                     ELSE
                        szMaxStringLength = "254"
                     END

                     szWriteBuffer = "            strTemp = vGridTmp.GetStringFromAttributeByContext( strSID, ^" +
                                                          vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                                          "^, ^" + szContextName + "^, " + szMaxStringLength + " );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( strTemp.compareTo( strMapValue ) != 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               nRC = vGridTmp.SetAttributeFromVariable( strSID, ^" +
                                                           vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                                           "^, strMapValue, 'S', 0, ^" + szContextName + "^, " + szFlag + " );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               if ( nRC < 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  nMapError = nRC;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  strError += strTag + ^\t^ + strMapValue + ^\t^;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     szWriteBuffer = "         } "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                  ELSE
                     lEditBox = 0
                  END

                  IF ( szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox" ) AND vDialog.Control.Disabled != "Y" //DonC added 7/25/07

                     szWriteBuffer = "         strTag = ^" + szCtrlTag + "^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue" + szSuffix + " = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         if ( strMapValue" + szSuffix + " != null )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szCheckBoxValue = vDialog.Control.RadioOrCheckboxValue
                     szWriteBuffer = "            vGridTmp.SetAttributeFromVariable( strSID, ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^, ^" + szCheckBoxValue + "^, 'S', 0, ^^, 0 );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "'", 0 )
                     szWriteBuffer = "            vGridTmp.SetAttributeFromVariable( strSID, ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^, ^^, 'S', 0, ^^, 0 );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  END

                  IF szCtrlCtrlType = "ComboBox" OR
                     szCtrlCtrlType = "GridComboCtl"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                           //If the user specifies a context name then we will use this
                           //and not the default context.
                           szFlag = "0"
                        ELSE
                           szContextName = ""
                        END

                        lSubtype = vDialog.Control.Subtype
                        nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                        IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                           szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         if ( strMapValue != null ) "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         { "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           IF szCtrlCtrlType = "Calendar"
                              szWriteBuffer = "         strDateFormat = request.getParameter( ^zDateFormat^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         nRC = vGridTmp" +
                                        ".SetAttributeFromVariable( strSID, ^" +
                                        vDialog.CtrlMapRelatedEntity.Name +
                                        "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                        "^, strMapValue, 'S', 0, strDateFormat, 0 );"
                           ELSE
                              szWriteBuffer = "         nRC = vGridTmp" +
                                        ".SetAttributeFromVariable( strSID, ^" +
                                        vDialog.CtrlMapRelatedEntity.Name +
                                        "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                        "^, strMapValue, 'S', 0, " +
                                        "^" + szContextName + "^, " + szFlag + " );"
                           END
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         if ( nRC < 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            nMapError = nRC;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            strError += ^" + szCtrlTag +
                                           "^ + ^\t^ + strMapValue + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            break;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         } "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                           // WL_QC( vDialog, lFile, "", "^", 0 )
                        ELSE

                           // Combobox with Auto Include or Set Position Only
                           // Note that this code is not executed if the view being
                           // passed is for the list mapping, instead of the edit
                           // mapping. Otherwise, the code would be generated twice,
                           // once when this routine is called for the edit view and
                           // once for the list view.
                           CreateViewFromView( vDialog2, vDialog )
                           SET CURSOR PREVIOUS vDialog2.CtrlMap
                           IF RESULT < zCURSOR_SET
                              // We were positioned on the first CtrlMap, which means we
                              // were being called for the edit view.
                              szWriteBuffer = "         // " + szControlType + ": " + szCtrlTag
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              // Position on second CtrlMap, which is for list mapping Attribute.
                              SET CURSOR NEXT vDialog2.CtrlMap

                              // Position on third CtrlMap, which is for list mapping Entity.
                              // If it is null, the list mapping entity is from the prior CtrlMap.
                              CreateViewFromView( vDialog3, vDialog2 )
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                              ELSE
                                 szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                              END

                              // Position on fourth CtrlMap, which is for scoping Entity.
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szScopingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                              ELSE
                                 szScopingEntityName = ""
                              END

                              DropView( vDialog3 )

                              IF vDialog2.CtrlMapView EXISTS
                                 szWriteBuffer = "         nRC = " + vDialog2.CtrlMapView.Name +
                                                 ".GetView( strSID, ^" + vDialog2.CtrlMapView.Name + "^, vAS );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         if ( nRC > 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 //szWriteBuffer = "      // " + vDialog2.CtrlMapView.Name +
                                 //                ".SetAllSelectStatesForEntity( strSID, ^" +
                                 //                vDialog2.CtrlMapRelatedEntity.Name +
                                 //                "^, (short) 0, ^" + szScopingEntityName + "^ );"
                                 //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 szWriteBuffer = "            strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            strMapValue = request.getParameter( strTag );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            if ( strMapValue != null )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               nRelPos = java.lang.Integer.parseInt( strMapValue );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // For Auto Include, we must decrement nRelPos for blank entry.
                                    szWriteBuffer = "                  nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END
                                 szWriteBuffer = "               nRC = " + vDialog2.CtrlMapView.Name +
                                                 ".SetCursorFirst( strSID, ^" + szListMappingEntityName + "^, ^" + szScopingEntityName + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               if ( nRC >= 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "                  " + vDialog2.CtrlMapView.Name +
                                                 ".SetCursor( strSID, ^" + szListMappingEntityName + "^, nRelPos, ^" + szScopingEntityName + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                                    //Set Foreign Key
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Set Foreign Key Code "
                                    //Check the existence of the edit mapping entity
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = vGridTmp" +
                                                    ".CheckExistenceOfEntity( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    IF vDialog2.CtrlMapContext EXISTS
                                       szContextName = vDialog2.CtrlMapContext.Name
                                       //If the user specifies a context name then we will use this
                                       //and not the default context.
                                       szFlag = "0"
                                    ELSE
                                       szFlag = "8"
                                       szContextName = ""
                                    END

                                    IF vDialog2.CtrlMapER_Domain.MaxStringLth > 254
                                       lMaxStringLength = vDialog2.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "254"
                                    END

                                    szWriteBuffer = "               strMapValue = " + vDialog2.CtrlMapView.Name +
                                    ".GetStringFromAttributeByContext( strSID, ^" +
                                    vDialog2.CtrlMapRelatedEntity.Name + "^, ^" +
                                    vDialog2.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, " + szMaxStringLength + " );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                                    IF vDialog.CtrlMapContext EXISTS
                                       szContextName = vDialog.CtrlMapContext.Name
                                       //If the user specifies a context name then we will use this
                                       //and not the default context.
                                       szFlag = "0"
                                    ELSE
                                       szFlag = "8"
                                       szContextName = ""
                                    END

                                    szWriteBuffer = "               nRC = vGridTmp" +
                                    ".SetAttributeFromVariable( strSID, ^" +
                                    vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                                    vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, 'S', 0, ^" + szContextName + "^, " + szFlag + " );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END



                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // Auto Include only.
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Auto Include Code "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = " + vDialog2.CtrlMapView.Name +
                                                    ".CheckExistenceOfEntity( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                                    //Entity, so then we would not want to exclude and include.  Seems like this is only
                                    //going to matter if this combo box is in a grid.
                                    //KELLY3
                                    szWriteBuffer = "               //Only do the automatic include if this is a different entity"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               strTemp = vGridTmp.GetString( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    szWriteBuffer = "               if ( !strTemp.equals( " + vDialog2.CtrlMapView.Name +
                                                    ".GetString( strSID, ^" +
                                                    vDialog2.CtrlMapRelatedEntity.Name + "^, ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ))) "

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp" +
                                                    ".ExcludeEntity( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name +
                                                    "^, vGridTmp.zREPOS_NONE );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp" +
                                                    ".IncludeSubobjectFromSubobject( strSID, ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^, " +
                                                    vDialog2.CtrlMapView.Name + ", ^" +
                                                    vDialog2.CtrlMapRelatedEntity.Name +
                                                    "^, vGridTmp.zPOS_AFTER );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              ELSE  //IF vDialog2.CtrlMapView EXISTS
                                 MessageSend( vDialog, "", "XSL Generation",
                                              "Missing List Mapping.",
                                              zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                              END  //IF vDialog2.CtrlMapView EXISTS
                           END  //IF RESULT < zCURSOR_SET

                        END
                     END
                  END

                  IF szCtrlCtrlType = "GridEditBox"  OR
                     szCtrlCtrlType = "Calendar"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                           //If the user specifies a context name then we will use this
                           //and not the default context.
                           szFlag = "0"
                        ELSE
                           szContextName = ""
                        END

                        szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "         if ( strMapValue != null ) "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         { "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "         strDateFormat = request.getParameter( ^zDateFormat^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         nRC = vGridTmp" +
                                     ".SetAttributeFromVariable( strSID, ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^, strMapValue, 'S', 0, strDateFormat, 0 );"
                        ELSE
                           szWriteBuffer = "         nRC = vGridTmp" +
                                     ".SetAttributeFromVariable( strSID, ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^, ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^, strMapValue, 'S', 0, " +
                                     "^" + szContextName + "^, " + szFlag + " );"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( nRC < 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            nMapError = nRC;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strError += ^" + szCtrlTag +
                                        "^ + ^\t^ + strMapValue + ^\t^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            break;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         } "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     // WL_QC( vDialog, lFile, "", "^", 0 )
                     END
                  END
                  END //IF vDialog.Control.Disabled != "Y"

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )
                  END
               END

               ResetViewFromSubobject( vDialog )

            // szWriteBuffer = ""
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF lSubtypeX = 0
                  szWriteBuffer = "         nRC = " +
                                  "vGridTmp.SetCursorNext( strSID, ^" +
                                  vDialog.CtrlMapLOD_Entity.Name +
                                  "^, ^" + szScopingEntityName + "^ );"
               ELSE
                  szWriteBuffer = "         nRC = " +
                                  "vGridTmp.SetCursorScopeOI( strSID, ^" +
                                  vDialog.CtrlMapLOD_Entity.Name + "^,  3 ); // next" // zPOS_NEXT
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "      vGridTmp.DropView(strSID);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
            IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y"
               // This is the survey group. Creating input mapping for this...
               // **********************************************************
               szWriteBuffer = "      String strQuestionCount;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionID=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionType=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionName=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionAnswer=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionChoiceID=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strAllowComment=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strQuestionCount = request.getParameter( ^SurveyQuestionCount^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      int iQuestionCount=Integer.parseInt(strQuestionCount);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      for (int i=1; i<=iQuestionCount; i++)"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^QuestionID^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strQuestionID = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^QuestionType^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strQuestionType= request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^AllowComment^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strAllowComment= request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* strQuestionType: ^, strQuestionType );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* strQuestionID:   ^, strQuestionID );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + ViewName + ".SetCursorFirst( strSID, ^SurveyQuestion^, ^ID^, strQuestionID, ^SurveyQuestionaire^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strQuestionType.equals(^Text^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Text   ^, ^^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strTemp = ^txtAnswer^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyQuestion^, ^wTextAnswer^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                        strQuestionAnswer, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            else if ( strQuestionType.equals(^Yes/No^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              strTemp = ^chkAnswer^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strQuestionType.equals(^Multiple Choice Single Response^) || strQuestionType.equals(^Multiple Choice Multiple Response^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              if ( strQuestionType.equals(^Multiple Choice Single Response^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // radio buttons"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  strTemp = ^chkAnswer^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Radio Control:   ^, strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Radio Answer:   ^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyQuestion^, ^wTextAnswer^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                           strQuestionAnswer, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // check boxes"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Checkbox   ^, ^^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                nRC = " + ViewName + ".SetCursorFirst( strSID, ^SurveyMultiChoiceOption^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 while ( nRC == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strQuestionChoiceID = " + ViewName + ".GetString( strSID, ^SurveyMultiChoiceOption^, ^ID^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strTemp = ^chkAnswer^ + strQuestionChoiceID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Checkbox Control:   ^, strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + ViewName + ".TraceLine( ^******* Checkbox Answer:   ^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    //if ( !strQuestionAnswer.equals(^^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    if ( strQuestionAnswer != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyMultiChoiceOption^, ^wSelectedAnswer^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                                strQuestionChoiceID, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
              szWriteBuffer = "                      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyMultiChoiceOption^, ^wSelectedAnswer^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                                ^^, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    nRC = " + ViewName + ".SetCursorNext( strSID, ^SurveyMultiChoiceOption^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    " + ViewName + ".TraceLine( ^DoInputMapping SetCursorNext RC: ^, nRC );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Map Comment if it exists
               szWriteBuffer = "            if ( strAllowComment.equals(^Y^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strTemp = ^txtComment^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               nRC = " + ViewName + ".SetAttributeFromVariable( strSID, ^SurveyQuestion^, ^wComment^,"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                                                        strQuestionAnswer, 'S', 0, ^^, 0 );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // *************************************************************
            END // IF szControlType = "GroupBox"
            END // IF szControlType = "Grid"
            END // IF szControlType = "Calendar"
            END // IF szControlType = "ListBox"
            END // IF szControlType = "ComboBox"
            END // IF szControlType = "EditBox" OR "CheckBox" OR "MLEdit" OR "RadioGrp"
         ELSE
            IF vDialog.CtrlCtrl EXISTS
               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               GenJSP_InputMapRecurs( vDialog, ViewName, lFile, szWriteBuffer, lTableRowCnt )
               ResetViewFromSubobject( vDialog )
            END
         END
      END
   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_OutputMapRecurs
//
//  Comboboxes and listboxes need to do some mapping before the action
//  is called, so create separate javascript functions for actions that
//  are called from comboboxes or listboxes.
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_OutputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        STRING ( 255 )   szFormName )

   VIEW          vDialogParent
   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlTag
   STRING ( 50 ) szActionName
   STRING ( 10 ) szSelectFunction
   STRING ( 10000 ) szJavaScript
   STRING ( 1 )  szCodeCreated
   SHORT         nGridParent
   INTEGER       lSubtype
   SHORT         nRC

   // "ONCHANGE" FUNCTION GENERATION FOR COMBOBOX CONTROLS

   // Identify if this Control is inside a Grid by setting nGridParent.
   // Note by DonC on 9/7/07: I don't see why the following code is necessary as we know the
   // combobox is in a Grid because its type is "GridComboCtl".
   /*nGridParent = 0
   nRC = 0
   CreateViewFromView( vDialogParent, vDialog )
   LOOP WHILE nGridParent = 0 AND nRC = 0
      nRC = ResetViewFromSubobject( vDialogParent )
      IF nRC = 0 AND vDialogParent.ControlDef EXISTS
         szControlType = vDialogParent.ControlDef.Tag
         IF szControlType = "Grid"
            nGridParent = 1
         END
      END
   END
   DropView( vDialogParent )*/

   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.
   FOR EACH vDialog.Control

      szControlType = vDialog.ControlDef.Tag
      szCtrlTag = vDialog.Control.Tag

      // Set up Action data for combo boxes.
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectFunction = "OnChange"
         ELSE
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectFunction = "OnChange"
      END

      // Process Combobox entries
      IF szControlType = "ComboBox" OR szControlType = "GridComboCtl"
         // The function statements for Combobox entries are primarily driven by:
         // 1. Whether the Combobox is Domain or select entity type.
         // 2. Whether there is an Action triggered by the combobox.
         // 3. Whether the Combobox is part of a Grid.

         //Is this combobox in a grid?  You'd think you could just tell by the name "GridComboCtl but
         //I can create a combobox outside the listbox and then move it into the grid and the type will
         //still be "ComboBox".
         nGridParent = 0
         nRC = 0
         CreateViewFromView( vDialogParent, vDialog )
         nRC = ResetViewFromSubobject( vDialogParent )
         IF nRC = 0 AND vDialogParent.ControlDef EXISTS
            szControlType = vDialogParent.ControlDef.Tag
            IF szControlType = "Grid"
               nGridParent = 1
            END
         END
         DropView( vDialogParent )

         //KJS 12/7/07 - We are going to add autoinclude and set foreign key comboboxes.
         //so we will need to change the below statements.

         // function statement
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
            // szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control )"
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control, strEntityKey )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0
               // Select Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Select Combobox IN Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "      // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      isWindowClosing = false;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // If Action is SelectEnd, generate code to skip submit on tab.
         IF vDialog.EventAct EXISTS AND vDialog.Event.Type = 256
            szWriteBuffer = "   if (isChangedComboBox(document." + szFormName + "." + szCtrlTag + ") == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         // ACTION EXISTS
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
               szWriteBuffer = "      hControl.value = Control.value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0
               //NOT in Grid
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               //IN Grid
               szWriteBuffer = "      hControl.value = Control.selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         // Action Processing
         IF vDialog.EventAct EXISTS

            // KJS 08/14/2009 - There may be times when we simply want to run the javascript code without submitting
            // this form.  The only problem is if this combobox is an auto include or a "set foreign key" then we have
            // to submit to allow this to happen.  If the combobox is not one of those and the action type is
            // zWAB_StayOnWindow and there is javascript code, then do not want to do the submit.

            szCodeCreated = "N"

            szJavaScript = vDialog.EventAct.WebJavaScript

            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)
               // "Auto include" or "set foreign key" combo box.  Do nothing.
            ELSE
               // Not an "auto include" or "set foreign key" combobox and there is javascript code for
               // the action.
               IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""

                  // Create only the javascript code without the form submit.
                  szCodeCreated = "Y"
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END

            // The code for szWAB_StayOnWindow with Javascript code was not created so build this
            // the normal way with the action .submit.
            IF szCodeCreated = "N"
               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // KJS 10/28/10 - Testing this to see how using an hourglass would work while
               // the user is waiting for something to happen.
               szWriteBuffer = "      document.body.style.cursor = ^wait^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               //KJS 11/16/2007 - We want to insert any javascript code that the
               //user has entered for this action.  This will be put before the action
               //generated code for submitting.  If the user wants to skip the
               //generated code, the inserted code should end with a return.
               IF  szJavaScript != ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END

               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            //There is no action but because this is an automatic include or a
            //set foreign key combobox, there should be an action and a submit.
            //We will call a generic one
            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)

               szActionName = "ZEIDON_ComboBoxSubmit"
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      ELSE
      IF szControlType = "ListBox"

         //szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
         szWriteBuffer = "function " + szCtrlTag +  "OnClick( )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                         "document." + szFormName + "." + szCtrlTag + ".selectedIndex"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Action Processing
         IF vDialog.EventAct EXISTS

            szJavaScript = vDialog.EventAct.WebJavaScript

            IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""

               szWriteBuffer = "      // Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      // END of Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            ELSE

               // KJS 10/28/10 - Testing this to see how using an hourglass would work while
               // the user is waiting for something to happen.
               szWriteBuffer = "      document.body.style.cursor = ^wait^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      ELSE
         // This is not a combobox, so continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS

            SetViewToSubobject( vDialog, "CtrlCtrl" )
            GenJSP_OutputMapRecurs( vDialog, lFile, szWriteBuffer, szFormName )
            ResetViewFromSubobject( vDialog )

         END
      END  // End of checking if this is a listbox
      END  // End of checking if this is a combobox

   END // FOR EACH vDialog.Control
END

/////////////////////////////////////////////////////////////////////////////
//
//    OPERATIONS : Local Style manipulations
//
/////////////////////////////////////////////////////////////////////////////

GLOBAL OPERATION
PIX_PER_DU( VIEW vDialog BASED ON LOD TZWDLGSO, DECIMAL dDLUnits )
   dDLUnits = 2.0
END

GLOBAL OPERATION
FixStyleString( STRING ( 1024 ) szStyle,
                STRING ( 100 ) szS1,   // position usually
                STRING ( 100 ) szS2,   //
                STRING ( 100 ) szSE )

   szStyle = "style=^" + szS1 + szS2 + szSE + "^"
END


GLOBAL OPERATION
CreateDisabledString( VIEW vDialog BASED ON LOD TZWDLGSO,
                      STRING ( 1024 ) szDisabled )

   INTEGER        lSubtype
   INTEGER        lTemp

   lSubtype = vDialog.Control.Subtype
   lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
   IF lTemp != 0
      szDisabled = " disabled "
   ELSE
      szDisabled = ""
   END

END

GLOBAL OPERATION
CreateAbsolStyleString( VIEW vDialog BASED ON LOD TZWDLGSO,
                        STRING ( 1024 ) szStyle,
                        INTEGER X_BASE,
                        INTEGER Y_BASE,
                        STRING ( 100 ) szStyleExtraParm )

   STRING ( 100 )  szPosition
   STRING ( 100 )  szSize
   CreateSizeString( vDialog, szSize )
   CreateAbsolPosString( vDialog, szPosition, X_BASE, Y_BASE )

   FixStyleString( szStyle, szSize, szPosition, szStyleExtraParm )
END

GLOBAL OPERATION
CreateRelStyleString( VIEW vDialog BASED ON LOD TZWDLGSO,
                      STRING ( 1024 ) szStyle,
                      INTEGER X_BASE,
                      INTEGER Y_BASE,
                      STRING ( 100 ) szStyleExtraParm )

   STRING ( 100 )  szPosition
   STRING ( 100 )  szSize
   CreateSizeString( vDialog, szSize )
   CreateRelPosString( vDialog, szPosition, X_BASE, Y_BASE )

   FixStyleString( szStyle, szSize, szPosition, szStyleExtraParm )
END

/*************************************************************************************************
**
**    OPERATION: CreateNoPosStyleString
**    Creates the style with the control size but no positioning.
**
*************************************************************************************************/
GLOBAL OPERATION
CreateNoPosStyleString( VIEW vDialog BASED ON LOD TZWDLGSO,
                        STRING ( 1024 ) szStyle,
                        STRING ( 100 ) szStyleExtraParm )

   STRING ( 100 )  szSize

   CreateSizeString( vDialog, szSize )
   FixStyleString( szStyle, szSize, "", szStyleExtraParm )
END


GLOBAL OPERATION
CreateSizeString( VIEW vDialog BASED ON LOD TZWDLGSO,
                  STRING ( 1024 ) szStyle )

   STRING ( 10 )  szWidth
   STRING ( 10 )  szHeight
   DECIMAL        dDLUnits

   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )

   szStyle = "width:" + szWidth + "px;height:" + szHeight + "px;"
END

GLOBAL OPERATION
CreateAbsolPosString( VIEW vDialog BASED ON LOD TZWDLGSO,
                      STRING ( 1024 ) szStyle,
                      INTEGER X_BASE,
                      INTEGER Y_BASE )

   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   DECIMAL        dDLUnits

   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
   zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

   szStyle = "position:absolute;" +
             "left:" + szX_Pos + "px;" +
             "top:" + szY_Pos + "px;"
END

GLOBAL OPERATION
CreateAbsolPosStringTable( VIEW vDialog BASED ON LOD TZWDLGSO,
                           STRING ( 1024 ) szStyle,
                           INTEGER X_BASE,
                           INTEGER Y_BASE )

   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   DECIMAL        dDLUnits

   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
   zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

   szStyle = "position:absolute;" +
             "top:" + szY_Pos + "px;" +
             "left:" + szX_Pos + "px;"

END

GLOBAL OPERATION
CreateRelPosString( VIEW vDialog BASED ON LOD TZWDLGSO,
                    STRING ( 1024 ) szStyle,
                    INTEGER X_BASE,
                    INTEGER Y_BASE )

   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   DECIMAL        dDLUnits

   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
   zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

   szStyle = "position:relative;" +
             "left:" + szX_Pos + "px;" +
             "top:" + szY_Pos + "px;"
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_Action
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_Action( VIEW vDialog     BASED ON LOD TZWDLGSO,
               VIEW vDialogRoot BASED ON LOD TZWDLGSO,
               INTEGER          lFile,
               STRING ( 10000 ) szWriteBuffer,
               STRING ( 255 )   szFormName,
               STRING ( 34 )    szActionName,
               INTEGER          lTraceLevel )

   VIEW vDialogTemp BASED ON LOD TZWDLGSO
   VIEW vDialogCtrl BASED ON LOD TZWDLGSO
   STRING ( 32 )    szViewName
   STRING ( 32 )    szEntityName
   STRING ( 32 )    szContextName
   STRING ( 32 )    szCtrlTag
   STRING ( 32 )    szDownloadViewName
   STRING ( 32 )    szUploadViewName
   STRING ( 10 )    szMaxStringLength
   STRING ( 50 )    szPrivateKey
   STRING ( 50 )    szPublicKey
   STRING ( 1 )     InsertBlankFlag
   STRING ( 1 )     szCommentAdded
   STRING ( 1 )     szUploadTransferFileFlag
   STRING ( 1 )     szPosDataCreated
   INTEGER          lControl
   INTEGER          lMaxStringLength
   INTEGER          lActionType
   SHORT            nViewNameLth
   SHORT            nGridParent
   SHORT            nRC

   InsertBlankFlag = "N"

   szWriteBuffer = "   while ( bDone == 0 && strActionToProcess.equals( ^" + szActionName + "^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = 1;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      session.setAttribute( ^ZeidonAction^, ^" + szActionName + "^ );" // Kelly wants this one? Not sure why - dks 2011.11.09
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

//**********************************

      // KJS 11/05/09
      // If we unregister zeidon at the end of building this window, then when the user clicks an action,
      // we need to call any Prebuild/Posbuild operations (that would build objects used on this page) before we
      // call the action selected.
   IF vDialogRoot.Window.WEB_UnregisterZeidonWindow = "Y"
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      szCommentAdded = "N"
      FOR EACH vDialogTemp.Action
         FOR EACH vDialogTemp.ActWndEvent
            IF vDialogTemp.ActWndEvent.Type = 1 OR
               vDialogTemp.ActWndEvent.Type = 2

               IF vDialogTemp.ActOper EXISTS

                  // Don't want to add this comment twice if there is an operation for both prebuild and posbuild.
                  IF szCommentAdded = "N"
                     szWriteBuffer = "      // Prebuild/Posbuild Operations."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // These are called because we Unregister Zeidon when this page is finished loading, so"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // these operations need to be called before any action code (for recreating objects etc)."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szCommentAdded = "Y"
                  END


                  szWriteBuffer = "      nOptRC = vAppSubtask.CallDialogOperation( strSessionId, ^" +
                                  vDialogTemp.Dialog.Tag + "^, ^" +
                                  vDialogTemp.ActOper.Name + "^, 1 );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nOptRC == 2 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         break;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END
      END
      DropView ( vDialogTemp )

   END

//***********************************

   // Keep position on the Control that triggers the Action, if it exists.
   CreateViewFromView( vDialogCtrl, vDialog )
   NAME VIEW vDialogCtrl "vDialogCtrl"
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogCtrl, "EventAct", "Tag", lControl, szActionName, "", "", 0, "Window", "" )
   IF nRC < zCURSOR_SET
      DropView( vDialogCtrl )
      vDialogCtrl = 0
   END

   lActionType = vDialog.Action.Type
   IF lActionType = zWAB_StartBrowserHTML_Page
      szWriteBuffer = "      strURL = vAppSubtask.MakeWebFileName( strSessionId, 0 ) + ^.html^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      vAppSubtask.DropName( strSessionId, strURL );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      IF lActionType = zWAB_ProcessDownloadFile
         // Download File constants
         szWriteBuffer = "      String sDownloadFile = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sSourceFileNameOnly = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sExtension = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int l;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int x;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Download File mapping view: Mapping must be specified for download processing.
         IF vDialogCtrl = 0
            MessageSend( vDialog, "", "Download File Generation",
                                     "The Control with 'Download File' action could not be located.",
                                     zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         ELSE
            IF vDialogCtrl.CtrlMapER_Attribute DOES NOT EXIST
               MessageSend( vDialog, "", "Download File Generation",
                                        "The Control with 'Download File' action must specify mapping for the source file name.",
                                        zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            ELSE
               szDownloadViewName = vDialogCtrl.CtrlMapView.Name
               szWriteBuffer = "      zeidon.zView " + szDownloadViewName + " = new zeidon.zView( strSessionId );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
         END
      END
   END

   // We need to determine if this Action is on a Group for File Transfer to Server, because we will not
   // generate the call to DoInputMapping in that case.
   szUploadTransferFileFlag = ""
   IF vDialogCtrl > 0
      CreateViewFromView( vDialogTemp, vDialogCtrl )
      ResetViewFromSubobject( vDialogTemp )
      SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Transfer to Server"
      IF RESULT >= zCURSOR_SET
         szUploadTransferFileFlag = "Y"
      END
      DropView( vDialogTemp )
   END

   // If this Action is for an Upload to Server File Transfer, we won't do normal input mapping, but we will map in the full target file name so
   // that we can process it, since we may not know the suffix from the source or even the file name from the source.
   IF szUploadTransferFileFlag = "Y"

      //If there is mapping on the edit ("file") control, we want to put the
      //filename that is being uploaded into that mapping.

      CreateViewFromView( vDialogTemp, vDialogCtrl )

         // Aadit, wants there to be an upload file limit, so that for email attachment, the file isn't too big to bring
         // down the mail server. This really needs to be an updatable field...
         /*********************************************/
         szWriteBuffer = "      if ( iFileLth > 10485760 )"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )


         szWriteBuffer = "         strErrorMsg = ^Y\tFile\t\tAttachment File is too large!\t^;"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         session.setAttribute( ^FileUploadError^, strErrorMsg );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
 
         szWriteBuffer = "         vAppSubtask.TraceLine( ^File TOO big ERROR =======>> ^, strErrorMsg );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         nRC = -1;"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )

/*
         szWriteBuffer = "         int iView = vAppSubtask.GetIntegerFromView( strSessionId );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         vAppSubtask.TraceLine( ^File TOO big ERROR =======>> ^, ^^ );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         nRC = vMsgQ.GetView( strSessionId, ^__MSGQ^, vAppSubtask );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         if ( nRC > 0 )"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            zeidon.zView v = new zeidon.zView( strSessionId );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            v.CreateViewFromView( strSessionId, vMsgQ );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            nRC = v.SetCursorFirst( strSessionId, ^Task^, ^Id^, iView, ^^ );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            if ( nRC == 0 )"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            {"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               nRC = v.SetCursorFirst( strSessionId, ^QMsg^ );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               if ( nRC == 0 )"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               {"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "                  v.SetAttributeFromVariable( strSessionId, ^QMsg^, ^Title^, ^Attachment File is too large!^, 'S',"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "                                              24, ^^, 8 );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               }"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               nRC = 0;"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            }"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            v.DropView( strSessionId);"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            nRC = -1;"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
  */
         szWriteBuffer = "      }"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         /*********************************************/

      //I wanted to do the "SET CURSOR..." but because Control doesn't really have a parent
      //the c code that gets generated is only looking for ControlDef under Control (not all controls) and so
      //it is not finding it.
      //SET CURSOR FIRST vDialogTemp.Control WHERE vDialogTemp.ControlDef.Tag = "EditBox"
      FOR EACH vDialogTemp.Control

         IF vDialogTemp.ControlDef.Tag = "EditBox"
                                        //256
           //Get the mapping
            SET CURSOR FIRST vDialogTemp.CtrlMapLOD_Attribute WITHIN vDialogTemp.Control
            IF RESULT >= zCURSOR_SET
               szUploadViewName = vDialogTemp.CtrlMapView.Name
               szWriteBuffer = "      zeidon.zView " + szUploadViewName + " = new zeidon.zView( strSessionId );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      nRC = " + vDialogTemp.CtrlMapView.Name +
                               ".GetView( strSessionId, ^" + vDialogTemp.CtrlMapView.Name + "^, vAppSubtask );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC <= 0 )"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + vDialogTemp.CtrlMapView.Name +
                        ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      else"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + vDialogTemp.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nRC = " +
                      vDialogTemp.CtrlMapView.Name +
                      ".SetAttribute( strSessionId, ^" +
                      vDialogTemp.CtrlMapRelatedEntity.Name + "^, ^" +
                      vDialogTemp.CtrlMapER_Attribute.Name + "^, strInputFileName );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )

            END
         END
      END
      DropView( vDialogTemp )

   ELSE
      // Input Mapping Option
      IF vDialog.Action.NoMap != "Y"
         szWriteBuffer = "      // Input Mapping"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = DoInputMapping( request, session, application );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nRC < 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // Check if this is an action for reCAPTCHA.  If so, add the code...
   IF lActionType = 35 OR lActionType = 55
      // We need to get the control for this action so we can retrieve the private and public keys.
      CreateViewFromView( vDialogTemp, vDialog )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      szCtrlTag = "reCAPTCHA"
      IF SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" ) >= zCURSOR_SET
         szPublicKey = vDialogTemp.Control.WebreCAPTCHAPublicKey
         szPrivateKey = vDialogTemp.Control.WebreCAPTCHAPrivateKey

      END
      DropView( vDialogTemp )

      // create recaptcha without <noscript> tags
      szWriteBuffer = "      ReCaptcha captcha = ReCaptchaFactory.newReCaptcha(^" + szPublicKey + "^, ^" + szPrivateKey + "^, false);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      ReCaptchaResponse response2 = captcha.checkAnswer(request.getRemoteAddr(), request.getParameter(^recaptcha_challenge_field^), request.getParameter(^recaptcha_response_field^));"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if (response2.isValid())"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vAppSubtask.TraceLine(^reCAPTCHA Success^, ^^);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // The user has not entered in the correct response, do not go further."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorTitle = ^INCORRECT RECAPTCHA^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMsg = ^You typed the reCaptcha image incorrectly.  Please try again.^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // No redirection, we are staying on this page."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 0;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

   //KJS 11/15/07 - If there is a button or hottext on a grid, then we should position on the correct
   //entity whether or not there is an operation.

   //We don't want to create the code to position on the correct
   //list entity twice.  So keep track...
   szPosDataCreated = "N"

   //Loop through each ActCtrl to see if there is a button or hot text
   //on a grid that calls this action.  If so, then we need to
   //get position on the correct item in the list.  This is the
   //code to set position.  If there is more than one button/hottext
   //in this list that calls the same action, make sure we don't
   //create this code twice.
   FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

      szCtrlTag = vDialog.ActCtrl.Tag
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      NAME VIEW vDialogTemp "vDialogTemp"

      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      IF SetEntityCursor( vDialogTemp, "Control", "Tag", lControl,
                          szCtrlTag, "", "", 0,
                          "Window", "" ) >= zCURSOR_SET AND
         (vDialogTemp.ControlDef.Tag = "PushBtn" OR vDialogTemp.ControlDef.Tag = "GridEditCtl" OR
          vDialogTemp.ControlDef.Tag = "Bitmap" OR vDialogTemp.ControlDef.Tag = "BitmapBtn" OR
          vDialogTemp.ControlDef.Tag = "ComboBox" OR vDialogTemp.ControlDef.Tag = "GridComboCtl" )
          //032609
         //vDialogTemp.ControlDef.Key = 1020

         // Identify if this Control is inside a Grid.
         nRC = 0
         nGridParent = 0
         LOOP WHILE nRC = 0 AND nGridParent = 0
            nRC = ResetViewFromSubobject( vDialogTemp )
            IF nRC = 0 AND vDialogTemp.ControlDef EXISTS
               IF vDialogTemp.ControlDef.Tag = "Grid"
               // vDialogTemp.ControlDef.Key = 2010
                  // The parent of the this control is a Grid, so indicate for later.
                  nGridParent = 1
               END
            END
         END

         //If we successfully reset from the subcontrols and we are on a grid.
         IF nGridParent = 1

            IF vDialogTemp.CtrlMapView EXISTS AND
               vDialogTemp.CtrlMapLOD_Entity EXISTS AND szPosDataCreated = "N"

               szPosDataCreated = "Y"
               szWriteBuffer = "      // Position on the entity that was selected in the grid."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // We have a "select button" or HotText in a list, so we need to set
               // up the code to set position on the proper list item.
               szViewName = vDialogTemp.CtrlMapView.Name
               szEntityName = vDialogTemp.CtrlMapLOD_Entity.Name
               szWriteBuffer = "      String strEntityKey = (String) request.getParameter( ^zTableRowSelect^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //If this action is for the download button or for the upload button, we may have already created
               //a view for this view name.  Don't create the view unless it's for a different view name.
               IF  ( szViewName != szDownloadViewName AND szViewName != szUploadViewName )
                  szWriteBuffer = "      zeidon.zView " + szViewName + " = new zeidon.zView( strSessionId );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      nRC = " + szViewName + ".GetView( strSessionId, ^" + szViewName + "^, vAppSubtask );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      if ( nRC > 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "         vAppSubtask.TraceLine( ^Got " + szViewName + " View Key: ^, strEntityKey );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               szWriteBuffer = "         nRC = " + szViewName + ".SetCursorEntityKey( strSessionId, ^" + szEntityName + "^, strEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         if ( nRC < 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         // This is temp code because SetCursorEntityKey doesn't work on subobjects."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nRCk = " + szViewName + ".SetCursorFirst( strSessionId, ^" + szEntityName + "^, ^^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            while ( nRCk >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               lEKey = " + szViewName + ".GetEntityKey( strSessionId, ^" + szEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strKey = Integer.toString( lEKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               if ( strKey.equals( strEntityKey ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // Stop while loop because we have positioned on the correct entity."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  nRCk = -1;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  nRCk = " + szViewName + ".SetCursorNext( strSessionId, ^" + szEntityName + "^, ^^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "      else"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         vAppSubtask.TraceLine( ^Did not get " + szViewName + " View Key: ^, strEntityKey );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END  // IF nGridParent = 1
      END  // IF SetEntityCursor ...

      DropView( vDialogTemp )

   END  //FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

   // Operation Option
   IF vDialog.ActOper EXISTS

      szWriteBuffer = "      // Action Operation"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //FOR EACH Dialog.ActCtrl.Tag code from about was here.

      szWriteBuffer = "      nRC = 0;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      vAppSubtask.TraceLine( ^CallDialogOperation: " + vDialog.Dialog.Tag + "." + vDialog.ActOper.Name + "  ^, ^^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "      nOptRC = vAppSubtask.CallDialogOperation( strSessionId, ^" +
                      vDialog.Dialog.Tag + "^, ^" +
                      vDialog.ActOper.Name + "^, 0 );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Handle any Next Window processing from Operation.
      szWriteBuffer = "      if ( nOptRC == 2 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      IF  lActionType = zWAB_StartBrowserPDF_Page
         // If we are copying to pdf, then we need to have a wait routine, otherwise, the jsp tries to open
         // the pdf file before it's actually created.
         szWriteBuffer = "      try{ "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         Thread.sleep(5000); "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }catch(InterruptedException ie){ "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         out.println(^error^); "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      } "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

      // I know that if we are starting a pdf or html window then we do not need to do this.
      // There are probably more like Popup windows...
      IF  lActionType != zWAB_StartBrowserHTML_Page AND lActionType != zWAB_StartBrowserPDF_Page

         // Handle any Next Window processing from Operation.
         szWriteBuffer = "      // Dynamic Next Window"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = vKZXMLPGO.CheckExistenceOfEntity( strSessionId, ^NextDialogWindow^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nRC >= 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strDialogName = vKZXMLPGO.GetString( strSessionId, ^NextDialogWindow^, ^DialogName^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strWindowName = vKZXMLPGO.GetString( strSessionId, ^NextDialogWindow^, ^WindowName^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strNextJSP_Name = strDialogName + strWindowName + ^.jsp^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         vKZXMLPGO.DeleteEntity( strSessionId, ^NextDialogWindow^, nRepos );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strURL = response.encodeRedirectURL( strNextJSP_Name );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         //KJS Trace
         IF (lTraceLevel = 1)
            szWriteBuffer = "         vAppSubtask.TraceLine( ^Next Window Redirect to: ^, strURL );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         // Handle creation of return page for Function Call StartSubwindow.
         szWriteBuffer = "         nRC = vKZXMLPGO.CheckExistenceOfEntity( strSessionId, ^NextDialogWindow^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         if ( nRC >= 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strFunctionCall = vKZXMLPGO.GetString( strSessionId, ^NextDialogWindow^, ^FunctionCall^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strFunctionCall = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "         if ( strFunctionCall.equals( ^StartSubwindow^ ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            vKZXMLPGO.CreateEntity( strSessionId, ^PagePath^, vKZXMLPGO.zPOS_AFTER );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            vKZXMLPGO.SetAttribute( strSessionId, ^PagePath^, ^LastPageName^, ^" +
                         szFormName + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "         nRC = 1;  // do the redirection"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

   END  //End of calling an operation

   IF lActionType = zWAB_StartBrowserHTML_Page
      szWriteBuffer = "      vAppSubtask.SetName( strSessionId, strURL );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
      // That resubmitted the current page and I assume this was done thinking this was how
      // the report page would be called but since the report popup is determined in AfterPageLoaded, we
      // don't need to resubmit the page.  Just keep building this current page.
      //szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // KJS 09/15/10 - Now I want to do the redirect to the current page so that I don't get a "Resend" prompt
      // from the browser when I hit the "refresh" button.
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

      IF lActionType = zWAB_StartBrowserPDF_Page
      // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
      // That resubmitted the current page and I assume this was done thinking this was how
      // the report page would be called but since the report popup is determined in AfterPageLoaded, we
      // don't need to resubmit the page.  Just keep building this current page.
      //szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // KJS 09/15/10 - Now I want to do the redirect to the current page so that I don't get a "Resend" prompt
      // from the browser when I hit the "refresh" button.
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Next Window Option
   IF lActionType = zWAB_StartModelessSubwindow          OR
      lActionType = zWAB_StartModalSubwindow             OR
      lActionType = zWAB_ReplaceWindowWithModelessWindow OR
      lActionType = zWAB_ReplaceWindowWithModalWindow    OR
      lActionType = 35                                   OR  //reCAPTCHA StartModalSubwindow
      lActionType = 55  //reCAPTCHA ReplaceModalWindow
      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         InsertBlankFlag = "N"
      END

      szWriteBuffer = "      // Next Window"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF lActionType = zWAB_StartBrowserHTML_Page
         szWriteBuffer = "      vAppSubtask.SetName( strSessionId, strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strURL = response.encodeRedirectURL( strURL );"
      ELSE
         szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" +
                         vDialog.Action.DialogName + vDialog.Action.WindowName + ".jsp^ );"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      vAppSubtask.TraceLine( ^Next Window Redirect to: ^, strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      IF lActionType = zWAB_StartModelessSubwindow OR
         lActionType = zWAB_StartModalSubwindow    OR
         lActionType = 35 //reCAPTCHA StartModalSubwindow
         // Next Window is subwindow. Set up current window for return.
         szWriteBuffer = "      vKZXMLPGO.CreateEntity( strSessionId, ^PagePath^, vKZXMLPGO.zPOS_AFTER );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      vKZXMLPGO.SetAttribute( strSessionId, ^PagePath^, ^LastPageName^, ^" +
                         szFormName + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      IF lActionType = zWAB_StartBrowserHTML_Page
         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      ELSE
         szWriteBuffer = "      nRC = 1;  // do the redirection"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   END  //End of Next Window Option

   // This Action is Startup Web Popup WITH mapping, so set zOpenPopupWindow to the next page jsp.
   IF ( lActionType = zWAB_StartModalWebPopup OR lActionType = zWAB_StartModelessWebPopup ) AND vDialog.Action.NoMap = ""
      //This gets the value for the popup window so that in AfterPageLoaded, we can get this
      //value and pop up the window.
      szWriteBuffer = "      strOpenPopupWindow = request.getParameter( ^zOpenPopupWindow^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZX = request.getParameter( ^zPopupWindowSZX^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZY = request.getParameter( ^zPopupWindowSZY^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 0;  // No redirection, we want to open the popup"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Same Window Refresh option
   IF lActionType = zWAB_StayOnWindowWithRefresh
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Return From Window Option
   IF lActionType = zWAB_ReturnToParent OR
      lActionType = zWAB_ReturnToParentWithRefresh

      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "      // Return to Last Window"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = vKZXMLPGO.CheckExistenceOfEntity( strSessionId, ^PagePath^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = vKZXMLPGO.GetString( strSessionId, ^PagePath^, ^LastPageName^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vKZXMLPGO.DeleteEntity( strSessionId, ^PagePath^, vKZXMLPGO.zREPOS_PREV );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = strLastPage + ^.jsp^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = ^" + szFormName + ".jsp^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "      strURL = response.encodeRedirectURL( strLastPage );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      vAppSubtask.TraceLine( ^Return Redirect to: ^, strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END
   // szWriteBuffer = "      return;"
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Download File option.
   IF lActionType = zWAB_ProcessDownloadFile

      // Note that we need vDialogCtrl to be positioned on Control that triggers the Action to get the attribute mapping from that Control.
      // This was evaluated earlier.

      IF vDialogCtrl > 0
         IF vDialogCtrl.CtrlMapER_Attribute EXISTS

            szWriteBuffer = "  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      // Download File Processing"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            /*
            szWriteBuffer = "      sBrowser = request.getHeader(^User-Agent^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isFirefox = ( sBrowser != null && sBrowser.indexOf( ^Firefox/^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isMSIE = ( sBrowser != null && sBrowser.indexOf( ^MSIE^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isOpera = ( sBrowser != null && sBrowser.indexOf( ^Opera^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            */

            szWriteBuffer = "      nRC = " + vDialogCtrl.CtrlMapView.Name + ".GetView( strSessionId, ^" + vDialogCtrl.CtrlMapView.Name + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialogCtrl.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^" +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialogCtrl.CtrlMapER_Domain.MaxStringLth > 254
               lMaxStringLength = vDialogCtrl.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "254"
            END

            szWriteBuffer = "            sDownloadFile = " + vDialogCtrl.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^" +
                            vDialogCtrl.CtrlMapRelatedEntity.Name + "^, ^" + vDialogCtrl.CtrlMapER_Attribute.Name + "^, ^^, " + szMaxStringLength + " );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".TraceLine( ^Download File Name: ^, sDownloadFile );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".TraceLine( ^Entity does not exist: ^, ^" +
                                                vDialogCtrl.CtrlMapView.Name + "." +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + vDialogCtrl.CtrlMapView.Name + ".TraceLine( ^Invalid View: ^, ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         // Replace any quotes."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         sDownloadFile = sDownloadFile.replaceAll(^\^^,^^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         l = sDownloadFile.lastIndexOf(^.^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         x = sDownloadFile.lastIndexOf(^\\^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         // If x > l then the filename has no extension and"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // there must be a period in the directory name."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Right now we are not using sExtension but just"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in case we want to change the encType I want"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // to capture this."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if (x > l)"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = sDownloadFile.substring(l+1);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Get the filename only without directories."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         sSourceFileNameOnly = sDownloadFile.substring(x + 1);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         File InputFile = new File(sDownloadFile);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         FileInputStream fis = new FileInputStream(InputFile); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         try"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            vAppSubtask.TraceLine( ^Download File: ^, ^Setting outputStream and attaching file^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "            String contenttype = ^application/octet-stream^;  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setContentType(contenttype);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setHeader(^Content-Disposition^, ^attachment; filename=^ + sSourceFileNameOnly + ^;^);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            ServletOutputStream outStream = response.getOutputStream();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            int c = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ((c=fis.read())!=-1)"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               outStream.write(c); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.flush(); "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.close();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         catch (Exception e) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if (InputFile!=null && InputFile.exists()) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               //TraceLine"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               vAppSubtask.TraceLine( ^Error downloading file: ^, sDownloadFile );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "            fis.close();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // The end of the Action is the same as "Same Window Refresh" above.
            szWriteBuffer = "         // Stay on Window with Refresh"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      } "
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END
   END // Download File option.

   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   IF vDialogCtrl > 0
      DropView( vDialogCtrl )
   END

END

/*************************************************************************************************
**
**    OPERATION: GenJSP_TableExport
**    This function loops through all the tables on the page and creates a javascript function for each
**    that allows the user to view the table export data (tab delimited data from the table for exporting
**    g into excel that is created in a <textarea>).
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSP_TableExport( VIEW vDialog BASED ON LOD TZWDLGSO,
                    INTEGER lFile,
                    STRING ( 10000 ) szWriteBuffer,
                    STRING ( 1 ) szNoPositioning )

   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlTag

   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.
   FOR EACH vDialog.Control

      szControlType = vDialog.ControlDef.Tag
      szCtrlTag = vDialog.Control.Tag

      // Process Combobox entries
      IF szControlType = "Grid"

         // For each table, we will create an export option that allows the user to
         // copy the contents of a table into excel.  The problem is that this only reflects
         // values of the table as the page is being built so if the table can be changed by
         // the user, those changes would not be seen unless the page was refreshed,  Don't create
         // this export option if "No Table Export" is a webcontrolproperty for the table.
         // Also don't create this export option if we are using absolute positioning.
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table Export Option"
         IF RESULT >= zCURSOR_SET AND szNoPositioning = "Y"

            szWriteBuffer = "function " + szCtrlTag + "ExportOnClick( )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "{"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      // This is for indicating whether the user hit the window close box."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      isWindowClosing = false;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // _IsDocDisabled code.
            szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      if (document.getElementById(^btmp" + szCtrlTag + "^).src.indexOf(^btn_expand^) >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById(^gb" + szCtrlTag + "^).style.display = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById(^o" + szCtrlTag + "^).value = document.getElementById(^h" + szCtrlTag + "^).value;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById(^o" + szCtrlTag + "^).select();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById('btmp" + szCtrlTag + "').src=^./images/btn_contract-o.gif^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         document.getElementById(^spn" + szCtrlTag + "^).innerHTML = ^hide export data^;"
            szWriteBuffer = "         document.getElementById(^spn" + szCtrlTag + "^).innerHTML = ^Copy and paste content to excel^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById(^gb" + szCtrlTag + "^).style.display = ^none^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         document.getElementById('btmp" + szCtrlTag + "').src=^./images/btn_expand.gif^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         document.getElementById(^spn" + szCtrlTag + "^).innerHTML = ^export table data^; "
            szWriteBuffer = "         document.getElementById(^spn" + szCtrlTag + "^).innerHTML = ^Click here to display data for export^; "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "}"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

      ELSE
         // This is not a grid, so continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS

            SetViewToSubobject( vDialog, "CtrlCtrl" )
            GenJSP_TableExport( vDialog, lFile, szWriteBuffer, szNoPositioning )
            ResetViewFromSubobject( vDialog )

         END
      END  // End of checking if this is a grid

   END // FOR EACH vDialog.Control

END
/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCtrlsRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCtrlsRecurs( VIEW vDialog      BASED ON LOD TZWDLGSO,
                         VIEW vGroupParent BASED ON LOD TZWDLGSO,
                         VIEW vDialogRoot  BASED ON LOD TZWDLGSO,
                         INTEGER           lFile,
                         STRING ( 10000 )  szWriteBuffer,
                         STRING ( 100 )    szIndent,
                         INTEGER           lTableRowCnt,
                         STRING ( 1 )      szNoPositioning,
                         INTEGER           lOffsetX,
                         INTEGER           lOffsetY,
                         STRING ( 100 )    szRepeatGrpKey )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vList    BASED ON LOD TZWDLGSO  // identifies attribute mapping for list entries
   VIEW vEntity  BASED ON LOD TZWDLGSO  // identifies entity mapping for list entries
   VIEW vScope   BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   VIEW vLPLR    BASED ON LOD TZCMLPLO
   STRING ( 100 ) szLPLR_Name
   STRING ( 100 ) szContextName
   STRING ( 100 ) szScopingEntityName
   STRING ( 100 ) szListEntityName
   STRING ( 64 )  szViewName
   STRING ( 100 ) szMapEntityName
   STRING ( 100 ) szMapAttributeName
   STRING ( 100 ) szActionName
   STRING ( 256 ) szAction
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szCtrlCtrlTag
   STRING ( 50 )  szControlType
   STRING ( 50 )  szCtrlCtrlType
   STRING ( 100 ) szListCtrlTag
   STRING ( 100 ) szIndentGroup
   STRING ( 100 ) szIndentHold
   STRING ( 100 ) szNoPositioningHold
   STRING ( 100 ) szPosition
   STRING ( 10 )  szColCount
   STRING ( 100 ) szSort
   STRING ( 256 ) szAbsoluteStyle
   STRING ( 20 )  szAbsoluteWidth
   STRING ( 256 ) szRelStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 50 )  ListBoxDoubleClickAction
   STRING ( 16 )  szTabIndex
   STRING ( 100 ) szSize
   STRING ( 16 )  szWidth
   STRING ( 16 )  szHeight
   STRING ( 1 )   szBorder
   STRING ( 100 ) szRadioGroupName
   STRING ( 256 ) szWidget
   STRING ( 256 ) szText
   STRING ( 64 )  szTerm
   STRING ( 20 )  szJustify
   STRING ( 50 )  szWebCtrlType
   STRING ( 35 )  szControlTag
   STRING ( 85 )  szHTMLCtrlID
   STRING ( 50 )  szGridView
   STRING ( 50 )  szGridOrigViewName
   STRING ( 2 )   szSuffix
   STRING ( 10 )  szMaxStringLength
   STRING ( 200 ) szItemTableHeader
   STRING ( 50 )  szParentWebType
   STRING ( 1 )   szRepeatingGroupFlag
   STRING ( 1 )   szSurveyGroupFlag
   STRING ( 1 )   szGroupBoxAbsPosFlag
   STRING ( 1 )   szGridGroupingFlag
   STRING ( 1 )   szIncludeFileFlag
   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   STRING ( 1 )   szContainer
   STRING ( 1 )   szSpanFlag
   STRING ( 1 )   szDivFlag
   STRING ( 1 )   szToggleFlag
   STRING ( 1 )   szToggleFlag2
   STRING ( 1 )   sziFrameFlag
   STRING ( 1 )   szDashboardFlag
   STRING ( 1 )   szScrollableFlag
   STRING ( 1 )   szScrollingTable
   STRING ( 1 )   szFilterTable
   STRING ( 1 )   szSelectSet
   STRING ( 1 )   szSelectSetRepeat
   STRING ( 1 )   szFileTransferFlag
   STRING ( 1 )   szGroupIsTable
   STRING ( 1 )   szreCAPTCHAFlag
   STRING ( 1 )   szTinyMCEFlag
   STRING ( 1 )   szWCP_Edit
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szWCP_Multiline
   STRING ( 1 )   szWCP_EmailAddress
   STRING ( 1 )   szWCP_Hyperlink
   STRING ( 1 )   szWCP_AbsoluteWidth
   STRING ( 1 )   szWCP_FirstOccurrenceOnly
   STRING ( 1 )   szFirstTimeThrough
   STRING ( 1 )   szGridInGroup
   STRING ( 10 )  szDisabled
   STRING ( 1 )   szTableExport
   STRING ( 100 ) szStyle
   STRING ( 100 ) szRepeatingGroupKey
   DECIMAL        dDLUnits
   INTEGER        LastY_Pos
   INTEGER        LastY_Height
   INTEGER        LastY_PosGroup
   INTEGER        LastX_Pos
   INTEGER        LastX_Width
   INTEGER        MaxY_HeightForLine
   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   INTEGER        nbsp_count
   INTEGER        Size
   INTEGER        lHeight
   INTEGER        lWidth
   INTEGER        lWidthPercent
   INTEGER        lSubtype
   INTEGER        lSubtypeX
   INTEGER        lSort
   INTEGER        lHeader
   INTEGER        lColCnt
   INTEGER        lCol
   INTEGER        lPushBtn
   INTEGER        lEditBox
   INTEGER        lStyleX
   INTEGER        lTemp
   INTEGER        lMaxStringLength
   SHORT          bResetToPlaceHolder
   SHORT          nRC

   PIX_PER_DU( vDialog, dDLUnits )

   // Generate the code for creating HTML statements for controls.
   // A major issue is determining which Controls are on the same row, as they need table entries
   // around them. Note that Groups must be handled differently from other Controls.

   // Make sure the Controls are ordered by row and column.

   szIndentHold = szIndent

   // These variables are for if we are not using absolute positioning.
   LastY_Pos      = 0
   LastY_Height   = 0
   LastY_PosGroup = 0
   LastX_Pos      = 0
   LastX_Width    = 0
   MaxY_HeightForLine = 0
   szFirstTimeThrough = "Y"

   // Process each Control
   FOR EACH vDialog.Control

      //zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
      //zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

      // If szNoPositioning = "Y" then we are not using absolute positioning.  We need to
      // create some divs or spans to make this look similar to what's in the painter.
      IF  szNoPositioning = "Y"

         // Need to reset the x positions
         IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND szFirstTimeThrough != "Y"
         //IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND LastY_Pos != 0
            szWriteBuffer = "</div>  <!-- End of a new line -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            LastX_Pos       = 0
            LastX_Width     = 0

            // If we are using relative positioning, then we have automatically put
            // float:left on any groupboxes.  Because of this, I think if we are onto
            // a new row, then we should put a "clear" div in.
            szWriteBuffer = "<div style=^clear:both;^></div>  <!-- Moving to a new line, so do a clear -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

         // We may have controls on the same line with varying heights.  When determining if there is
         // blank space in between these lines, make sure we are comparing the highest control.
         Y_Pos = LastY_Pos + LastY_Height
         IF  Y_Pos > MaxY_HeightForLine
            MaxY_HeightForLine = Y_Pos
         END

         // Determine if there is blank space in between the y coordinates of the last
         // control and the current control.  If so, then we need to put in a div as a spacer control.
         IF  Y_Pos < vDialog.Control.PSDLG_Y

               //TraceLineS("****  SPACE BETWEEN Ys *** ", vDialog.Control.Tag )
               //Y_Size = ( vDialog.Control.PSDLG_Y - ( LastY_Pos + LastY_Height ) ) * dDLUnits + lOffsetY
               Y_Size = ( vDialog.Control.PSDLG_Y - ( MaxY_HeightForLine ) ) * dDLUnits + lOffsetY
               X_Size = 100
               zIntegerToString( szHeight, 16, Y_Size )
               zIntegerToString( szWidth, 16, X_Size )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = " <!-- This is added as a line spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;^></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         // There should be a <div> surrounding each line.
         IF ( LastY_Pos < vDialog.Control.PSDLG_Y ) OR szFirstTimeThrough = "Y"

               LastY_Pos    = vDialog.Control.PSDLG_Y

               // KJS 08/01/08 - Seems as though I need to give this div a width, otherwise,
               // it many times places things on different lines.
               //KELLY8
               CreateViewFromView( vDialog2, vDialog )

               X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
               SET CURSOR  NEXT vDialog2.Control
               // Loop through all the controls that are at the same y pos and see how wide they
               // are.
               LOOP  WHILE RESULT >= zCURSOR_SET AND LastY_Pos = vDialog2.Control.PSDLG_Y

                  //X_Size = X_Size + vDialog2.Control.SZDLG_X
                  X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
                  SET CURSOR  NEXT vDialog2.Control

               END

               DropView(vDialog2)

               X_Size = X_Size * dDLUnits + lOffsetY
               // KJS 09/03/08 - does this help??
               X_Size = X_Size + 1
               zIntegerToString( szWidth, 16, X_Size )

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<div style=^width:" + szWidth + "px;^>  <!-- Beginning of a new line -->"
               szWriteBuffer = "<div>  <!-- Beginning of a new line -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         X_Pos = LastX_Pos + LastX_Width
         // If there is blank space to the left of a control put in a spacer control.
         IF X_Pos < vDialog.Control.PSDLG_X

            //TraceLineS("****  SPACE BETWEEN Xs *** ", vDialog.Control.Tag )
            X_Size = ( vDialog.Control.PSDLG_X  - ( LastX_Pos + LastX_Width ) ) * dDLUnits + lOffsetX
            Y_Size = vDialog.Control.SZDLG_Y * dDLUnits + lOffsetY
            zIntegerToString( szHeight, 16, Y_Size )
            zIntegerToString( szWidth, 16, X_Size )

            // KJS 11/19/08 - Currently we are placing a span with spacers in between controls that have space between them.
            // If there is a div control (or grid or tab) in a row and there is space before it, then we should really
            // put a floating div there instead of a span.  10/07/09 - Added RadioGrp as well.
            IF vDialog.ControlDef.Tag = "GroupBox" OR vDialog.ControlDef.Tag = "Grid" OR
               vDialog.ControlDef.Tag = "Tab" OR vDialog.ControlDef.Tag = "RadioGrp"
               //szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               // Taking out the height for this spacer since in IE this causes some issue.
               szWriteBuffer = "<div style=^height:1px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               nbsp_count = X_Size / 5
               //TraceLineI("**** nbsp_count ", nbsp_count )

               IF  nbsp_count > 0
                  szWriteBuffer = "<span style=^height:" + szHeight + "px;^>"
                  LOOP WHILE nbsp_count > 0
                      nbsp_count = nbsp_count - 1
                      szWriteBuffer = szWriteBuffer + "&nbsp"
                  END
                  szWriteBuffer = szWriteBuffer + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
            END

         END

         LastY_Pos    = vDialog.Control.PSDLG_Y
         LastY_Height = vDialog.Control.SZDLG_Y
         LastX_Pos    = vDialog.Control.PSDLG_X
         LastX_Width  = vDialog.Control.SZDLG_X
      END  //IF  szNoPositioning = "Y"

      szFirstTimeThrough = ""
      szControlType = vDialog.ControlDef.Tag
      szWebCtrlType = vDialog.Control.WebCtrlType
      szIndent = szIndentHold + "   "
      szCtrlTag = vDialog.Control.Tag

      lSubtype = vDialog.Control.Subtype
      nRC = IsFlagSequenceSet( lSubtype, 134217728 )  // zCONTROL_INVISIBLE  0x08000000L
      IF nRC != 0     // Invisible was set
         szControlType = ""  // prevent generation
      ELSE
         // Initialize the szAbsoluteStyle variable with X and Y values.
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )

      // szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"     causes extra comment id line
      // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "

      IF szControlType = "GroupBox"

         // Do I need to check if this is a groupbox and we are not using absolute positioning, then I want to
         // check if there are other groupboxes at this same PSDLG_Y.  If so, then these groups would need to
         // have a float:left applied to them.
         // Would I only want to do this once for the row?
         // Or, do I want to put a float on every div created and then create a <div style="clear:both;"</div> after
         // every row?
         //IF  szNoPositioning = "Y" AND szCheckedRowForGroups         //END

         // InitializeRepeatingGroup for GroupBox

         // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
         // as a table and try and position what is in this group box as a table.
         szGroupIsTable = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
         IF RESULT >= zCURSOR_SET
            szGroupIsTable = "Y"
         END

         // There are times when the user wants to paint a div that has no height so it will grow with the
         // data within it.  This flags the div will have no height.
         szNoHeightFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
         IF RESULT >= zCURSOR_SET
            szNoHeightFlag = "Y"
         END

         // There are times when the user wants to paint a div that has no width so it will grow with the
         // data within it.  This flags the div will have no width.
         szNoWidthFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
         IF RESULT >= zCURSOR_SET
            szNoWidthFlag = "Y"
         END

         // KJS 05/01/09
         // When the user paints a grid, they may not want this grid (and any leading header text) to show
         // during run-time if there is no data for the grid.  If the user puts this grid and any other
         // controls in a groupbox with the control property of "Table Grouping", we will not display anything
         // within this groupbox if the grid has no data during run-time.
         szGridGroupingFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Grid Grouping"
         IF RESULT >= zCURSOR_SET
            szGridGroupingFlag = "Y"
            // This div should not have any height or width.
            szNoHeightFlag = "Y"
            szNoWidthFlag = "Y"
         END

         // Set flag for RepeatingGroup either from old szWebCtrlType or new WebControlProperty.
         // Repeating Group is used for the situation where a Group of controls is to be repeated for each controlling
         // entity, very much as is done in Reports. An example in Zencas is the page of student pictures and basic
         // information for either a class or an advisor.
         szRepeatingGroupFlag = ""
         IF szWebCtrlType = "RepeatingGroup"
            szRepeatingGroupFlag = "Y"
         ELSE
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Repeating Group"
            IF RESULT >= zCURSOR_SET
               szRepeatingGroupFlag = "Y"
            END
         END
         
         szSelectSetRepeat = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Select Set (Repeat Grp)"
         IF RESULT >= zCURSOR_SET
            szSelectSetRepeat = "Y"
         END

         // Set flag for Survey Group, which is a repeating group for survey questions.
         szSurveyGroupFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Survey Group"
         IF RESULT >= zCURSOR_SET
            szSurveyGroupFlag = "Y"
         END

         // Set flag for FileTransfer, as all GroupBox and subcontrol processing is skipped for that case.
         szFileTransferFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "File Transfer to Server"
         IF RESULT >= zCURSOR_SET
            szFileTransferFlag = "Y"
         END

         szIncludeFileFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Include File"
         IF RESULT >= zCURSOR_SET
            szIncludeFileFlag = "Y"
         END

         // Wondering if somehow this should be different in the sense that a group box can only be
         // either div, include file, iframe, table etc. whereas the "No Height" etc. can go with
         // div but only div, "Include File" etc.  How would a user know?
         sziFrameFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "iFrame"
         IF RESULT >= zCURSOR_SET
            sziFrameFlag = "Y"
         END

         szDashboardFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Dashboard"
         IF RESULT >= zCURSOR_SET
            szDashboardFlag = "Y"
         END

         szreCAPTCHAFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "reCAPTCHA"
         IF RESULT >= zCURSOR_SET
            szreCAPTCHAFlag = "Y"
         END

         szToggleFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Show/Hide Toggle"
         IF RESULT >= zCURSOR_SET
            szToggleFlag = "Y"
         END

         szToggleFlag2 = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Show/Hide Toggle2"
         IF RESULT >= zCURSOR_SET
            szToggleFlag2 = "Y"
         END

         // Set Group flags either from old szWebCtrlType or new WebControlProperty.
         IF szWebCtrlType = "Scrollable"
            szScrollableFlag = "Y"
         ELSE
            szScrollableFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrollable"
            IF RESULT >= zCURSOR_SET
               szScrollableFlag = "Y"
            END
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET
               szDivFlag = "Y"
            END
         END

         szContainer = ""
         //SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Container Absolute Size"
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Fieldset Absolute Pos"
         IF RESULT >= zCURSOR_SET
            szContainer = "A"
         END

         //SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Container"
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Fieldset"
         IF RESULT >= zCURSOR_SET
            szContainer = "C"
         END
         
         // A groupbox might want the children to be absolutely positioned.  Allow for this.
         szGroupBoxAbsPosFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Pos"
         IF RESULT >= zCURSOR_SET
            szGroupBoxAbsPosFlag = "Y"
         END

      END

      // Initialize the szAbsoluteStyle variable with X and Y values.
      IF szNoPositioning = "Y"
      
         lWidth = vDialog.Control.SZDLG_X * dDLUnits
         lHeight = vDialog.Control.SZDLG_Y * dDLUnits
         zIntegerToString( szWidth, 10, lWidth )
         zIntegerToString( szHeight, 10, lHeight )
      
         // If szGroupBoxAbsPosFlag = "Y" then we are saying that the children of this group box will
         // be absolutely positioned.
         IF szControlType = "GroupBox" AND szGroupBoxAbsPosFlag = "Y"
         
            szNoPositioningHold = szNoPositioning
            szNoPositioning = ""  // we want absolute positioning on all child controls
            
            IF szNoHeightFlag = "Y" // We might not want the groupbox to have a height (so it grows)
               szAbsoluteStyle = "style=^float:left;position:relative; width:" + szWidth + "px;^"
            ELSE
               //zIntegerToString( szHeight, 10, lHeight * dDLUnits )
               szAbsoluteStyle = "  style=^float:left;position:relative; width:" + szWidth + "px; height:" + szHeight + "px;^"
            END                      
         ELSE 
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szAbsoluteStyle = ""
         ELSE
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
         ELSE
         IF szControlType = "GroupBox" AND szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            szAbsoluteStyle = "style=^height:" + szHeight + "px;^"
         ELSE
            CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
         END
         END
         END
         END
      ELSE
      IF  szNoPositioning = "S" // We are not creating any style information.
         szAbsoluteStyle = ""
      ELSE
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
      END
      END
      
      szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      IF szControlType = "GroupBox" AND szGroupIsTable = "Y"

         X_Size = vDialog.Control.SZDLG_X
         Y_Size = vDialog.Control.SZDLG_Y

         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         CreateViewFromView( vGroupParent, vDialog )

         // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndentGroup = szIndent
         GenJSPJ_CrteGroupTable( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, lTableRowCnt, szNoPositioning, szRepeatGrpKey )
         ResetViewFromSubobject( vDialog )
         DropView( vGroupParent )
         vGroupParent = 0
      END

      // Inside this div there should be a grid control.  Look for the first grid control and check its mapping.
      // During run-time, we will not display anything within this groupbox if the grid has no data.  If there is
      // other items in the group box don't worry about them.  Should we give an error message if this group box
      // has no grid?
      IF szControlType = "GroupBox" AND szGridGroupingFlag = "Y"

         // If we are not using absolute positioning, then make all the divs float left.
         IF szNoPositioning = "Y"
            zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
         ELSE
         IF szNoPositioning = "S"
            szAbsoluteStyle = "" // We are not creating any style information.
         END
         END

         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Div on a Group Control requests that all the controls inside the group line up one under the other.
         szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szViewName = ""
         szMapEntityName = ""

         SetViewToSubobject( vDialog, "CtrlCtrl" )
         FOR EACH vDialog.Control
            IF vDialog.ControlDef.Tag = "Grid" AND szViewName = ""
               // Should I get grid mapping here?
               szViewName = vDialog.CtrlMapView.Name
               szMapEntityName = vDialog.CtrlMapLOD_Entity.Name
            END
         END
         ResetViewFromSubobject( vDialog )

         // If there was a grid with mapping, use these to check the existence of the entity and paint what's in the groupbox
         // if the entity exists.
         IF szViewName != "" AND szMapEntityName != ""

            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + szViewName + " = " + "task.getViewByName( ^" + szViewName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( VmlOperation.isValid( " + szViewName + " ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + szViewName + ".cursor( ^" + szMapEntityName + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Generate everything within this groupbox.
            CreateViewFromView( vGroupParent, vDialog )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0


            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            // Do I drop the view here?
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
            // Should I give a message here that there is no grid within this groupbox or
            // should I just ignore it?
         END

         szWriteBuffer = "</div>  <!--  " + vDialog.Control.Tag + " --> "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "" AND szFileTransferFlag = "" AND szGroupIsTable = "" AND szGridGroupingFlag = ""

         // Is this clear even working???!!!
         IF szWebCtrlType = "Clear"
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.PSDLG_X * dDLUnits + lOffsetX  // borrow these for a second
            Y_Size = vDialog.Control.PSDLG_Y * dDLUnits + lOffsetY
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, X_Size, Y_Size, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szContainer != ""

         // MessageSend( vDialog, "", "Found Container GroupBox",      // debugging only
         //              szHTMLCtrlID,
         //              zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )


            lWidth = vDialog.Control.SZDLG_X
            lHeight = vDialog.Control.SZDLG_Y //- 10

            IF szContainer = "A"
               szNoPositioningHold = szNoPositioning
               szNoPositioning = ""  // we want absolute positioning on all child controls
               zIntegerToString( szWidth, 10, lWidth * dDLUnits )
               IF szNoHeightFlag = "Y" // We might not want the groupbox to have a height (so it grows)
                  szAbsoluteStyle = "style=^position:relative; width:" + szWidth + "px;^"
               ELSE
                  zIntegerToString( szHeight, 10, lHeight * dDLUnits )
                  szAbsoluteStyle = "  style=^position:relative; width:" + szWidth + "px; height:" + szHeight + "px;^"
               END
            //ELSE
            //   szAbsoluteStyle = ""
            END

            IF szClass = ""
               szWriteBuffer = "<fieldset" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<fieldset" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<legend>" + vDialog.Control.Text + "</legend>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )

            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</fieldset>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szNoPositioning = szNoPositioningHold
         ELSE
         IF szSpanFlag = "Y"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<span" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<span" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )

            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
         IF szWebCtrlType = "DivScroll"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            ELSE
            IF szNoPositioning = "S"
               szAbsoluteStyle = "" // We are not creating any style information.
            END
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div "+ szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
         IF  szDashboardFlag = "Y"

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

//*******************************  DASHBOARD CODE   ******************************************************

            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardSource = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardMore = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szFunction = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDisplayFrame = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardMax = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardCnt = 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxColumns = 3;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxInCol = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iNbrInCol = 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColStartNbr = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColEndNbr = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iRemainder = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColNbr = 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iSortOrder = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int i = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   vKZXMLPGO = task.getViewByName( ^KZXMLPGO^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   vKZXMLPGO.cursor( ^Session^ ).setAttribute( ^DashboardFrameCount^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //Order by Sort Order "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //nRC = " + vDialog.CtrlMapView.Name + ".OrderEntityForView( " + vDialog.CtrlMapView.Name + ", ^DashboardFrameUser^, ^PresentationSortOrder A^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // task.log( ).info( ^*** nRC after OrderEntityForView *** ^ + nRC );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         csrRC = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setFirst( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         while ( csrRC.isSet() ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            szDisplayFrame = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getAttribute( ^ActiveOnCurrentDashboard^ ).getString( ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( StringUtils.equals( szDisplayFrame, ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // When we've reached the max number of columns then "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // start at column one again.   "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if (iColNbr > iMaxColumns ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iColNbr = 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // Set what column this frame will be positioned in. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getAttribute( ^wColumnNbr^ ).setValue( iColNbr, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iDashboardMax++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColNbr++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            csrRC =  " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setNextContinue( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         iRemainder = iDashboardMax % iMaxColumns;  // mod function  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( iRemainder == 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns) + 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Loop through each frame that is in the first column, then those in the "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // second column etc.        "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         for  ( i=1; i <= iMaxColumns; i++ ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColNbr = i;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // If we are onto a new dashboard column, put the closing tag on the previous column "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( i != 1 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  <div id=^column-<%=iColNbr%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // These variables are used in the Expand function. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColStartNbr = iDashboardCnt;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColEndNbr = (iColStartNbr + iMaxInCol) - 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if (iColEndNbr > iDashboardMax ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColEndNbr = iDashboardMax;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            csrRC = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setFirst( ^wColumnNbr^, i, );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ( csrRC.isSet() ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               szDisplayFrame = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getAttribute( ^ActiveOnCurrentDashboard^ ).getString( ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iSortOrder = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getIntegerFromAttribute( ^PresentationSortOrder^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( iSortOrder <= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iSortOrder = iDashboardCnt;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  task.log( ).info( ^*** There is no sort order *** ^ + iSortOrder );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getAttribute( ^wFrameNbr^ ).setValue( iDashboardCnt, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // task.log( ).info( ^*** Dashboard Column *** ^ + iColNbr );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( StringUtils.equals( szDisplayFrame, ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardSource = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrame^ ).getAttribute( ^DashboardDisplayURL^ ).getString( ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardMore = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrame^ ).getAttribute( ^ExpandedDisplayURL^ ).getString( ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szFunction = ^Expand(this, ^ + iDashboardCnt + ^, ^ + iColNbr + ^, ^ + iColStartNbr + ^, ^ + iColEndNbr + ^ )^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  // task.log( ).info( ^*** Expand Function *** ^ + szFunction );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     <div id=^rpt-display-<%=iDashboardCnt%>^ class=^region-display^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div class=^region-header^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-title-<%=iDashboardCnt%>^ class=^region-header-title^ >A Report <%=iSortOrder%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-expand-<%=iDashboardCnt%>^ class=^region-header-title-expand^ title=^Expand^ onclick=^<%=szFunction%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-open-<%=iDashboardCnt%>^ class=^region-header-title-open^ title=^More Detail...^ onclick=^OpenFrame(this,'<%=szDashboardMore%>' );^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div id=^rpt-display-content-<%=iDashboardCnt%>^ class=^region-body-content^ > "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          <iframe src=^<%=szDashboardSource%>^ width=^100%^ height=^100%^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          </iframe> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "    "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                   iDashboardCnt++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               } // if ( StringUtils.equals( szDisplayFrame, ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               csrRC =  " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^, ^wColumnNbr^, i ).setNextContinue( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } // While "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            //vComboBox2.drop( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }  // For each i "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Now close the last column div. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = " "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      } // if CheckExistenceOfEntity "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

//*****************************************  END OF DASHBOARD   ********************************************************

            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE  // IF  szDashboardFlag = "Y"

            IF  sziFrameFlag = "Y"

               // If we are not using absolute positioning, then make all the divs
               // float left.
               IF  szNoPositioning = "Y"
                  zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
               ELSE
               IF szNoPositioning = "S"
                  szAbsoluteStyle = "" // We are not creating any style information.
               END
               END

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Div on a Group Control requests that all the controls inside the group line up one under the other.
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<iframe " + szAbsoluteStyle + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ src=^" + vDialog.Control.WebFileName + "^>  <!-- " + vDialog.Control.Tag + " --> "
               ELSE
                  szWriteBuffer = "<iframe class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "</iframe>  <!-- " + vDialog.Control.Tag + " --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            ELSE
            // Div is the default group for now so we don't have to check IF szDivFlag = "Y" for the moment.
            //IF szDivFlag = "Y"

            // Add Scrollable if requested.
            IF szScrollableFlag = "Y"
               zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            END

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            ELSE
            IF szNoPositioning = "S"
               szAbsoluteStyle = "" // We are not creating any style information.
            END
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // If this is a div we want to toggle
            IF szToggleFlag = "Y"
               //szWriteBuffer = "<div style=^float:left;^>  <!-- Div surrounding toggle --> "
               // KJS 11/05/15 - Jeff asked for float to be changed to clear.
               szWriteBuffer = "<div style=^clear:left;^>  <!-- Div surrounding toggle --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // KJS 03/01/13 - Jeff was having problems because when there was only href="#", if this is lower down on the page, it
               // jumps to the top of the page. Adding the #CtrlTag, keeps it anchored.
               szWriteBuffer = "<div style=^height:20px;^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<a href=^#" + szCtrlTag + "^ onclick=^animatedcollapse.toggle('" + szCtrlTag + "');^ style=^^>" + vDialog.Control.Text + "</a></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END


            // KJS 12/11/15 - We are creating a Toggle2 for Jeff's team (Kindra). Don't want to change what normal toggler's do because that will screw them up.
            IF szToggleFlag2 = "Y"
                        
               //szWriteBuffer = "<div style=^float:left;^>  <!-- Div surrounding toggle --> "
               // KJS 11/05/15 - Jeff asked for float to be changed to clear.
               szWriteBuffer = "<div style=^clear:left;^>  <!-- Div surrounding toggle --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // KJS 03/01/13 - Jeff was having problems because when there was only href="#", if this is lower down on the page, it
               // jumps to the top of the page. Adding the #CtrlTag, keeps it anchored.
               szWriteBuffer = "<div style=^height:20px;^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               szWriteBuffer = "<a href=^#^ rel=^toggle['" + szCtrlTag + "']^ data-openimage=^toggle-open.png^ data-closedimage=^toggle-close.png^>"
               szWriteBuffer = szWriteBuffer + "<div class=^showhidetoggle^><div style=^float:right^><img src=^toggle-close.png^ /></div>" + vDialog.Control.Text + "</div></a></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Should we put reCAPTCHA code here???  Or should I have done this up above?
            IF szreCAPTCHAFlag = "Y"
               szWriteBuffer = "<script type=^text/javascript^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   src=^https://api-secure.recaptcha.net/challenge?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <iframe src=^https://api-secure.recaptcha.net/noscript?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       height=^300^ width=^500^ frameborder=^0^></iframe><br>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <textarea name=^recaptcha_challenge_field^ rows=^3^ cols=^40^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   </textarea>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <input type=^hidden^ name=^recaptcha_response_field^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       value=^manual_challenge^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            ELSE

            // KJS 09/19/08 - Adding the ability to include a file inside a div.  I am assuming that if there
            // is an include file, there will be nothing else inside the div so we dont' need to call
            // GenJSPJ_CrteCtrlsRecurs.
            IF  szIncludeFileFlag = "Y"

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%@include file=^" + vDialog.Control.WebFileName + "^ %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            ELSE
               // Only put this in if there was no web type.  We might want to change this later.
               IF  szDivFlag = ""
                  IF vDialog.Control.Text != ""
                     szWriteBuffer = "<div " + szHTMLCtrlID + ">" + vDialog.Control.Text + "</div>"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
               END

               IF szToggleFlag = "Y" OR szToggleFlag2 = "Y"
                  //szWriteBuffer = "<script type=^text/javascript^>animatedcollapse.addDiv('" + szCtrlTag + "', 'fade=400,hide=1,persist=1');animatedcollapse.init();</script>"
                  szWriteBuffer = "<script type=^text/javascript^>animatedcollapse.addDiv('" + szCtrlTag + "', 'fade=400,hide=1,persist=1');</script>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
               CreateViewFromView( vGroupParent, vDialog )
               //TraceLineS("*** About to call recurs code from div *** ", vDialog.Control.Tag )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               szIndentGroup = szIndent
               GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                        lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0
            END
            END

            IF szToggleFlag = "Y" OR szToggleFlag2 = "Y"
               szWriteBuffer = "</div> <!-- End Div for surrounding toggle --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!--  " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         END
         END
         END
         END
         END  // IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "" AND szFileTransferFlag = "" AND szGroupIsTable = "" AND szGridGroupingFlag = ""
         IF szGroupBoxAbsPosFlag = "Y"
            szNoPositioning = szNoPositioningHold
         END
      ELSE  // Not a groupbox
         IF szControlType = "Text"  // TEXT
            GenJSPJ_CrteText( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, szCtrlTag,
                              szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "EditBox"  // EDITBOX
            GenJSPJ_CrteEditBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                 "", szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "Calendar"  // CALENDAR
            GenJSPJ_CrteCalendar( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                  "", szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "RadioGrp" // RADIO BUTTON GROUP
            szRadioGroupName = szCtrlTag
            szWriteBuffer = "<% strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strRadioGroupValue = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ ).getString( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
            //I'm going to do this like the way group box is (or was).  If there is text
            //to go on the box then we will create <fieldset.  If there is no text then
            //we will create a div.
            //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
            //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
            //an id and name but think it should.
            IF vDialog.Control.Text = ""
               szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ " + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<fieldset " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSPJ_CrteCtrlsRadio( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                    szRadioGroupName, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            IF vDialog.Control.Text = ""
               szWriteBuffer = "</div>"
            ELSE
               szWriteBuffer = "</fieldset>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         IF szControlType = "CheckBox"  // CHECKBOX
            GenJSPJ_CrteCheckBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                  "", szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "PushBtn"  // PUSH BUTTON
         
            GenJSPJ_CrtePushButton( vDialog, vGroupParent, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                    "", szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            
         END  //End of PushBtn

         IF szControlType = "ComboBox"  // COMBOBOX
            GenJSPJ_CrteComboBox( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                  szCtrlTag, "", szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "Bitmap" OR szControlType = "BitmapBtn"  // BITMAP / JPG
            GenJSPJ_CrteJPG( vDialog, lFile, szWriteBuffer, szIndent,
                             szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "ListBox"  // LISTBOX
            GenJSPJ_CrteListBox( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                 szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END  // IF szControlType = "ListBox"

         IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "Y"  // REPEATING GROUP

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP BEGIN */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP BEGIN -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Begin with JSP first cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                               vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               // KJS 07/10/15 - Adding Select Set to the repeating group
               IF szSelectSetRepeat = "Y"
                  // if ( set.isSelected( View.Entity )
                  // Maybe use field WebFileName on the control as the SelectSet name? Since that is only for group box...
                  IF vDialog.Control.WebFileName != ""
                     szWriteBuffer = "      SelectSet set = " + vDialog.CtrlMapView.Name + ".getSelectSet( ^" + vDialog.Control.WebSelectSetName + "^ );"
                  ELSE
                     szWriteBuffer = "      SelectSet set = " + vDialog.CtrlMapView.Name + ".getSelectSet( );"
                  END
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               

               szWriteBuffer = "      long   lEntityKeyRG" + szCtrlTag + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strEntityKeyRG" + szCtrlTag + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
               ELSE
                  szScopingEntityName = ""
               END

               DropView( vDialog2 )

               szWriteBuffer = "      csrRC = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^ ).setFirst( " + szScopingEntityName + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( csrRC.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               // KJS 07/10/15 - Add SelectSet to repeating group
               IF szSelectSetRepeat = "Y" 
                  szWriteBuffer = "         if ( set.isSelected( " + vDialog.CtrlMapView.Name + ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name  + "^ ) ) )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
               
               szWriteBuffer = "         lEntityKeyRG" + szCtrlTag + " = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKeyRG" + szCtrlTag + " = Long.toString( lEntityKeyRG" + szCtrlTag + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process GroupBox begin.

         // If we are not using absolute positioning, then make all the divs float left.
         IF  szNoPositioning = "Y"
            zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
         ELSE
         IF szNoPositioning = "S"
            szAbsoluteStyle = "" // We are not creating any style information.
         END
         END

         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS 09/11/08 - Now that we can generate using relative positioning, this
            // repeating group doesn't work right.  Instead of using fieldset, I will use the
            // div.
            IF  szNoPositioning = "Y" OR szNoPositioning = "S"
               IF szNoPositioning = "Y"
                  zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
               ELSE          
               IF szNoPositioning = "S"
                  szAbsoluteStyle = "" // We are not creating any style information.
               END
               END
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<div " + szAbsoluteStyle + "> <!-- div for repeating group --> "
               ELSE
                  szWriteBuffer = "<div class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- div for repeating group -->"
               END
            ELSE
               CreateRelStyleString( vDialog, szRelStyle, 0, 0, "" )
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<fieldset " + szRelStyle + ">"
               ELSE
                  szWriteBuffer = "<fieldset class=^" + szClass + "^ " + szRelStyle + ">"
               END
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Process fields on GroupBox.
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            szRepeatingGroupKey = "::<%=strEntityKeyRG" + szCtrlTag + "%>"
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatingGroupKey )
            //szRepeatGrpKey = "::<%=strEntityKeyRG%>"
            //GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
            //                         lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            szRepeatingGroupKey = ""
            DropView( vGroupParent )
            vGroupParent = 0

            // Process GroupBox end.
            IF  szNoPositioning = "Y" OR szNoPositioning = "S"
               szWriteBuffer = "</div>   <!-- end div for repeating group -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               IF szNoPositioning = "Y" 
                  szWriteBuffer = "<div style=^clear:both;^></div> <!-- clear before each repeating group -->"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            ELSE
               szWriteBuffer = "</fieldset>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            IF szSelectSetRepeat = "Y" 
               szWriteBuffer = "         } // SelectSet end"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            

            // Conclude with JSP next cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "         csrRC = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^ ).setNextContinue( );"  // now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
                               //"^ ).setNext( " + szScopingEntityName + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP END */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP END -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END  // END OF REPEATING GROUP
/*
         // SURVEY GROUP
         IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y" AND vDialog.CtrlMapView EXISTS
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<!-- SURVEY GROUP BEGIN -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div> <!-- surrounding div for survey --> "
            ELSE
               szWriteBuffer = "<div class=^" + szClass + "^>  <!-- surrounding div for survey -->"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iQuestionCount = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iQuestionInGroupCount = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szQuestion = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szTblMultChName = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szCheckType = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String strBtnTwo = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String strBtnOne = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szGroupNbr = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // First begin with Question Group loop.
            szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                         vDialog.CtrlMapView.Name + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( nRC > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // See if a scoping entity has been specified, and if so, use it.
            CreateViewFromView( vDialog2, vDialog )
            SET CURSOR NEXT vDialog2.CtrlMap
            IF vDialog2.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
            ELSE
               szScopingEntityName = ""
            END
            DropView( vDialog2 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                         ".CheckExistenceOfEntity( strSessionId, ^SurveyQuestionGroup^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szGroupNbr = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestionaire^, ^wCurrentSurveyGroup^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorFirst( strSessionId, ^SurveyQuestionGroup^" +
                         ", ^wOrder^, szGroupNbr, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szGroupName = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestionGroup^, ^Name^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<div class=^surveygroup^> <!-- div for survey question group --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<span><%=szGroupName%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div> <!-- end div for survey question group --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<div class=^surveygroupspacing^> <!-- div for survey question group spacing --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
             szWriteBuffer = "</div> <!-- end div for survey question group spacing --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // Now go through question loop.
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // See if a scoping entity has been specified, and if so, use it.
            CreateViewFromView( vDialog2, vDialog )
            SET CURSOR NEXT vDialog2.CtrlMap
            IF vDialog2.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
            ELSE
               szScopingEntityName = ""
            END
            DropView( vDialog2 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorFirst( strSessionId, ^" + "SurveyQuestion" +
                         "^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      while ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Get the Question
            szWriteBuffer = "          iQuestionCount = iQuestionCount + 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szQuestion = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Number^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          if ( szQuestion.length() > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "             szQuestion = szQuestion + ^. ^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szQuestion = szQuestion + " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Question^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionID = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^ID^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szHelp = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^HelpDescription^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szType = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Type^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szCommentFlag = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^AllowCommentFlag^, ^^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionIDName = ^QuestionID^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionTypeName = ^QuestionType^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szAllowCommentName = ^AllowComment^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szIsOptional = ^IsOptionalt^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szResponseIsOptional = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^ResponseIsOptional^, ^^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionHelp = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^HelpDescription^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // THIS IS WHERE WE WOULD CREATE THE VARIOUS QUESTIONS ETC>
            // We have a couple of hidden inputs to keep track of the question id and the type.
            szWriteBuffer = "   <input name=^<%=szQuestionIDName%>^ id=^<%=szQuestionIDName%>^ type=^hidden^ value=^<%=szQuestionID%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szQuestionTypeName%>^ id=^<%=szQuestionTypeName%>^ type=^hidden^ value=^<%=szType%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szAllowCommentName%>^ id=^<%=szAllowCommentName%>^ type=^hidden^ value=^<%=szCommentFlag%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szIsOptional%>^ id=^<%=szIsOptional%>^ type=^hidden^ value=^<%=szResponseIsOptional%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<div class=^surveyquestion^> <!-- div for survey question --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<span title=^<%=szQuestionHelp%>^ ><%=szQuestion%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div> <!-- end div for survey question --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:5px;^></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Create Question Text
            szWriteBuffer = "<div class=^surveyquestionanswers^>  <!-- div around survey answers --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Check if this is single answer or multiple choice
            szWriteBuffer = "   if ( szType.equals(^Text^) ) // Text Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Single Question code
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // MLEdit: mleTextAnswer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szTxtAnswerName = ^txtAnswer^ + szQuestionID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^wTextAnswer^, ^^, 10000 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div >  <!-- textarea answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<textarea name=^<%=szTxtAnswerName%>^ id=^<%=szTxtAnswerName%>^ style=^width:700px;height:94px;border:solid;border-width:2px;border-style:'groove';^ wrap=^wrap^><%=strErrorMapValue%></textarea>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div >  <!-- end textarea answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // End of Single Question code
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else if ( szType.equals(^Yes/No^) ) // Yes/No Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Start of Multiple choice code
            szWriteBuffer = "      if ( szType.equals(^Multiple Choice Single Response^) ) // Multiple Choice Single Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCheckType = ^radio^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCheckType = ^checkbox^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szTblMultChName = ^tblMultChoice^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            //Create table that will list multiple choice answers
               // Check if this should be a radio or checkbox.
            szWriteBuffer = "<table  cols=2 style=^^  name=^<%=szTblMultChName%>^ id=^<%=szTblMultChName%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      iTableRowCnt = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      int    lEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      String strEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strTag;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswer = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswerName = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswerId = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strAnswerText = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strQuestionChoiceID = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      zeidon.zView vtblMultChoice = new zeidon.zView( strSessionId );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      vtblMultChoice.CreateViewFromView( strSessionId, " + vDialog.CtrlMapView.Name + " );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC2 = vtblMultChoice.SetCursorFirst( strSessionId, ^SurveyMultiChoiceOption^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      while ( nRC2 >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         iTableRowCnt++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         lEntityKey = vtblMultChoice.GetEntityKey( strSessionId, ^SurveyMultiChoiceOption^ );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         strEntityKey = Integer.toString( lEntityKey );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswer = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strAnswerText = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^OptionText^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswer = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^wSelectedAnswer^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strQuestionChoiceID = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^ID^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( szCheckType.equals(^radio^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswerName = ^chkAnswer^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswerName = ^chkAnswer^ + strQuestionChoiceID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswerId = ^chkAnswer^ + strQuestionChoiceID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         if ( strchkAnswer.equals( ^Y^ ) )"
            szWriteBuffer = "         if ( strchkAnswer.equals( strQuestionChoiceID ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswer = ^<input name='^ + strchkAnswerName + ^' id='^ + strchkAnswerId + ^' value='^ + strQuestionChoiceID + ^' type='^ + szCheckType + ^'  CHECKED >^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswer = ^<input name='^ + strchkAnswerName + ^' id='^ + strchkAnswerId + ^' value='^ + strQuestionChoiceID + ^' type='^ + szCheckType + ^' >^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <td style=^width:15px;^ nowrap><%=strchkAnswer%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <td nowrap><%=strAnswerText%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC2 = vtblMultChoice.SetCursorNext( strSessionId, ^SurveyMultiChoiceOption^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC2 = vtblMultChoice.DropView( strSessionId );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // End of Multiple choice code
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // END OF CREATING VARIOUS QUESTIONS
            szWriteBuffer = "</div>  <!-- div around survey answers --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Does question allow a comment
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( szCommentFlag.equals(^Y^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szCommentText = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szCommentText = " + vDialog.CtrlMapView.Name +
                 ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^RequestCommentText^, ^^, 0 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( szCommentText.equals(^^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCommentText = ^Comment^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:24px^></div>  <!-- Spacer before comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div class=^surveyquestioncommenttext^>  <!-- div for comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<span><%=szCommentText%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- End of comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:5px;^></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div class=^surveyquestioncomment^>  <!-- div comment text answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // MLEdit: MLEdit1"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String szCommentName = ^txtComment^ + szQuestionID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^wComment^, ^^, 10000 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<textarea name=^<%=szCommentName%>^ id=^<%=szCommentName%>^ style=^width:700px;height:94px;border:'2px solid';border-style:'groove';^ wrap=^wrap^><%=strErrorMapValue%></textarea>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- comment text answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // End of Question Comment
            // Spacing between questions
            szWriteBuffer = "<div class=^surveyquestionspacing^></div> <!-- spacing between survey questions -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Loop to next Question.
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorNext( strSessionId, ^" + "SurveyQuestion" +
                         "^, ^" + szScopingEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Loop to next Question Group.
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorNext( strSessionId, ^" + "SurveyQuestionGroup" +
                         "^, ^" + szScopingEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // This is where we create the buttons at the bottom of the page.
            // Create Next and Prev buttons if necessary and when we are on the last page
            // create the Done button.  These assume that there are the following actions
            // in the dialog for this page: SUBMIT_Survey, NEXT_SurveyPage and PREV_SurveyPage
            szWriteBuffer = "         // This is where we create the buttons at the bottom of the page.  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Create Next and Prev buttons if necessary and when we are on the last page"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // create the Done button.  These assume that there are the following actions"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in the dialog for this page: SUBMIT_Survey, NEXT_SurveyPage and PREV_SurveyPage"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnTwo = ^<button type='button' name='btnNext' id='btnNext' value='' onclick='NEXT_SurveyPage( )'>Next-></button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( Integer.parseInt(szGroupNbr) > 1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnOne = ^<button type='button' name='btnPrev' id='btnPrev' value='' onclick='PREV_SurveyPage( )'><-Prev</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnTwo = ^<button type='button' name='btnSubmit' id='btnSubmit' value='' onclick='SUBMIT_Survey( )'>Submit Survey</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( Integer.parseInt(szGroupNbr) > 1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnOne = ^<button type='button' name='btnPrev' id='btnPrev' value='' onclick='PREV_SurveyPage( )'><-Prev</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "   <input name=^SurveyQuestionCount^ id=^SurveyQuestionCount^ type=^hidden^ value=<%=iQuestionCount%>>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- end div for survey -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<div class=^surveybuttons^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<td><%=strBtnOne%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<td><%=strBtnTwo%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<!-- SURVEY GROUP END -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  // END OF SURVEY GROUP
*/

         // Generation of the Tab control
         IF szControlType = "Tab"

            IF  vDialog.Control.CSS_Class != ""
               szClass = "tab-pane " + vDialog.Control.CSS_Class
            ELSE
               szClass = "tab-pane"
            END

            // If we are using relative positioning, don't give the tab a height.
            IF  szNoPositioning = "Y"
               // We might not want the groupbox to have a height (so it grows)
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
            ELSE
            IF szNoPositioning = "S"
               szAbsoluteStyle = "" // We are using no style
            END
            END

            // Create the parent tab control
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div id=^" + szCtrlTag + "^ class=^" + szClass + "^ " + szAbsoluteStyle + "> <!-- Beginning of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //<script type="text/javascript">tp1 = new WebFXTabPane( document.getElementById( "tabPane1" ) );</script>
            szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + " = new WebFXTabPane( document.getElementById( ^" + szCtrlTag + "^ ) );</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )

            // If we are using relative positioning, don't give each tab page a height.
            IF  szNoPositioning = "Y"
               szStyle = ""
            ELSE
               szStyle = "style=^height:" + szHeight + "px;^"
            END

            // Set to the ctrl subobject to loop thru the tabs on the tab control
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            OrderEntityForView( vDialog, "Control", "Type A" )

            FOR EACH vDialog.Control

               szCtrlCtrlTag = vDialog.Control.Tag

               IF  vDialog.Control.CSS_Class != ""
                  szClass = "tab-page " + vDialog.Control.CSS_Class
               ELSE
                  szClass = "tab-page "
               END

               // Currently there are three actions associated with the tab (premapoi, postmapoi and preleae) currently I can only see
               // onclick working so I am not going to worry about pre-leae yet.  Also, we are not differenciating between the
               // premapoi and postmapoi, just take the action if one of these exists.
               szActionName = ""
               FOR  EACH  vDialog.EventAct
                  IF  vDialog.Event.Type = "1" OR vDialog.Event.Type = "3"
                     szActionName = vDialog.EventAct.Tag
                     nRC = zstrcmpi( szActionName, "alt-f4" )
                     IF nRC = 0
                        szActionName = "AltF4"
                     END
                  END
               END

               szWriteBuffer = "<div id=^" + szCtrlCtrlTag + "^ class=^" + szClass + "^ " + szStyle + "> <!-- Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF  szActionName = ""
                  szWriteBuffer = "<h2 class=^tab^><span>" + vDialog.Control.Text +"</span></h2>"
               ELSE
                  szWriteBuffer = "<h2 class=^tab^><span onclick=^" + szActionName + "( );^>" + vDialog.Control.Text +"</span></h2>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + ".addTabPage( document.getElementById( ^" + szCtrlCtrlTag + "^ ) );</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szIndentGroup = szIndent
               CreateViewFromView( vGroupParent, vDialog )
               //Set to ctrl subobject and generate the controls that are on this tab
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                        lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )

               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0
               szWriteBuffer = "</div> <!-- End of Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            END

            ResetViewFromSubobject( vDialog )
            szWriteBuffer = "</div> <!-- End of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<script type=^text/javascript^>setupAllTabs( );</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  // End of tab control

//********************** START OF GRID ***********************************

         IF szControlType = "Grid"   // SPREADSHEET

            // For each table, we will create an export option that allows the user to
            // copy the contents of a table into excel.  The problem is that this only reflects
            // values of the table as the page is being built so if the table can be changed by
            // the user, those changes would not be seen unless the page was refreshed,  Don't create
            // this export option if "No Table Export" is a webcontrolproperty for the table.
            // Also don't create this export option if we are using absolute positioning.
            szTableExport = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table Export Option"
            IF RESULT >= zCURSOR_SET AND ( szNoPositioning = "Y" OR szNoPositioning = "S" )
               szTableExport = "Y"
            END

            lSubtypeX = vDialog.Control.ExtendedStyle

            // #define zSS_SORTEDHEADERS 0x00040000 = 262144
            // #define zSS_REMEMBERSORT  0x00020000 = 131072

            lSort = IsFlagSequenceSet( lSubtypeX, 262144 )
            IF lSort = 0
               lSort = IsFlagSequenceSet( lSubtypeX, 131072 )
            END

            lTableRowCnt = lTableRowCnt + 1   // Set up iTableRowCnt variable suffix.
            szSuffix = lTableRowCnt
         // X_Size = vDialog.Control.SZDLG_X
         // lWidth = X_Size * 2
         // zIntegerToString( szWidth, 10, lWidth )

            //KJS 02/12/08 - We had been looping through CtrlCtrl instead of setting
            //the view to the subobject but if there is a hidden column, then
            //we don't want to count that column so we need to look at the web properties.
            SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
            lColCnt = 0
            FOR EACH vDialog.Control
               SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
               //Don't count this if it is hidden.
               IF RESULT < zCURSOR_SET
                  lColCnt = lColCnt + 1
               END
            END
            ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

            //lColCnt = 0
            //FOR EACH vDialog.CtrlCtrl
            //   lColCnt = lColCnt + 1
            //END

            //KJS 7/26/07 - Previously the "cols=..." was only being added to the
            //table def if the headers were sortable.  In trying to get the absolute width
            //to work for individual columns, it seems I need this set so I am going to always
            //set "cols=...".
            szColCount = ""
            IF  lColCnt > 0
               zIntegerToString( szPosition, 10, lColCnt )
               szColCount = " cols=" + szPosition
            END

            szClass = vDialog.Control.CSS_Class
            //If there is no sorting of headers...
            IF lSort = 0
               IF szClass = ""
                  szSort = ""
               ELSE
                  szSort = "class=^" + szClass + "^"
               END
            // TraceLineS( "Table not sorted: ", vDialog.Control.Tag )
            ELSE
            //Headers are being sorted
            // TraceLineS( "Table sorted: ", vDialog.Control.Tag )
               IF szClass = ""
                  szSort = "class=^sortable^ "
               ELSE
                  szSort = "class=^sortable " + szClass + "^ "
               END
            END

            // Reset szPosition from using is above as the column count.
            szPosition = ""

            // If szNoPositioning is null then we are not using absolute positioning.
            IF  szNoPositioning = ""
               // Set up "top" and "left" positions for absolute positioning.
               CreateAbsolPosStringTable( vDialog, szPosition, 0, 0 )
            END

            IF szTableExport = "Y"
               // KJS 09/29/10 - Trying to set up a system for displaying a table's values as output so the user
               // can cut and paste this into excel.  The textarea we will create should be as wide as the
               // grid.
               szWriteBuffer = "<div class=^tableexport^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<img src=^./images/btn_expand.gif^ name=^btmp" + szCtrlTag + "^ id=^btmp" + szCtrlTag + "^ " +
                               "onclick=^" + szCtrlTag + "ExportOnClick( )^ style=^width:16px;height:14px;^ alt=^ExportBmp^ >"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<span name=^spn" + szCtrlTag + "^ id=^spn" + szCtrlTag + "^>export table data</span>"
               szWriteBuffer = "<span name=^spn" + szCtrlTag + "^ id=^spn" + szCtrlTag + "^>Click here to display data for export</span>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szWriteBuffer = "<div name=^gb" + szCtrlTag + "^ id=^gb" + szCtrlTag + "^ style=^width:" +
                                szWidth + "px;height:70px;display:none;^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<textarea name=^o" + szCtrlTag + "^ id=^o" + szCtrlTag + "^ style=^width:" +
                                szWidth + "px;height:50px;border:solid;border-width:2px;border-style:groove;^ wrap=^wrap^></textarea> <!-- textarea for table values output  -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END


            // If Absolute Width is requested, add Width to szPosition.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
            IF RESULT >= zCURSOR_SET
               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szPosition = szPosition + "width:" + szWidth + "px;"
               // The width in percent of the table will be the pixel width divided by 400. Multiplying by 100 gives
               // an integer value of the percent.
               //lWidthPercent = (lWidth * 100) / 400
               //szWidth = lWidthPercent
            END

            szClass = vDialog.Control.CSS_Class

            szWebCtrlType = ""
            IF vGroupParent != 0
               // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
               // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
               //*
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szWebCtrlType = "RelativePos"
               ELSE
                  szWebCtrlType = vGroupParent.Control.WebCtrlType
               END
               //*/
               //szWebCtrlType = vGroupParent.Control.WebCtrlType
            END

            // KJS 6/19/08 - We want to add filtering on a table.  If the user chooses the web control property "Filter Rows" then
            // they need to have an attribute on the table entity called wHideTableRow.  If this attribute is set to "Y" then
            // that entity will not be displayed in the table.
            szFilterTable = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Filter Rows (wHideTableRow='Y')"
            IF RESULT >= zCURSOR_SET
               szFilterTable = "Y"
            END

            // KJS 06/26/15 - DG/Justin would like to add SelectSets as a filter for the table
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Select Set"
            IF RESULT >= zCURSOR_SET
               szSelectSet = "Y"
            END

            // KJS 05/06/09 - I am placing this div around the <table> being generated so that if there is a
            // WebGridNoDataMessage, I can create this message under the table lined up with the table.  Otherwise,
            // I need to save any spacing that happens before this grid.
            // KJS 12/23/15 - I am not going to do this if we are not generating with any style. Jeff's group has an outer div
            // with a css and with this div, then css doesn't work correctly. I use this in older code so keeping in.
            IF vDialog.Control.WebNoGridDataMessage != "" AND szNoPositioning != "S"
               szWriteBuffer = "<div style=^float:left^>  <!-- Div around the table, this is for the message if no data -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            szScrollingTable = ""
            //KJS 04/10/08 - Want to try and add a scrolling table with stationary headings.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrolling Table"
            IF RESULT >= zCURSOR_SET
               szScrollingTable = "Y"
               szWriteBuffer = "<div class=^tableScroll^ "
               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
               // For the scrollable table we need to give the table a height.
               szPosition = szPosition + "height:" + szHeight + "px;"

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer= szWriteBuffer + " style=^position:relative;width:" + szWidth + "px;height:" + szHeight + "px;^>"
               ELSE
                  szWriteBuffer= szWriteBuffer + " style=^" + szPosition + "^>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<table name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ cellspacing=0 " + szSort + szColCount + "  >"
            ELSE

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^position:relative^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               ELSE
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^" + szPosition + "^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               END
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process Grid Headings, unless "NoHeadings" is requested.
            // Create a Class statement for each column in the list.
            lSubtype = vDialog.Control.Subtype
            lHeader = IsFlagSequenceSet( lSubtype, 262144 ) // zSS_HIDEROWHEADER = zCONTROL_SPECIFIC_1
            IF lHeader = 0     // NoHeader was not set
               IF lSort = 0
                  szWriteBuffer = "<thead><tr>"
               ELSE
                  szWriteBuffer = "<thead bgcolor=green><tr>"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
               lCol = 0
               //Loop through each field in the grid and create the headers
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  //KJS 2/12/2008
                  SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"

                  //Don't ceate a header if this control is hidden
                  IF RESULT < zCURSOR_SET

                     IF szCtrlCtrlType = "PushBtn"  // PUSH BUTTON
                        lPushBtn = 1
                     ELSE
                        lPushBtn = 0
                     END

                     //KJS 7/26/07 - If we want "Absolute Width" for this control, we should put the
                     //width on the <th> as well as on the <td>.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested.
                     szAbsoluteWidth = ""
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szAbsoluteWidth = "width:" + szWidth + "px;"
                     END

                     // Set Grid Title either from static text or variable.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Variable Header"
                     IF RESULT >= zCURSOR_SET
                        //Yes, there is a variable header.
                        IF szWriteBuffer != "   }"
                           // The last entry was NOT a variable text, so create the "<%" statement.
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                        szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                                        "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      nRC =  " + vDialog.CtrlMapView.Name +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END
                        szWriteBuffer = "         strErrorMapValue =  " + vDialog.CtrlMapView.Name +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "          strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( StringUtils.equals( strErrorFlag, ^Y^ ) && !StringUtils.isBlank( strErrorMapValue ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "%>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF  szAbsoluteWidth = ""
                           szWriteBuffer = "   <th><%=strErrorMapValue%></th>"
                        ELSE
                           szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^><%=strErrorMapValue%></th>"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "<%"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF szTableExport = "Y"
                           // KJS 09/29/10
                           szWriteBuffer = "      strTblOutput = strTblOutput + strErrorMapValue + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        // The Title is a constant.
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // If this is sortable and this is a pushbutton on the grid...
                        IF lSort != 0 AND lPushBtn != 0
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th class=^gridheading^>" + vDialog.Control.Text
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^ class=^gridheading^>" + vDialog.Control.Text
                           END
                        ELSE
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th"
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^"
                           END

                           //If this column is for a checkbox with no header text, we are creating a checkbox so that
                           //the user can "select all" for this column.  Because of this, we do not want this
                           //column to be able to sort.  Put on the class "gridheading" which keeps this column
                           //from sorting.
                           IF vDialog.Control.Text = "" AND ( vDialog.ControlDef.Tag = "GridCheckCtl" OR vDialog.ControlDef.Tag = "CheckBox" )
                              szWriteBuffer = szWriteBuffer + " class=^gridheading^"
                           END

                           //Put the ending on the tag and the text if there is any.
                           szWriteBuffer = szWriteBuffer + ">" + vDialog.Control.Text
                        END

                        //KJS 10/19/07 - If there is no Text and the control is a checkbox, then we want to create a
                        //checkbox in the header with an onclick to "CheckAllInGrid"
                        //Need to put class="gridheading" on <th>.
                        //I shouldn't have to do this for the variable headers (code up above) because we are only doing this
                        //if there is no header text.
                        IF vDialog.Control.Text = "" AND ( vDialog.ControlDef.Tag = "GridCheckCtl" OR vDialog.ControlDef.Tag = "CheckBox" )
                           szWriteBuffer = szWriteBuffer + "<input type=^checkbox^ onclick=^CheckAllInGrid(this,'" + vDialog.Control.Tag +"')^>"
                        ELSE
                           szWriteBuffer = szWriteBuffer + ""
                        END

                        szWriteBuffer = szWriteBuffer + "</th>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF szTableExport = "Y"
                           // KJS 09/29/10
                           // If this is simply a checkbox for checking values in the table then we don't want to include this
                           // in the strTblOutput string.
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           IF vDialog.Control.Text != ""
                              szWriteBuffer = "         strTblOutput = strTblOutput + ^" + vDialog.Control.Text + "^ + ^\t^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           ELSE
                              IF vDialog.Control.Text = "" AND vDialog.ControlDef.Tag != "GridCheckCtl" AND vDialog.ControlDef.Tag != "CheckBox"
                                 szWriteBuffer = "   strTblOutput = strTblOutput + ^\t^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              END
                           END
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                     END  // of ELSE of IF RESULT >= zCURSOR_SET

                  END //End of checking if the current control is hidden.

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END

               END  //End of looping through each field in the grid and creating the headers.

               // If the last entry was a variable text, create the "" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               IF szTableExport = "Y"
                  // We need to add a carriage return and line feed to strTblOutput
                  szWriteBuffer = "   <%"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   strTblOutput = strTblOutput + ^\r\n^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   %>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "</tr></thead>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            IF szScrollingTable = "Y"
               // Make tbody's height 50px (this might not always be right) less than the div height.  Otherwise you get a
               // scrollbar within the scrollbar.
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits - 50 )
               szWriteBuffer = "<tbody height=^" + szHeight + "px;^>"
            ELSE
               szWriteBuffer = "<tbody>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            // try/catch
            szWriteBuffer = "try"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "{"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            IF vDialog.CtrlMapView EXISTS

               szWriteBuffer = "   iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      int    iTableRowCnt" + szSuffix + " = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      long   lEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strButtonName;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strOdd;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strTag;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               IF szFilterTable = "Y"
                  szWriteBuffer = "      String strFilter;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               IF szSelectSet = "Y"
                  // if ( set.isSelected( View.Entity )
                  // Maybe use field WebFileName on the control as the SelectSet name? Since that is only for group box...
                  IF vDialog.Control.WebFileName != ""
                     szWriteBuffer = "      SelectSet set = " + vDialog.CtrlMapView.Name + ".getSelectSet( ^" + vDialog.Control.WebSelectSetName + "^ );"
                  ELSE
                     szWriteBuffer = "      SelectSet set = " + vDialog.CtrlMapView.Name + ".getSelectSet( );"
                  END
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               //szWriteBuffer = "      iTableRowCnt = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls

               // Create a work variable for each column in the list.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl"
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + ";"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        // Checkboxes need the extra work value.
                        szWriteBuffer = "      String str" + vDialog.Control.Tag + "Value;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END
                  END

                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                     szListCtrlTag = vDialog.Control.Tag
                     szWriteBuffer = "      String str" + szListCtrlTag + "ErrorColor;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  // KJS 05/06/09 - First Occurrence Only is when the user wants to show only the first occurrence of a value in
                  // a table column.  We need to keep track of the last value for the column so we need to create a variable to
                  // hold the last value.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurrence Only"
                  IF RESULT >= zCURSOR_SET
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "LV = ^^;  // Last value of this column "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  // If the Grid entry requests URL Mapping, generate the variable definition here.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                  IF RESULT >= zCURSOR_SET
                     // Define variable for URL Mapping.
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "_URL;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid
               szWriteBuffer = "      "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 5/1/08 - Jeff is a pain in the butt so I need to add this code.
               // We are creating a temporary view to the table view so that when we loop through the
               // entities to create this grid, we do not lose the original entity position.
               // If you have several grids on one page mapped to the same entity path, when one grid was
               // being painted, that messed up the position of the other grids.
               szGridView = "v" + vDialog.Control.Tag
               szGridOrigViewName = vDialog.CtrlMapView.Name

               szWriteBuffer = "      View " + szGridView + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + szGridView + " = " + vDialog.CtrlMapView.Name + ".newView( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                     CreateViewFromView( vDialog2, vDialog )
                     SET CURSOR NEXT vDialog2.CtrlMap
                     IF vDialog2.CtrlMapLOD_Entity EXISTS
                        szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
                     ELSE
                        szScopingEntityName = ""
                     END

                     DropView( vDialog2 )
                     szWriteBuffer = "      csrRC2 = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                                     "^ ).setFirst( " + szScopingEntityName + " );"
               ELSE
                     szWriteBuffer = "      csrRC2 = " + szGridView +
                                  ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirstWithinOi( );"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( csrRC2.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Create an "IF" statement to filter rows if one of the web control properties was "Filter Rows"
               IF  szFilterTable = "Y"

                  szWriteBuffer = "         strFilter = " + szGridView +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^ ).getAttribute( ^wHideTableRow^ ).getString( ^^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  szWriteBuffer = "         // If the attribute wHideTableRow is null then we want to show this row."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         if ( StringUtils.isBlank( strFilter ) )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
               
               IF szSelectSet = "Y" 
                  szWriteBuffer = "         if ( set.isSelected( " + szGridView + ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name  + "^ ) ) )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END

            // szWriteBuffer = "         strOdd = (iTableRowCnt" + szSuffix + " % 2) != 0 ? ^ class='odd'^ : ^^;"
               szWriteBuffer = "         strOdd = (iTableRowCnt % 2) != 0 ? ^ class='odd'^ : ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // szWriteBuffer = "         iTableRowCnt" + szSuffix + "++;"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // szWriteBuffer = "         strSuffix" + szSuffix + " = Integer.toString( iTableRowCnt" + szSuffix + " );"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         lEntityKey = " + szGridView +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Long.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //KJS 10/22/15 - Taking these out. Not sure why we even do it because if there is more than one button, then they do not
               // have unique names.
               //szWriteBuffer = "         strButtonName = ^SelectButton^ + strEntityKey;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )                                                     // strButtonName?

               // Process the subcontrols for mapping.
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
            // szIndentGroup = szIndent + "   "

               // Get the mapping attributes for each column in the table.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szJustify = ""
                  lSubtype = vDialog.Control.Subtype
                  lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_CENTERJUSTIFY )
                  IF lTemp != 0
                     szJustify = " align=^center^"
                  ELSE
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_RIGHTJUSTIFY )
                     IF lTemp != 0
                        szJustify = " align=^right^"
                     END
                  END

                  // Position on display mapping value, which is CtrlMap named "Displayed Text" or unnamed CtrlMap.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Displayed Text"
                  IF RESULT < zCURSOR_SET
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                                WHERE vDialog.CtrlMap.Tag = ""
                  END

                  // Grid Control Mapping
                  // We don't generate mapping for Push Button or if there wasn't mapping.
                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "BitmapBtn" AND
                     szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl" AND
                     RESULT >= zCURSOR_SET
                     // Regular text

                     szListCtrlTag = vDialog.Control.Tag
                     szControlTag = "str" + szListCtrlTag
                     szWriteBuffer = "         " + szControlTag + " = ^^;"                                       // set string to blank
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                  // IF RESULT >= zCURSOR_SET OR vDialog.Control.WebCtrlType = "Edit"
                     IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                        lEditBox = 1
                        szWriteBuffer = "         " + szControlTag + "ErrorColor = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        lEditBox = 0
                     END

                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                     ELSE
                        szContextName = ""
                     END

                     szWriteBuffer = "         nRC = " + szGridView +
                                  ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"   // start brace
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     IF lEditBox = 1

                        szWriteBuffer = "            strTag = ^" + szListCtrlTag + "::^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // If there is an error, set on that entity and report the error?
                        // KJS 10/27/11 - I don't think we need the following code because this can be done
                        // in VmlOperation.CheckError.
                        /* Keeping it in for the time being ... dks 2011.11.07 
                        szWriteBuffer = "            nRC = vMsgQ.cursor( ^WebMsg^ ).setFirst( ^ControlTag^, strTag );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               // Should we do something with the error?"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               vMsgQ.cursor( ^WebMsg^ ).deleteEntity( CursorPosition.NEXT );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                         end of Keeping it in ... */

                        szWriteBuffer = "            strErrorMapValue = VmlOperation.CheckError( strTag, strError );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( !StringUtils.isBlank( strErrorMapValue ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "                  " + szControlTag + "ErrorColor = ^ style='color:red'^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "                  " + szControlTag + " = strErrorMapValue;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END

                        szWriteBuffer = "               " + szControlTag + " = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" + szContextName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                        szWriteBuffer = "               if ( " + szControlTag + " == null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "                  " + szControlTag + " = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     ELSE
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END

                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ ).getString( strDateFormat );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                           // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                           szWriteBuffer = "            if ( " + szControlTag + " == null )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + " = ^^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        END
                     END

                     szWriteBuffer = "         }"  // end brace
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                     // KJS 05/06/09 - Check if the user wants this column to show only the first occurrence of the column value.
                     // All other occurrences of a value are null.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurrence Only"
                     IF RESULT >= zCURSOR_SET
                        szWriteBuffer = "            // Only show the first occurrence of this column value."
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( StringUtils.equals( " + szControlTag + ", " + szControlTag + "LV" + ") )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + " = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            else "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        // If the value of the checkbox for not being checked is anything but null, the
                        // .length( ) wouldn't work properly.  All checkboxes would be checked.  Changing this...
                        szWriteBuffer = "         if ( StringUtils.equals( " + szControlTag + ", ^" + vDialog.Control.RadioOrCheckboxValue + "^ ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        IF szTableExport = "Y"
                           // KJS 09/29/10 - for table output
                           szWriteBuffer = "         strTblOutput = strTblOutput + " + szControlTag + " + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END

                        szWriteBuffer = "         if ( StringUtils.isBlank( " + szControlTag + " ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"

                        //KJS 10/19/07 - We want to add "title" to controls and should I add class here as well?

                        //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                        szTitleHTML = ""
                        szTitle = vDialog.Control.DIL_Text
                        IF szTitle != ""
                           szTitleHTML = " title='" + szTitle + "' "
                        END

                        //KJS 7/26/07 - Added disabled option for the checkbox.
                        CreateDisabledString( vDialog, szDisabled )

                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 11/16/10 - adding an action to the checkbox inside a grid. Currently the GridCheckbox
                        // doesn't allow an action but we can copy in a normal checkbox which has an action.
                        IF vDialog.EventAct EXISTS
                           szText = " onclick='" + vDialog.EventAct.Tag + "( this.id )'"
                        ELSE
                           szText = ""
                        END

                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox'  CHECKED " +
                                        szDisabled + szTitleHTML + szText + "> ^;"
                        //szWriteBuffer = "            " + szControlTag + " = ^<input name='^ + " + szControlTag +
                        //                "Value + ^' value='Y' type='checkbox' CHECKED " + szDisabled + szTitleHTML + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 09/29/10 - for table output
                        // If this is a checkbox with no text then this is only for selecting table rows, only add
                        // this to strTblOutput.if this checkbox has a text value (this is what is shown in the table header).
                        // This is code for when the checkbox is checked so put in the checked value.
                        IF szTableExport = "Y" AND vDialog.Control.Text != ""
                           szWriteBuffer = "         strTblOutput = strTblOutput + ^" + vDialog.Control.RadioOrCheckboxValue + "^ + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END

                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox' " +
                                        szDisabled + szTitleHTML + szText + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 09/29/10 - for table output
                        // If this is a checkbox with no text then this is only for selecting table rows, only add
                        // this to strTblOutput.if this checkbox has a text value (this is what is shown in the table header).
                        // This is code for when the checkbox is not checked (there is no value) so just add the tab.
                        IF szTableExport = "Y" AND vDialog.Control.Text != ""
                           szWriteBuffer = "         strTblOutput = strTblOutput + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     ELSE
                        IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y" OR szCtrlCtrlType = "Calendar" OR
                           szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                           szWriteBuffer = "            " + szControlTag + " = ^^;"
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = ^&nbsp^;"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // If the Grid entry requests URL Mapping, generate the code here.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                     IF RESULT >= zCURSOR_SET
                        szControlTag = "str" + vDialog.Control.Tag + "_URL"
                        szWriteBuffer = "         " + szControlTag + " = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         nRC = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END
                        szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                        ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                        "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" + szContextName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Create the table entries with values.
               szWriteBuffer = "<tr<%=strOdd%>>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
               lCol = 0
               FOR EACH vDialog.Control   // Loop to create table columns

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // Set up "<td" constant with optional Class.
                  // !!! KJS 01/16/09

                  // KJS 01/16/09 - I am putting in "WRAP" as a Web Control Property because I think it's confusing
                  // to have the Wrap option on a different screen (under "Common" button).  I would think you would
                  // choose, "Absolute Width" and then choose "WRAP" if you want your field to wrap.  Should I instead
                  // have a web property of "Absolute Width Wrap"??  so you only have to add one property instead of
                  // two?
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "WRAP"
                  IF RESULT >= zCURSOR_SET
                     szItemTableHeader = "<td"
                  ELSE
                     // Under the "Common" button there is a checkbox for "Wrap".  Need to check this as well as
                     // the webcontrol property.
                     IF vDialog.Control.WebWrap = "Y"
                        szItemTableHeader = "<td"
                     ELSE
                        szItemTableHeader = "<td nowrap"
                     END

                  END

                  CreateDisabledString( vDialog, szDisabled )

                  szListCtrlTag = vDialog.Control.Tag
                  // The id attribute is a unique identification for an HTML element.
                  // The id attribute is often used with CSS or JavaScript (using the HTML DOM)
                  // to style or change the HTML element with the specified unique id.
                  // The id must be unique within the HTML document, this means that you can only
                  // use the id once on a page, but re-use it on another page.
                  //
                  // Naming rules:
                  //  - Must begin with a letter A-Z or a-z
                  //  - Can be followed by: letters (A-Za-z), digits (0-9), hyphens ("-"),
                  //    underscores ("_"), colons (":"), and periods (".")
                  //  - Values are case-sensitive
                  //
                  // dks 2008.12.10 - Because of the above statements regarding valid id's for HTML
                  // elements, I believe the following Hidden generation should produce invalid HTML.

                  //KJS 2/12/2008 - If this control is a hidden control, then we do not care what other web controls
                  //properties there might be.  Create this as a hidden field. This does not have <td> tags.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
                  IF RESULT >= zCURSOR_SET
                     szWriteBuffer = "<input type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ " +
                                            "name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^>"

                  ELSE
                     //Not a hidden control.

                     //KJS 7/25/07 - Look for values in the WebControlProperties.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Multiline"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Multiline = "Y"
                     ELSE
                        szWCP_Multiline = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "EmailAddress"
                     IF RESULT >= zCURSOR_SET
                        szWCP_EmailAddress = "Y"
                     ELSE
                        szWCP_EmailAddress = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested, add Width to szItemTableHeader.
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                     END

                     //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                     szTitleHTML = ""
                     szTitle = vDialog.Control.DIL_Text
                     IF szTitle != ""
                        szTitleHTML = " title=^" + szTitle + "^ "
                     END

                     szClass = vDialog.Control.CSS_Class
                     IF szClass != "" AND szCtrlCtrlType != "PushBtn"  // Don't add Class here for Push Button.
                        szItemTableHeader = szItemTableHeader + " class=^" + szClass + "^"
                     END

                     //KJS 10/19/07 - Added title
                     IF szTitle != "" AND szCtrlCtrlType != "PushBtn"  // Don't add title here for Push Button.
                        szItemTableHeader = szItemTableHeader + szTitleHTML
                     END

                     IF szCtrlCtrlType = "PushBtn"
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // Push Button
                        szActionName = ""
                        IF vDialog.EventAct EXISTS
                           szActionName = vDialog.EventAct.Tag
                        END

                        // Set Class as either null or with Class value.
                        IF vDialog.Control.CSS_Class = ""
                           szClass = ""
                        ELSE
                           szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
                        END

                        //KJS 7/26/07 - Added DISABLED option.
                        //KJS 10/19/07 - Added title

                        // KJS 06/22/09 - I am noticing that there is no width for a push button
                        // in a grid.  I'm thinking there should be so I am going to get the
                        // width here (buttons don't have a WebControlProperty of Absolute Width).
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szStyle = " style=^width:" + szWidth + "px;^ "
                        
                        /************************************** NEW CODE *********************************/
                        // KJS 10/22/15 - Added code for button text mapping, if a button has mapping defined.
                        SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                        IF RESULT >= zCURSOR_SET 
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                                           vDialog.CtrlMapView.Name + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         task.log( ).debug( ^Invalid View: ^ + ^" + szListCtrlTag + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "      else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "      {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           IF vDialog.CtrlMapContext EXISTS
                              szContextName = vDialog.CtrlMapContext.Name
                           ELSE
                              szContextName = ""
                           END
                           
                           // Add try/catch
                           szWriteBuffer = "            try"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                           IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                              lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                              szMaxStringLength = lMaxStringLength
                           ELSE
                              szMaxStringLength = "254"
                           END
                           szWriteBuffer = "               strErrorMapValue = " +
                                           vDialog.CtrlMapView.Name + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                                           vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                                           szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           IF vDialog.Control.WebCtrlType = "escapeHTML"
                              szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " prior to unescape: ^ + strErrorMapValue );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               strErrorMapValue = StringEscapeUtils.unescapeHtml4( strErrorMapValue );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " after unescape: ^ + strErrorMapValue );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           END
                     
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            catch (Exception e)"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               out.println(^There is an error on " + szListCtrlTag + ": ^ + e.getMessage());"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               task.log().error( ^*** Error on ctrl " + szListCtrlTag + "^, e );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                           // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                           szWriteBuffer = "            if ( strErrorMapValue == null )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               strErrorMapValue = ^^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     
                           szWriteBuffer = "            task.log( ).debug( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                                           vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            task.log( ).debug( ^Entity does not exist for " + szListCtrlTag + ": ^ + ^" +
                                           vDialog.CtrlMapView.Name +
                                           "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "      }"
                     
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     
                              szWriteBuffer = "      if ( strErrorMapValue == ^^ )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                           szText = "<%=strErrorMapValue%>"
                        ELSE
                           szText = vDialog.Control.Text
                        END
                        /************************************** END OF NEW CODE *********************************/
                     
                                    
                     // szWriteBuffer = "   " + szItemTableHeader + "><input type=^submit^ " + szTitleHTML + szClass + "name=<%=strButtonName%> onclick=^" + szActionName +
                     //                 "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ value=^" + vDialog.Control.Text + "^" + szDisabled + "></td>"
                        szWriteBuffer = "   " + szItemTableHeader + "><button type=^button^ " + szTitleHTML + szClass + "name=^" + szListCtrlTag + "::<%=strEntityKey%>^  onclick=^" + szActionName +
                                        // KJS 11/10/12 thought i might want this"( '<%=strEntityKey%>' )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szStyle + szDisabled + ">"+
                                        "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szStyle + szDisabled + ">"+
                                        szText + "</button></td>"
                     ELSE
                        szListCtrlTag = vDialog.Control.Tag

                        // If Title is variable mapping, only create entries for columns with titles.
                        CreateViewFromView( vDialog2, vDialog )
                     // SET CURSOR NEXT vDialog2.CtrlMap WHERE vDialog2.CtrlMap.Tag = "Variable Header"
                     // IF RESULT >= zCURSOR_SET AND vDialog2.CtrlMapLOD_Attribute EXISTS
                     //    szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                     //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // ELSE
                        IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"

                           //IF szWCP_AbsoluteWidth = "Y"
                              PIX_PER_DU( vDialog, dDLUnits )
                              zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                              //szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                           //END

                           //szViewName = vDialog.CtrlMapView.Name
                           szViewName = szGridView
                           szMapEntityName = vDialog.CtrlMapRelatedEntity.Name
                           szMapAttributeName = vDialog.CtrlMapER_Attribute.Name

                           IF vDialog.CtrlMapContext EXISTS
                              szContextName = vDialog.CtrlMapContext.Name
                           ELSE
                              szContextName = ""
                           END

                           szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                           IF vDialog.Event EXISTS
                              IF vDialog.Event.Type = 1
                                 szSelectAction   = "onchange"
                                 szSelectFunction = "OnChange"
                              ELSE
                                 szSelectAction   = "onblur"
                                 szSelectFunction = "OnBlur"
                              END
                           ELSE
                              szSelectAction   = "onchange"
                              szSelectFunction = "OnChange"
                           END

                           //Can be a domain combo box or a table combo box
                           lSubtype = vDialog.Control.Subtype
                           nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                           IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                              //Domain combo box

                              //KELLY - Do I need to add DISABLED here?

                              IF szClass = ""
                              // szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:152px;height:20px;^ " +
                                 szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " +
                                                 szDisabled + szSelectAction + "=^" +
                                                 szListCtrlTag + szSelectFunction + "( 'h" + szListCtrlTag + "::<%=strEntityKey%>', this, <%=strEntityKey%> )^>"
                              ELSE
                                 szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML +
                                                " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( 'h" + szListCtrlTag + "<%=strEntityKey%>' this," + 
                                                " <%=strEntityKey%> )^>"
                                                //" style=^width:152px;height:20px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "<%=strEntityKey%>," + szListCtrlTag + "<%=strEntityKey%> )^>"
                              END

                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // szWriteBuffer = "      nRC = " + szViewName + ".GetView( strSessionId, ^" + szViewName + "^, vAppSubtask );"

                              // This view should be the same as the view we are getting for the grid so we don't need to retrieve
                              // it again.  Set nRC = 1 so that we go into the IF statement (should really take that out).
                              //szWriteBuffer = "      nRC = 1;"
                              //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              //szWriteBuffer = "      if ( nRC > 0 )"
                              //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              //szWriteBuffer = "      {"
                              //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      List<TableEntry> list" + szListCtrlTag + " = JspWebUtils.getTableDomainValues( " + vDialog.CtrlMapView.Name + " , ^" +
                                              vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                                 lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                                 szMaxStringLength = lMaxStringLength
                              ELSE
                                 szMaxStringLength = "254"
                              END

                              szWriteBuffer = "         nRC = " + szViewName + ".cursor( ^" + szMapEntityName + "^ ).checkExistenceOfEntity().toInt();"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         if ( nRC >= 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              // KJS 10/31/12 - I think that we should get "internal value" instead of external. But then I think we
                              // need to change DoInputMapping and GenJSPJ_CtreComboBox. Get rid of last ""
                              szWriteBuffer = "            strComboCurrentValue = " + szViewName + ".cursor( ^" + szMapEntityName + "^ ).getAttribute( ^" +
                                              szMapAttributeName + "^ ).getString( ^" + szContextName + "^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                              szWriteBuffer = "            if ( strComboCurrentValue == null )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               strComboCurrentValue = ^^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         else"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            strComboCurrentValue = ^^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  
                              IF vDialog.CtrlMapER_Attribute.NotNull != "Y"
                                 // Generate code when attribute is NOT required.
                                 szWriteBuffer = "            // Code for NOT required attribute, which makes sure a blank entry exists."
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            if ( strComboCurrentValue == ^^ )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               <option selected=^selected^ value=^^></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            else"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               <option value=^^></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              END

                              // KJS 10/31/12 - New Code for java
                              szWriteBuffer = "      for ( TableEntry entry : list" + szListCtrlTag + " )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         String internalValue = entry.getInternalValue( );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         String externalValue = entry.getExternalValue( );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         // Perhaps getInternalValue and getExternalValue should return an empty string, "
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         // but currently it returns null.  Set to empty string. "
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         if ( externalValue == null )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            internalValue = ^^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            externalValue = ^^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                              // The following if statement eliminates a null value, which would be the second null in the combo box.
                              szWriteBuffer = "         if ( !StringUtils.isBlank( externalValue ) )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            if ( StringUtils.equals( strComboCurrentValue, externalValue ) )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               <option selected=^selected^ value=^<%=externalValue%>^><%=externalValue%></option>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            else"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               <option value=^<%=externalValue%>^><%=externalValue%></option>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      }  // for ( TableEntry entry"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              // KJS 10/31/12 - END OF New Code for java


                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "   </select>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           // szWriteBuffer = szWriteBuffer + "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ >"
                              szWriteBuffer = "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboCurrentValue%>^ >"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           ELSE

                              // Select type combo box
                              CreateViewFromViewForTask( vList, vDialog, 0 )
                              SET CURSOR NEXT vList.CtrlMap
                              CreateViewFromViewForTask( vEntity, vList, 0 )
                              SET CURSOR NEXT vEntity.CtrlMap
                              CreateViewFromViewForTask( vScope, vEntity, 0 )
                              SET CURSOR NEXT vScope.CtrlMap

                              // The Select Action is either onblur or onchange depending on the following.
                              // 1. If no Action, use onchange because this allows using keystrokes in the control.
                              // 2. If Action is SelectChange, use onchange.
                              // 3. If Action is SelectEnd, use onfocusout.
                              IF vDialog.Event EXISTS
                                 IF vDialog.Event.Type = 1
                                    szSelectAction   = "onchange"
                                    szSelectFunction = "OnChange"
                                 ELSE
                                    szSelectAction   = "onblur"
                                    szSelectFunction = "OnBlur"
                                 END
                              ELSE
                                 szSelectAction = "onchange"
                                 szSelectFunction = "OnChange"
                              END


                              szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                              IF szClass = ""
                              // szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:152px;height:20px;^ " +
                                 szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " +
                                                 szDisabled + szSelectAction + "=^" +
                                                 szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              ELSE
                                 szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML +
                                                " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%> )^>"
                                             // " style=^width:152px;height:20px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%> )^>"
                              END
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              IF vDialog.CtrlMapView EXISTS
                                 szWriteBuffer = "   " + vList.CtrlMapView.Name + " = " +
                                                 "task.getViewByName( ^" + vList.CtrlMapView.Name + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "   if ( VmlOperation.isValid( " + vList.CtrlMapView.Name + " ) )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "   {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         strComboCurrentValue = ^^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      View v" + szListCtrlTag + ";"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // If mapping is specified, set up the value to be used in selecting
                                 // the correct entry.
                                 IF vDialog.CtrlMapLOD_Attribute EXISTS
                                    IF vDialog.CtrlMapView.Name = szGridOrigViewName
                                       szWriteBuffer = "      nRC = 1;"
                                       szViewName = szGridView
                                    ELSE
                                       szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " +
                                                       "task.getViewByName( ^" + vDialog.CtrlMapView.Name +
                                                       "^ );"
                                       szViewName = vDialog.CtrlMapView.Name
                                    END
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         nRC = " + szViewName + ".cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    IF vDialog.CtrlMapContext EXISTS
                                       szContextName = vDialog.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                                       lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "254"
                                    END

                                    szWriteBuffer = "            strComboCurrentValue = " + szViewName + ".cursor( ^" +
                                             vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                                             vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" + szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                                    szWriteBuffer = "         if ( strComboCurrentValue == null )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            strComboCurrentValue = ^^;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                 ELSE
                                    szWriteBuffer = "      strComboCurrentValue = ^^;"
                                 END
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // See if a list entity has been specified, and if so, use it.
                                 IF vEntity.CtrlMapLOD_Entity EXISTS
                                    szListEntityName = vEntity.CtrlMapLOD_Entity.Name
                                 ELSE
                                    szListEntityName = vList.CtrlMapRelatedEntity.Name
                                 END

                                 // See if a scoping entity has been specified, and if so, use it.
                                 lSubtype = vDialog.Control.Subtype
                                 lSubtype = IsFlagSequenceSet( lSubtype, zCOMBOBOX_SCOPE_OI )
                                 IF lSubtype = 0
                                    IF vScope.CtrlMapLOD_Entity EXISTS
                                       szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
                                    ELSE
                                       szScopingEntityName = ""
                                    END
                                 END

                                 szWriteBuffer = "      v" + szListCtrlTag + " = " + vList.CtrlMapView.Name + ".newView( );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      ComboCount = 0;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      strComboSelectedValue = ^0^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // Auto Include
                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    szWriteBuffer = ""
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      // For Auto Include, process null entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      ComboCount++;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      if ( StringUtils.isBlank( strComboCurrentValue ) )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         <option selected=^selected^></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         <option></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                 END

                                 IF lSubtype = 0
                                    szWriteBuffer = "      csrRC = v" + szListCtrlTag + ".cursor( ^" +
                                                                 szListEntityName + "^ ).setFirst( " + szScopingEntityName + " );"
                                 ELSE
                                    szWriteBuffer = "      csrRC = v" + szListCtrlTag + ".cursor( ^" + szListEntityName + "^ ).setFirstWithinOi( );"
                                 END

                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      while ( csrRC.isSet() )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vList.CtrlMapLOD_Attribute EXISTS
                                    IF vList.CtrlMapContext EXISTS
                                       szContextName = vList.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END


                                    IF vList.CtrlMapER_Domain.MaxStringLth > 254
                                       lMaxStringLength = vList.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "254"
                                    END

                                    szWriteBuffer = "         strErrorMapValue = v" + szListCtrlTag + ".cursor( ^" +
                                                    vList.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                                                    vList.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                                                    szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                                    szWriteBuffer = "         if ( strErrorMapValue == null )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            strErrorMapValue = ^^;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                                 END

                                 szWriteBuffer = "         if ( StringUtils.equals( strComboCurrentValue, strErrorMapValue ) )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            <option selected=^selected^><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         else"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            <option><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                 szWriteBuffer = "         ComboCount++;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              // IF lSubtype = 0  // now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
                                    szWriteBuffer = "         csrRC =  v" + szListCtrlTag +
                                                    ".cursor( ^" + szListEntityName + "^ ).setNextContinue( );"
                                                    //"^ ).setNext( " + szScopingEntityName + " );"
                              // ELSE
                              //    szWriteBuffer = "         nRC =  v" + szListCtrlTag +
                              //                    ".cursor( ^" + szListEntityName + "^ ).setNextWithinOi( );"
                              // END

                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 DropView( vList )
                                 DropView( vEntity )
                                 DropView( vScope )
                              END

                              szWriteBuffer = "      }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              szWriteBuffer = "      v" + szListCtrlTag + ".drop( );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              szWriteBuffer = "   }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "   </select>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           END  //IF vDialog.Control.Subtype < 12000 (domain combobox)
                           szWriteBuffer = "   </td>"

                        ELSE
                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "   " + szItemTableHeader + ">"
                           //KJS 7/26/07 - Added DISABLED option.
                           szWriteBuffer = szWriteBuffer + "<input name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ "
                           szWriteBuffer = szWriteBuffer + "style=^width:80px^ type=^text^" + szDisabled + " value=^<%=str" + szListCtrlTag + "%>^ />"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "              <img src=^images/scw.gif^  name=^" + szListCtrlTag + "Img::<%=strEntityKey%>^ id=^" + szListCtrlTag + "Img::<%=strEntityKey%>^ title=^Select Date^ alt=^Select Date^ " + szDisabled + " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "              onclick=^scwShow( document.getElementById( '" + szListCtrlTag + "::<%=strEntityKey%>' ), this );^ /></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                           X_Size = vDialog.Control.SZDLG_X
                           Size = X_Size / 3
                           zIntegerToString( szSize, 10, Size )
                           //KJS 7/26/07 - Added DISABLED option.
                           //KJS 10/19/07 - Added title
                           szWriteBuffer = "   " + szItemTableHeader + "><input size=^" + szSize + "^ value=^<%=str" + szListCtrlTag + "%>^<%=str" + szListCtrlTag +
                                                  "ErrorColor%> name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szTitleHTML + szDisabled + "></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "Multiline" OR szWCP_Multiline = "Y"
                           // KJS 09/26/2008 - Taking out the <pre> because it makes the grid too large (can't do a "WRAP" on the
                           // <td>.  I don't think in a grid that we would want that.
                           szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                        // szWriteBuffer = "   " + szItemTableHeader + "><pre><%=str" + szListCtrlTag + "%></pre></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "EmailAddress" OR szWCP_EmailAddress = "Y"
                           szWriteBuffer = "   " + szItemTableHeader + " class=^Email^><%=str" + szListCtrlTag + "%></td>"
                        ELSE
                        //KJS 11/18/2007 - Adding Bitmap as a grid control
                        IF szCtrlCtrlType = "Bitmap"

                           szText = ""
                           IF vDialog.Control.Text != ""
                              szText = " alt=^" + vDialog.Control.Text + "^ "
                           END
                           IF vDialog.EventAct EXISTS
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ style=^display:block;width:100%;height:100%;text-decoration:none;^ name=^" + szListCtrlTag + "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ^onclick=^" +
                                              vDialog.EventAct.Tag + "( this.id )^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           ELSE
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szListCtrlTag + "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ><img src=^" +
                                              vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           END
                        ELSE
                        //DKS 02/01/2008 - Adding BitmapBtn as a grid control
                        IF szCtrlCtrlType = "BitmapBtn"

                           IF vDialog.Control.Text != ""
                              szText = "alt=^" + vDialog.Control.Text + "^"
                           ELSE
                              szText = ""
                           END

                           IF vDialog.EventAct EXISTS  // the line below was commented 3013.03.28 ... I need the line passing this.id.  dks
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ style=^display:block;width:100%;height:100%;text-decoration:none;^ name=^" + szListCtrlTag + "^ onclick=^" + vDialog.EventAct.Tag +
                                           // "( '<%=strEntityKey%>' )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                                              "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           ELSE
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^  name=^" + szListCtrlTag +
                                              "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           END

                        ELSE
                        IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                           // KJS 11/16/10 - I needed to add this because if I copy a CheckBox into a grid that
                           // has an EventAct (action) then previously it was creating an <a href.  GridCheckCtl
                           // does not have EventActs but normal Checkboxes do..
                           szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                        ELSE
                           IF vDialog.EventAct EXISTS
                              // Right now the only EventAct on a regular grid subcontrol is HotText (now there is Bitmap and BitmapBtn)
                              // Process HotText Action the same as for the Text Control.
                              // KJS 11/16/10 - A normal checkbox copied into a grid can have an EventAct.
                              //KJS 10/19/07 - added title
                              IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
                                 // For a Hyperlink in a Grid, we assume there is ALWAYS both "Displayed Text" mapping and
                                 // "Hyperlink URL" mapping, which have been set above.
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^<%=str" + szListCtrlTag + "_URL%>^ " + szTitleHTML + "><%=str" + szListCtrlTag + "%></a></td>"
                              ELSE
                                 // This is HotText mapping to an Action.
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ onclick=^" + vDialog.EventAct.Tag + "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^" + szTitleHTML + "><%=str" + szListCtrlTag + "%></a></td>"
                              END
                           ELSE
                              // Regular default Grid subcontrol.
                              szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                           END
                        END // szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        END // WebCtrlType = "EmailAddress"
                        END // WebCtrlType = "BitmapBtn"
                        END // WebCtrlType = "Multiline"
                        END // WebCtrlType = "Edit"
                        END // szCtrlCtrlType = "Calendar"
                        END // szCtrlCtrlType = "ComboBox"
                        END
                        //END
                        DropView( vDialog2 )
                     END // End ELSE of PushButton
                  END // End ELSE of checking if this is a hidden field
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END  // Loop to create table columns

               IF szTableExport = "Y"
                  // We need to add a carriage return and line feed to strTblOutput
                  szWriteBuffer = "   <%"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   strTblOutput = strTblOutput + ^\r\n^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   %>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               // If the last entry was a variable text, create the "<%" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "</tr>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //If on this table we are filtering rows, we need to add the closing bracket for the "if ( strFilter.length == 0 ) statement
               IF  szFilterTable = "Y" OR szSelectSet = "Y"

                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

            // IF lSubtypeX = 0  now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
                  szWriteBuffer = "         csrRC2 = " + szGridView +
                                  ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setNextContinue( );"
                               // "^ ).setNext( " + szScopingEntityName + " );"
            // ELSE
            //    szWriteBuffer = "         csrRC2 = " + szGridView +
            //                    ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setNextWithinOi( );"
            // END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + szGridView + ".drop( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            
            // try/catch
            szWriteBuffer = "}"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "catch (Exception e)"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "{"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "out.println(^There is an error in grid: ^ + e.getMessage());"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "task.log().info( ^*** Error in grid^ + e.getMessage() );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "}"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Put ending div for the scrollable table with stationary headings
            IF  szScrollingTable = "Y"
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            IF szTableExport = "Y"
               // KJS 09/29/10 - Hidden text area that will hold table values as output.  I have two of these because I am assuming the
               // user would want to see the output in a text area above the table but because we build the output string as we
               // build the table, then we need to store this value after the table.  We will copy the values from this table
               // to the text area created above.  Or could I simply build javascript code here that would copy strTblOutput to
               // the correct textarea?
               szWriteBuffer = "<textarea name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ style=^display:none;^ ><%=strTblOutput%></textarea> <!-- textarea for table values output  -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<script type=^text/javascript^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "document.getElementById(^o"+ szCtrlTag + "^).value = document.getElementById(^h"+ szCtrlTag + "^).value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            // If the user has entered a WebGridNoDataMessage for this grid, then create
            // code to check if there was no data and if so, display this message to the
            // user in a <span>.
            // I believe I would need to know if there is a spacer in front of the grid, if
            // so, then I would assume I would put that spacer in front of this message
            // as well.
            // What if I put this message as part of the table?  Do a colspan and then
            // put this message in?  But then I wouldn't have the class.
            IF vDialog.Control.WebNoGridDataMessage != ""

               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( iTableRowCnt == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               IF vDialog.Control.WebNoGridDataMsgClass = ""
                  szWriteBuffer = "<span style=^^>" + vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               ELSE
                  szWriteBuffer = "<span class=^" + vDialog.Control.WebNoGridDataMsgClass + "^ style=^^>" +
                                   vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 05/06/09 - I am putting a div with style float:left around the tables so that if there
               // is a message to display if the table has no data, then this message will line up with the
               // table.  Not sure if placing this div will affect how the tables are painted but I hope not.
               IF  szNoPositioning != "S"
                  szWriteBuffer = "</div>  <!-- End of div around table -->"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END

         END  // IF szControlType = "Grid"

//********************** END OF GRID ***********************************

         IF szControlType = "MLEdit"  // MLEDIT
         
            GenJSPJ_CrteMLEdit( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                "", szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END   //IF szControlType = "MLEdit"
      END
   END // FOR EACH

   // I am creating a div for every new y position.  Need to close this.  This
   // will not be correct if there are no controls.
   // If szFirstTimeThrough = "Y" then that means we were on a groupbox that doesn't have
   // any controls inside it.  If that's true, we didn't create the beginning <div so don't create
   // the closing div.
   // Only do this if we are positioning with relative positioning.
   IF  szNoPositioning = "Y"
      IF szFirstTimeThrough = ""
         szWriteBuffer = "</div>  <!-- End of a new line -->"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // szIndent = szIndentHold
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_InputMapRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_InputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                        STRING ( 100 )   ViewName,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        INTEGER          lTableRowCnt,
                        STRING ( 100)    szRepeatGrpKey )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vDialog3 BASED ON LOD TZWDLGSO
   STRING ( 100 )  szContextName
   STRING ( 100 )  szScopingEntityName
   STRING ( 100 )  szListMappingEntityName
   STRING ( 100 ) szViewName
   STRING ( 50 )  szControlType
   STRING ( 50 )  szCtrlCtrlType
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szCheckBoxValue
   STRING ( 1 )   szFlag
   STRING ( 2 )   szSuffix
   STRING ( 10 )  szMaxStringLength
   STRING ( 1 )   szWCP_Edit
   STRING ( 1 )   szhFlag
   STRING ( 1 )   szXSSEncode
   STRING ( 1 )   szRepeatingGroupFlag
   STRING ( 100 ) szRepeatingGroupKey
   STRING ( 256 ) szBlob
   STRING ( 100 ) szUnChecked
   STRING ( 50 )  szWebCtrlType
   STRING ( 1 )  szSurveyGroupFlag
   INTEGER       lEditBox
   INTEGER       lSubtype
   INTEGER       lSubtypeX
   INTEGER       lTemp
   INTEGER       lLen
   INTEGER       lMaxStringLength
   SHORT         nViewNameLth
   SHORT         bResetToPlaceHolder
   SHORT         nRC

   // Handle mapping for the named view (ViewName) that was passed in.
   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.  // not true!!!! // dks 2008.04.04
   FOR EACH vDialog.Control

      // To prevent cross-scripting attacks, we will run what was entered in the editbox field through some code that will
      // convert certain characters so that they are not html compatible (like "<" to "&lt;").  This is only for edit fields
      // where this is specified with XSS control property.
      szXSSEncode = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "XSS Encode"
      IF RESULT >= zCURSOR_SET
         szXSSEncode = "Y"
      END

      szSurveyGroupFlag = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Survey Group"
      IF RESULT >= zCURSOR_SET
         szSurveyGroupFlag = "Y"
      END

      lSubtype = vDialog.Control.Subtype
      lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
      IF lTemp != 0
         // Disabled entries are skipped.
      ELSE
         szCtrlTag = vDialog.Control.Tag

         szControlType = vDialog.ControlDef.Tag
         
         IF szControlType = "GroupBox"
            // Check if this is a repeating group.
            szRepeatingGroupFlag = ""
            IF szWebCtrlType = "RepeatingGroup"
               szRepeatingGroupFlag = "Y"
            ELSE
               SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Repeating Group"
               IF RESULT >= zCURSOR_SET
                  szRepeatingGroupFlag = "Y"
               END
            END
            
            IF szRepeatingGroupFlag = "Y" AND vDialog.CtrlMapView EXISTS AND vDialog.CtrlMapView.Name = ViewName
            
               szViewName = vDialog.CtrlMapView.Name
               // If this is an editable field within a repeating group then we are using vRepeatingGrp instead of
               // the view name.
               IF szRepeatGrpKey != "" 
                  szViewName = "vRepeatingGrp" + szRepeatGrpKey
                  zSearchAndReplace( szViewName, 100, " + ^::^ + strEntityKeyRG", "" )   
               END
   
            
               // We need to do something different if we have a repeating group within a repeating group.
               // Would need a new vRepeatingGrp.
               szWriteBuffer = "      // We are creating a temp view to the grid view so that if there are "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // grids on the same window with the same view we do not mess up the "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // entity positions. "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      View vRepeatingGrp" + szCtrlTag + " = " + vDialog.CtrlMapView.Name + ".newView( );"
               szWriteBuffer = "      View vRepeatingGrp" + szCtrlTag + " = " + szViewName + ".newView( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      long   lEntityKeyRG" + szCtrlTag + " = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strEntityKeyRG" + szCtrlTag + " = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      csrRC = vRepeatingGrp" + szCtrlTag + ".cursor( ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirst( " + szScopingEntityName + " );"
               ELSE
                  szWriteBuffer = "      csrRC = vRepeatingGrp" + szCtrlTag + ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirstWithinOi( );"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( csrRC.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         lEntityKeyRG" + szCtrlTag + " = " +
                                         "vRepeatingGrp" + szCtrlTag + ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKeyRG" + szCtrlTag + " = Long.toString( lEntityKeyRG" + szCtrlTag + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szRepeatingGroupKey = " + ^::^ + strEntityKeyRG" + szCtrlTag 
               //szRepeatGrpKey = "::<%=strEntityKeyRG%>"
            ELSE
               // This is a repeating group but it's not for the current ViewName we have passed in, so ignore.
               szRepeatingGroupFlag = ""
            END
            
         END
         
         // If the current control is a repeating groupbox, then it has mapping, so we need to ignore that case.
         SET CURSOR FIRST vDialog.CtrlMapView WITHIN vDialog.Control
                    WHERE vDialog.CtrlMapView.Name = ViewName
         IF RESULT >= zCURSOR_SET AND szControlType != "GroupBox"

            szViewName = vDialog.CtrlMapView.Name
            // If this is an editable field within a repeating group then we are using vRepeatingGrp instead of
            // the view name.
            IF szRepeatGrpKey != "" 
               szViewName = "vRepeatingGrp" + szRepeatGrpKey
               zSearchAndReplace( szViewName, 100, " + ^::^ + strEntityKeyRG", "" )
            END

            nViewNameLth = zstrlen( szViewName )
            
            IF szControlType = "Text"     OR
               szControlType = "EditBox"  OR
               szControlType = "ComboBox"

               szFlag = "8"   // SetAttribute.. will be by default Context.
            ELSE
               szFlag = "0"   // SetAttribute.. will NOT be by default Context.
            END

            IF szControlType = "EditBox"  OR
               szControlType = "CheckBox" OR
               szControlType = "MLEdit"   OR
               szControlType = "RadioGrp"

               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  IF vDialog.CtrlMapContext EXISTS
                     szContextName = vDialog.CtrlMapContext.Name
                     //If the user specifies a context name then we will use this
                     //and not the default context. KJS 09/03/13 - Not sure we need this szFlag...
                     szFlag = "0"
                  ELSE
                     szContextName = ""
                  END

                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      nRC = " + szViewName + ".cursor( ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 ) // CursorResult.SET"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strMapValue = request.getParameter( ^" + szCtrlTag + "^" + szRepeatGrpKey + " );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  IF szControlType = "EditBox" OR szControlType = "MLEdit"
                     IF szXSSEncode = "Y"
                        szWriteBuffer = "         strMapValue = ReplaceXSSValues( strMapValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        IF vDialog.Control.WebCtrlType = "escapeHTML"
                           szWriteBuffer = "         task.log().debug( ^" + szCtrlTag + " prior to escape: ^ + strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         strMapValue = StringEscapeUtils.escapeHtml4( strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         task.log().debug( ^" + szCtrlTag + " after escape: ^ + strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                     END
                  END
                  
                  // If this is a checkbox, then we want to check the unchecked value if there is one.
                  IF szControlType = "CheckBox" 
   
                     // See if the checkbox has an unchecked value. The checked value is in attrib RadioOrCheckboxValue but we 
                     // don't have an attrib for the unchecked value.
                     lTemp = 256
                     GetBlobFromAttribute( szBlob, lTemp, vDialog, "Control", "CtrlBOI" )
                     lLen = zstrlen( szBlob )
                     lLen = lLen + 2
                     szUnChecked = ""
                     IF lTemp > lLen 
                        ZeidonCopyWithinString( szBlob, 1, lLen, 256 )
                        szUnChecked = szBlob
                        szWriteBuffer = "         // If the checkbox is not checked, then set to the unchecked value."
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if (strMapValue == null |||| strMapValue.isEmpty() )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strMapValue = ^" + szUnChecked + "^;" 
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END
                     
                  END
                  
                  // try
                  szWriteBuffer = "         try"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            if ( webMapping )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                     szCtrlTag + "^, ^^, strMapValue );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            else"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               " + szViewName +
                                                  ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                                  "^ ).getAttribute( ^" +
                                                  vDialog.CtrlMapER_Attribute.Name + "^ ).setValue( strMapValue, " +
                                                  "^" + szContextName + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  // catch
                  szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            nMapError = -16;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               END
            ELSE
            IF szControlType = "ComboBox"

               nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
               IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                  // This is currently the same as Editbox above.
                  SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                  IF RESULT >= zCURSOR_SET
                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                     ELSE
                        szContextName = ""
                     END

                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag + szRepeatGrpKey
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      nRC = " + szViewName + ".cursor( ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue = request.getParameter( ^h" +
                                     szCtrlTag + "^" + szRepeatGrpKey + " );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                     // try
                     szWriteBuffer = "         try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( webMapping )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                        szCtrlTag + "^, ^^, strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               " + szViewName + ".cursor( ^" +
                                                     vDialog.CtrlMapRelatedEntity.Name +
                                                     "^ ).getAttribute( ^" +
                                                     vDialog.CtrlMapER_Attribute.Name + "^ ).setValue( strMapValue, ^^ );"
                                                     // KJS 10/22/14 - I am going to assume that the default domain has all of the
                                                     // values (old and new) for the domain. So we do not put in the context name,
                                                     // I'm not sure if this is going to be good or not, not sure if I should
                                                     // pass a value in hComb... that indicates, we don't want to set this value
                                                     // because the value is no longer valid in the domain.
                                                     //vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, ^" + szContextName + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // end of try/catch
                     szWriteBuffer = "      }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  END
               ELSE
                  // Combobox with Auto Include or Set Position Only
                  // Note that this code is not executed if the view being
                  // passed is for the list mapping, instead of the edit
                  // mapping. Otherwise, the code would be generated twice,
                  // once when this routine is called for the edit view and
                  // once for the list view.
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR PREVIOUS vDialog2.CtrlMap
                  IF RESULT < zCURSOR_SET
                     // We were positioned on the first CtrlMap, which means we
                     // were being called for the edit view.
                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag + szRepeatGrpKey
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // Position on second CtrlMap, which is for list mapping Attribute.
                     SET CURSOR NEXT vDialog2.CtrlMap

                     // Position on third CtrlMap, which is for list mapping Entity.
                     // If it is null, the list mapping entity is from the prior CtrlMap.
                     CreateViewFromView( vDialog3, vDialog2 )
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                     ELSE
                        szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                     END

                     // Position on fourth CtrlMap, which is for scoping Entity.
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szScopingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                     ELSE
                        szScopingEntityName = ""
                     END

                     DropView( vDialog3 )

                     IF vDialog2.CtrlMapView EXISTS
                        szWriteBuffer = "      " + vDialog2.CtrlMapView.Name + " = " +
                                        "task.getViewByName( ^" + vDialog2.CtrlMapView.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog2.CtrlMapView.Name + " ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 06/04/10 - We did not previously have this checkExistenceOfEntity but now with
                        // java, the setPosition will call an exception if there are no entities (the combo box is empty).
                        szWriteBuffer = "         nRC = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                        szListMappingEntityName + "^ ).checkExistenceOfEntity( ).toInt();"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "            strMapValue = request.getParameter( ^h" + szCtrlTag + "^" + szRepeatGrpKey + " );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( strMapValue != null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               nRelPos = java.lang.Integer.parseInt( strMapValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                           // For Auto Include, we must decrement nRelPos for blank entry.
                           szWriteBuffer = "               nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        szWriteBuffer = "               " + vDialog2.CtrlMapView.Name + ".cursor( ^" + szListMappingEntityName + "^ )" +
                                        ".setPosition( nRelPos, ^" + szScopingEntityName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                           //Set Foreign Key
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            // Set Foreign Key Code "
                           //Check the existence of the edit mapping entity
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            nRC = " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           IF vDialog2.CtrlMapContext EXISTS
                              szContextName = vDialog2.CtrlMapContext.Name
                           ELSE
                              szContextName = ""
                           END

                           IF vDialog2.CtrlMapER_Domain.MaxStringLth > 254
                              lMaxStringLength = vDialog2.CtrlMapER_Domain.MaxStringLth
                              szMaxStringLength = lMaxStringLength
                           ELSE
                              szMaxStringLength = "254"
                           END

                           szWriteBuffer = "               strMapValue = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                              vDialog2.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                              vDialog2.CtrlMapER_Attribute.Name + "^ ).getString( ^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                           IF vDialog.CtrlMapContext EXISTS
                              szContextName = vDialog.CtrlMapContext.Name
                           ELSE
                              szContextName = ""
                           END

                           // try
                           szWriteBuffer = "            try"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               if ( webMapping )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  VmlOperation.CreateMessage( task, ^" +
                                                              szCtrlTag + "^, ^^, strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + szViewName + ".cursor( ^" +
                              vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                              vDialog.CtrlMapER_Attribute.Name + "^ ).setValue( strMapValue, ^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // catch
                           szWriteBuffer = "            catch ( InvalidAttributeValueException e )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               nMapError = -16;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // end of try/catch
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        END

                        // IF Auto Include
                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                           // Auto Include only.
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            // Auto Include Code "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            // If the value is ^0^ then the user has selected the null entry, we do not want to do an include."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            // If there is an entity, we want to exclude it. "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "            if ( !StringUtils.equals( strMapValue, ^0^ ) )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "               nRC = " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                           //Entity, so then we would not want to exclude and include.  Seems like this is only
                           //going to matter if this combo box is in a grid.
                           //KELLY121008
                           szWriteBuffer = "                  // Only do the automatic include if this is a different entity"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  strTemp = " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^^ );"

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "                  if ( !StringUtils.equals( strTemp, " + vDialog2.CtrlMapView.Name +
                                           ".cursor( ^" + vDialog2.CtrlMapRelatedEntity.Name +
                                           "^ ).getAttribute( ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ).getString( ^^ ) ) )"

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                     " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^ ).excludeEntity( CursorPosition.NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "                     " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).includeSubobject( " +
                                           vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                           szListMappingEntityName +
                                           "^ ), CursorPosition.NEXT );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "               }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                     " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).includeSubobject( " +
                                           vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                           szListMappingEntityName +
                                           "^ ), CursorPosition.NEXT );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               nRC = " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                     " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^ ).excludeEntity( CursorPosition.NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        END

                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        
                        szWriteBuffer = "         }  // checkExistenceofEntity"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     ELSE
                        MessageSend( vDialog, "", "XSL Generation",
                                     "Missing List Mapping.",
                                     zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     END
                  END

                  DropView( vDialog2 )

               END
            ELSE
            IF szControlType = "ListBox"
               szScopingEntityName = ""
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
               END

               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


               // KJS 06/04/10 - We did not previously have this checkExistenceOfEntity but now with
               // java, the setPosition will call an exception if there are no entities (the combo box is empty).
               szWriteBuffer = "      nRC = " + szViewName + ".cursor( ^" +
                               vDialog.CtrlMapLOD_Entity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         strMapValue = request.getParameter( ^h" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( strMapValue != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nRelPos = java.lang.Integer.parseInt( strMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "               " + szViewName + ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ )" +
                               ".setPosition( " +
                               "nRelPos, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }  // checkExistenceOfEntity"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
              DropView( vDialog2 )

            ELSE
            IF szControlType = "Calendar"
               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      nRC = " + szViewName + ".cursor( ^" +
                                         vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strMapValue = request.getParameter( ^" + szCtrlTag + "^" + szRepeatGrpKey + " );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strDateFormat = request.getParameter( ^zDateFormat^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  // try
                  szWriteBuffer = "         try"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            if ( webMapping )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                     szCtrlTag + "^, ^^, strMapValue );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            else"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               " + szViewName + ".cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ ).setValue( strMapValue, strDateFormat );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  // catch
                  szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            nMapError = -16;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  // end of try/catch
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  WL_QC( vDialog, lFile, "", "^", 0 )

               END
            ELSE
            IF szControlType = "Grid"

               szCtrlTag = vDialog.Control.Tag
               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // KJS 5/1/08 - Create a temp view to the grid view and loop through that creating the mapping.
               // That way, if there are other grids on the page using the same view, we have not messed up
               // the positioning for their mapping.
               szWriteBuffer = "      // We are creating a temp view to the grid view so that if there are "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // grids on the same window with the same view we do not mess up the "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // entity positions. "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      vGridTmp = " + szViewName + ".newView( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      csrRC = vGridTmp.cursor( ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirst( " + szScopingEntityName + " );"
               ELSE
                  szWriteBuffer = "      csrRC = vGridTmp.cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirstWithinOi( );"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( csrRC.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         lEntityKey = " +
                                         "vGridTmp.cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Long.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Process each subcontrol.
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag

                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szCtrlTag = vDialog.Control.Tag
                  IF szCtrlCtrlType = "EditBox" OR
                     szCtrlCtrlType = "ComboBox" OR
                     szCtrlCtrlType = "GridEditCtl" OR
                     szCtrlCtrlType = "GridComboCtl"
                     szFlag = "8"   // SetAttribute... will be by default Context.
                  ELSE
                     szFlag = "0"   // SetAttribute... will NOT be by default Context.
                  END

                  IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                     //If this is a combobox, then we get our request.GetParameter from the
                     //hidden field (ex: hComboBox1)
                     szhFlag = "h"
                  ELSE
                     szhFlag = ""
                  END

                  //KELLY - Would I want to make an "IF" statement here to check if this control id
                  //is disabled.  If so, I assume I don't want to create any of the mapping code.

                  IF  vDialog.Control.Disabled != "Y"

                  //KJS 7/25/07 - Check if this control should be an edit control
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  // If this is an edit box, then set the mapping code.
                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"

                     lEditBox = 1

                     szContextName = ""
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                     IF RESULT >= zCURSOR_SET
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                           //If the user specifies a context name then we will use this
                           //and not the default context.
                           szFlag = "0"
                        ELSE
                           szContextName = ""
                        END
                     END

                     szWriteBuffer = "         strTag = ^" + szCtrlTag + "::^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // If strMapValue is null, then that means that this row of the grid is being hidden and so
                     // no value was assigned.  If this is the case, then we do not want to process this row so ignore.
                     szWriteBuffer = "         if ( strMapValue != null ) "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         { "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                        lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                        szMaxStringLength = lMaxStringLength
                     ELSE
                        szMaxStringLength = "254"
                     END

                     // try
                     szWriteBuffer = "            try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               if ( webMapping )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  VmlOperation.CreateMessage( task, ^" +
                                                           szCtrlTag + "^, ^^, strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  vGridTmp.cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                                           "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                                           "^ ).setValue( strMapValue, ^" + szContextName + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "            catch ( InvalidAttributeValueException e )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // KJS 02/27/12 Specifically using strTag...
                     szWriteBuffer = "               VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                  // szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // end of try/catch
                     szWriteBuffer = "      } "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  ELSE
                     lEditBox = 0
                  END

                  IF ( szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox" ) AND vDialog.Control.Disabled != "Y" //DonC added 7/25/07

                     szWriteBuffer = "         strTag = ^" + szCtrlTag + "^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue" + " = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // See if the checkbox has an unchecked value. The checked value is in attrib RadioOrCheckboxValue but we 
                     // don't have an attrib for the unchecked value.
                     lTemp = 256
                     GetBlobFromAttribute( szBlob, lTemp, vDialog, "Control", "CtrlBOI" )
                     lLen = zstrlen( szBlob )
                     lLen = lLen + 2
                     szUnChecked = ""
                     IF lTemp > lLen 
                        ZeidonCopyWithinString( szBlob, 1, lLen, 256 )
                        szUnChecked = szBlob
                        szWriteBuffer = "         // If the checkbox is not checked, then set to the unchecked value."
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if (strMapValue == null |||| strMapValue.isEmpty() )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strMapValue = ^" + szUnChecked + "^;" 
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END
                     
                     szCheckBoxValue = vDialog.Control.RadioOrCheckboxValue

                     // try
                     szWriteBuffer = "         try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( webMapping )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                        szCtrlTag + "^, ^^, strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               if ( strMapValue"  + " != null )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^ ).setValue( strMapValue, ^^ );" //KKKKKKK
                                  //"^ ).setValue( ^" + szCheckBoxValue + "^, ^^ );" //KKKKKKK
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "'", 0 )
                     szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^ ).setValue( ^^, ^^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // KJS 02/27/12 Specifically using strTag...
                     szWriteBuffer = "            VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                  // szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     // end of try/catch
                  END

                  IF szCtrlCtrlType = "ComboBox" OR
                     szCtrlCtrlType = "GridComboCtl"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END

                        lSubtype = vDialog.Control.Subtype
                        nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                        IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                           szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "::^ + strEntityKey;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         if ( strMapValue != null ) "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         { "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           // try
                           szWriteBuffer = "            try"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               if ( webMapping )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  VmlOperation.CreateMessage( task, ^" +
                                                                 szCtrlTag + "^, ^^, strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^ ).setValue( strMapValue, " +
                                     "^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // catch
                           szWriteBuffer = "            catch ( InvalidAttributeValueException e )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               nMapError = -16;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // KJS 02/27/12 Specifically using strTag...
                           szWriteBuffer = "               VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                        // szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // end of try/catch
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                           // WL_QC( vDialog, lFile, "", "^", 0 )
                        ELSE

                           // Combobox with Auto Include or Set Position Only
                           // Note that this code is not executed if the view being
                           // passed is for the list mapping, instead of the edit
                           // mapping. Otherwise, the code would be generated twice,
                           // once when this routine is called for the edit view and
                           // once for the list view.
                           CreateViewFromView( vDialog2, vDialog )
                           SET CURSOR PREVIOUS vDialog2.CtrlMap
                           IF RESULT < zCURSOR_SET
                              // We were positioned on the first CtrlMap, which means we
                              // were being called for the edit view.
                              szWriteBuffer = "         // " + szControlType + ": " + szCtrlTag
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              // Position on second CtrlMap, which is for list mapping Attribute.
                              SET CURSOR NEXT vDialog2.CtrlMap

                              // Position on third CtrlMap, which is for list mapping Entity.
                              // If it is null, the list mapping entity is from the prior CtrlMap.
                              CreateViewFromView( vDialog3, vDialog2 )
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                              ELSE
                                 szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                              END

                              // Position on fourth CtrlMap, which is for scoping Entity.
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szScopingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                              ELSE
                                 szScopingEntityName = ""
                              END

                              DropView( vDialog3 )

                              IF vDialog2.CtrlMapView EXISTS
                                 szWriteBuffer = "         " + vDialog2.CtrlMapView.Name + " = " +
                                                 "task.getViewByName( ^" + vDialog2.CtrlMapView.Name + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         if ( VmlOperation.isValid( " + vDialog2.CtrlMapView.Name + " ) )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              // szWriteBuffer = "      // " + vDialog2.CtrlMapView.Name +
                              //                 ".SetAllSelectStatesForEntity( ^" +
                              //                 vDialog2.CtrlMapRelatedEntity.Name +
                              //                 "^, (short) 0, ^" + szScopingEntityName + "^ );"
                              // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // KJS 06/04/10 - We did not previously have this checkExistenceOfEntity but now with
                                 // java, the setPosition will call an exception if there are no entities (the combo box is empty).
                                 szWriteBuffer = "         nRC = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                                 szListMappingEntityName + "^ ).checkExistenceOfEntity( ).toInt();"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         if ( nRC >= 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 szWriteBuffer = "            strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            strMapValue = request.getParameter( strTag );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            if ( strMapValue != null )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               nRelPos = java.lang.Integer.parseInt( strMapValue );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // For Auto Include, we must decrement nRelPos for blank entry.
                                    szWriteBuffer = "               nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END
                                 szWriteBuffer = "            " + vDialog2.CtrlMapView.Name+ ".cursor( ^" + szListMappingEntityName + "^ )" +
                                                 ".setPosition( " +
                                                 "nRelPos, ^" + szScopingEntityName + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         }  // checkExistenceOfEntity"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IssueError( vDialog,0,0, "At second" )

                                 IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                                    //Set Foreign Key
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Set Foreign Key Code "
                                    //Check the existence of the edit mapping entity
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = vGridTmp.cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    IF vDialog2.CtrlMapContext EXISTS
                                       szContextName = vDialog2.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    IF vDialog2.CtrlMapER_Domain.MaxStringLth > 254
                                       lMaxStringLength = vDialog2.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "254"
                                    END

                                    szWriteBuffer = "               strMapValue = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                       vDialog2.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                                       vDialog2.CtrlMapER_Attribute.Name + "^ ).getString( ^" + szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                                    IF vDialog.CtrlMapContext EXISTS
                                       szContextName = vDialog.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    // try
                                    szWriteBuffer = "         try"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( webMapping )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                                       szCtrlTag + "^, ^^, strMapValue );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                       vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                                       vDialog.CtrlMapER_Attribute.Name + "^ ).setValue( strMapValue, ^" + szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    // catch
                                    szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nMapError = -16;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    // KJS 02/27/12 Specifically using strTag...
                                    szWriteBuffer = "            VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                                 // szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    // end of try/catch
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // Auto Include only.
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Auto Include Code "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                                    //Entity, so then we would not want to exclude and include.  Seems like this is only
                                    //going to matter if this combo box is in a grid.
                                    szWriteBuffer = "               //Only do the automatic include if this is a different entity"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               strTemp = vGridTmp.cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^^ );"

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    szWriteBuffer = "               if ( !StringUtils.equals( strTemp, " + vDialog2.CtrlMapView.Name +
                                                    ".cursor( ^" + vDialog2.CtrlMapRelatedEntity.Name +
                                                    "^ ).getAttribute( ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ).getString( ^^ ) ) )"

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name +
                                                    "^ ).excludeEntity( CursorPosition.NONE );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).includeSubobject( " +
                                                    vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                                    vDialog2.CtrlMapRelatedEntity.Name +
                                                    "^), CursorPostion.NEXT );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              ELSE  //IF vDialog2.CtrlMapView EXISTS
                                 MessageSend( vDialog, "", "XSL Generation",
                                              "Missing List Mapping.",
                                              zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                              END  //IF vDialog2.CtrlMapView EXISTS
                           END  //IF RESULT < zCURSOR_SET

                        END
                     END
                  END

                  IF szCtrlCtrlType = "GridEditBox" OR
                     szCtrlCtrlType = "Calendar"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END

                        szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "::^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "         if ( strMapValue != null ) "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         { "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                        // try
                        szWriteBuffer = "            try"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               if ( webMapping )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "                  VmlOperation.CreateMessage( task, ^" +
                                                              szCtrlTag + "^, ^^, strMapValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "                  strDateFormat = request.getParameter( ^zDateFormat^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^ ).setValue( strMapValue, strDateFormat );"
                        ELSE
                           szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^ ).setValue( strMapValue, " +
                                     "^" + szContextName + "^ );"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // catch
                        szWriteBuffer = "            catch ( InvalidAttributeValueException e )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               nMapError = -16;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // KJS 02/27/12 Specifically using strTag...
                        szWriteBuffer = "               VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                     // szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // end of try/catch
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     // WL_QC( vDialog, lFile, "", "^", 0 )
                     END
                  END
                  END //IF vDialog.Control.Disabled != "Y"

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )
                  END
               END

               ResetViewFromSubobject( vDialog )

            // IF lSubtypeX = 0  now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
                  szWriteBuffer = "         csrRC = " +
                                  "vGridTmp.cursor( ^" +
                                  vDialog.CtrlMapLOD_Entity.Name +
                                  "^ ).setNextContinue( );"
                                  //"^ ).setNext( " + szScopingEntityName + " );"
            // ELSE
            //    szWriteBuffer = "         nRC = " +
            //                    "vGridTmp.cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setNextWithinOi( );"
            // END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "      vGridTmp.drop( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
            IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y"
               // This is the survey group. Creating input mapping for this...
               // **********************************************************
               szWriteBuffer = "      String strQuestionCount;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionID=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionType=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionName=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionAnswer=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionChoiceID=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strAllowComment=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strQuestionCount = request.getParameter( ^SurveyQuestionCount^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      int iQuestionCount=Integer.parseInt(strQuestionCount);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      for (int i=1; i<=iQuestionCount; i++)"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^QuestionID^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strQuestionID = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^QuestionType^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strQuestionType= request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^AllowComment^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strAllowComment= request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* strQuestionType: ^, strQuestionType );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* strQuestionID:   ^, strQuestionID );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + szViewName + "cursor(^SurveyQuestion^).setFirst( ^ID^, strQuestionID, ^SurveyQuestionaire^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strQuestionType.equals(^Text^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Text   ^, ^^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strTemp = ^txtAnswer^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               nRC = " + szViewName + ".cursor( ^SurveyQuestion^).getAttribute( ^wTextAnswer^ ).setValue( strQuestionAnswer, ^^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            else if ( strQuestionType.equals(^Yes/No^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              strTemp = ^chkAnswer^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strQuestionType.equals(^Multiple Choice Single Response^) || strQuestionType.equals(^Multiple Choice Multiple Response^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              if ( strQuestionType.equals(^Multiple Choice Single Response^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // radio buttons"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  strTemp = ^chkAnswer^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Radio Control:   ^, strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Radio Answer:   ^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 nRC = " + szViewName + ".cursor( ^SurveyQuestion^).getAttribute( ^wTextAnswer^ ).setValue( strQuestionAnswer, ^^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // check boxes"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Checkbox   ^, ^^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                nRC = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^ ).setFirst( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 while ( nRC == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strQuestionChoiceID = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^ ).getAttribute( ^ID^ ).getString( ^^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strTemp = ^chkAnswer^ + strQuestionChoiceID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Checkbox Control:   ^, strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Checkbox Answer:   ^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    //if ( !strQuestionAnswer.equals(^^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    if ( strQuestionAnswer != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       nRC = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^).getAttribute( ^wSelectedAnswer^ ).setValue( strQuestionChoiceID, ^^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
              szWriteBuffer = "                      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       nRC = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^).getAttribute( ^wSelectedAnswer^ ).setValue( ^^, ^^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    nRC = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^ ).setNextContinue( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    task.log().info( ^DoInputMapping setNextContinue RC: ^, nRC );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Map Comment if it exists
               szWriteBuffer = "            if ( strAllowComment.equals(^Y^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strTemp = ^txtComment^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               nRC = " + szViewName + ".cursor( ^SurveyQuestion^).getAttribute( ^wComment^ ).setValue( strQuestionAnswer, ^^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // *************************************************************
            END // IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y"

            END // IF szControlType = "Grid"
            END // IF szControlType = "Calendar"
            END // IF szControlType = "ListBox"
            END // IF szControlType = "ComboBox"
            END // IF szControlType = "EditBox" OR "CheckBox" OR "MLEdit" OR "RadioGrp"
         ELSE
            IF vDialog.CtrlCtrl EXISTS
               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               IF szRepeatingGroupKey != ""
                  GenJSPJ_InputMapRecurs( vDialog, ViewName, lFile, szWriteBuffer, lTableRowCnt, szRepeatingGroupKey )
                  szRepeatingGroupKey = ""
               ELSE 
                  GenJSPJ_InputMapRecurs( vDialog, ViewName, lFile, szWriteBuffer, lTableRowCnt, szRepeatGrpKey )
               END
               ResetViewFromSubobject( vDialog )
               
               IF szRepeatingGroupFlag = "Y"
               
                  szViewName = "vRepeatingGrp" + szCtrlTag
                  szWriteBuffer = "         csrRC = " + szViewName +
                                  ".cursor( ^" +
                                  vDialog.CtrlMapLOD_Entity.Name +
                                  "^ ).setNextContinue( );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      } // End of Repeating Group loop (" + szCtrlTag + ")"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END  // IF RESULT >= zCURSOR_SET AND szControlType != "GroupBox"
      END  // IF Disabled entries are skipped
   END  // FOR EACH vDialog.Control
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_OutputMapRecurs
//
//  Comboboxes and listboxes need to do some mapping before the action
//  is called, so create separate javascript functions for actions that
//  are called from comboboxes or listboxes.
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_OutputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                         INTEGER          lFile,
                         STRING ( 10000 ) szWriteBuffer,
                         STRING ( 255 )   szFormName,
                         STRING ( 100 )   szRepeatGrpKey )

   VIEW          vDialogParent
   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlTag
   STRING ( 50 ) szActionName
   STRING ( 50 ) szWebCtrlType
   STRING ( 10 ) szSelectFunction
   STRING ( 10000 ) szJavaScript
   STRING ( 1 )  szCodeCreated
   STRING ( 1 )  szRepeatingGroupFlag
   SHORT         nGridParent
   INTEGER       lSubtype
   SHORT         nRC

   // "ONCHANGE" FUNCTION GENERATION FOR COMBOBOX CONTROLS

   // Identify if this Control is inside a Grid by setting nGridParent.
   // Note by DonC on 9/7/07: I don't see why the following code is necessary as we know the
   // combobox is in a Grid because its type is "GridComboCtl".
   /*nGridParent = 0
   nRC = 0
   CreateViewFromView( vDialogParent, vDialog )
   LOOP WHILE nGridParent = 0 AND nRC = 0
      nRC = ResetViewFromSubobject( vDialogParent )
      IF nRC = 0 AND vDialogParent.ControlDef EXISTS
         szControlType = vDialogParent.ControlDef.Tag
         IF szControlType = "Grid"
            nGridParent = 1
         END
      END
   END
   DropView( vDialogParent )*/

   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.
   FOR EACH vDialog.Control

      szControlType = vDialog.ControlDef.Tag
      szCtrlTag = vDialog.Control.Tag
      
      IF szControlType = "GroupBox" AND szRepeatGrpKey = ""
         szRepeatingGroupFlag = ""
         IF szWebCtrlType = "RepeatingGroup"
            szRepeatingGroupFlag = "Y"
         ELSE
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Repeating Group"
            IF RESULT >= zCURSOR_SET
               szRepeatingGroupFlag = "Y"
            END
         END
         //szRepeatGrpKey = "Y"
      END      

      // Set up Action data for combo boxes.
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectFunction = "OnChange"
         ELSE
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectFunction = "OnChange"
      END

      // Process Combobox entries
      IF szControlType = "ComboBox" OR szControlType = "GridComboCtl"
         // The function statements for Combobox entries are primarily driven by:
         // 1. Whether the Combobox is Domain or select entity type.
         // 2. Whether there is an Action triggered by the combobox.
         // 3. Whether the Combobox is part of a Grid.

         //Is this combobox in a grid?  You'd think you could just tell by the name "GridComboCtl but
         //I can create a combobox outside the listbox and then move it into the grid and the type will
         //still be "ComboBox".
         nGridParent = 0
         nRC = 0
         CreateViewFromView( vDialogParent, vDialog )
         nRC = ResetViewFromSubobject( vDialogParent )
         IF nRC = 0 AND vDialogParent.ControlDef EXISTS
            szControlType = vDialogParent.ControlDef.Tag
            IF szControlType = "Grid"
               nGridParent = 1
            END
         END
         DropView( vDialogParent )

         //KJS 12/7/07 - We are going to add autoinclude and set foreign key comboboxes.
         //so we will need to change the below statements.

         // function statement
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0 AND szRepeatGrpKey = ""
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control, strEntityKey )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0 AND szRepeatGrpKey = ""
               // Select Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Select Combobox IN Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   isWindowClosing = false;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // If Action is SelectEnd, generate code to skip submit on tab.
         IF vDialog.EventAct EXISTS AND vDialog.Event.Type = 256
            szWriteBuffer = "   if (isChangedComboBox(document." + szFormName + "." + szCtrlTag + ") == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         // ACTION EXISTS
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0 AND szRepeatGrpKey = ""
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
               szWriteBuffer = "      document.getElementById( hControl ).value = Control.value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0 AND szRepeatGrpKey = ""
               //NOT in Grid
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               //IN Grid
               szWriteBuffer = "      document.getElementById( hControl ).value = Control.selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         // Action Processing
         IF vDialog.EventAct EXISTS

            // KJS 08/14/2009 - There may be times when we simply want to run the javascript code without submitting
            // this form.  The only problem is if this combobox is an auto include or a "set foreign key" then we have
            // to submit to allow this to happen.  If the combobox is not one of those and the action type is
            // zWAB_StayOnWindow and there is javascript code, then do not want to do the submit.

            szCodeCreated = "N"

            szJavaScript = vDialog.EventAct.WebJavaScript

            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)
               // "Auto include" or "set foreign key" combo box.  Do nothing.
            ELSE
               // Not an "auto include" or "set foreign key" combobox and there is javascript code for
               // the action.
               IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""
                     // Create only the javascript code without the form submit.

                  szCodeCreated = "Y"
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END

            // The code for szWAB_StayOnWindow with Javascript code was not created so build this
            // the normal way with the action .submit.
            IF szCodeCreated = "N"
               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               //KJS 11/16/2007 - We want to insert any javascript code that the
               //user has entered for this action.  This will be put before the action
               //generated code for submitting.  If the user wants to skip the
               //generated code, the inserted code should end with a return.
               IF  szJavaScript != ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END

               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            //There is no action but because this is an automatic include or a
            //set foreign key combobox, there should be an action and a submit.
            //We will call a generic one
            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)

               szActionName = "ZEIDON_ComboBoxSubmit"
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      ELSE
      IF szControlType = "ListBox"

         //szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
         IF szRepeatGrpKey = "" 
            szWriteBuffer = "function " + szCtrlTag +  "OnClick( )"
         ELSE
            szWriteBuffer = "function " + szCtrlTag +  "OnClick( hControl, Control )"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         //document.getElementById( hControl ).value
         
         IF szRepeatGrpKey = "" 
            szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                            "document." + szFormName + "." + szCtrlTag + ".selectedIndex"
         ELSE
            szWriteBuffer = "      document.getElementById( hControl ).value = Control.selectedIndex;"
         END                         
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Action Processing
         IF vDialog.EventAct EXISTS

            szJavaScript = vDialog.EventAct.WebJavaScript

            IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""

               szWriteBuffer = "      // Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // END of Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            ELSE

               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      ELSE
         // This is not a combobox, so continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS

            SetViewToSubobject( vDialog, "CtrlCtrl" )
            IF szRepeatingGroupFlag = "Y"
               GenJSPJ_OutputMapRecurs( vDialog, lFile, szWriteBuffer, szFormName, szRepeatingGroupFlag )
            ELSE 
               GenJSPJ_OutputMapRecurs( vDialog, lFile, szWriteBuffer, szFormName, szRepeatGrpKey )
            END
            ResetViewFromSubobject( vDialog )

         END
      END  // End of checking if this is a listbox
      END  // End of checking if this is a combobox

   END // FOR EACH vDialog.Control
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_Action
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_Action( VIEW vDialog     BASED ON LOD TZWDLGSO,
                VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                INTEGER          lFile,
                STRING ( 10000 ) szWriteBuffer,
                STRING ( 255 )   szFormName,
                STRING ( 34 )    szActionName,
                INTEGER          lTraceLevel )

   VIEW vLPLR       BASED ON LOD TZCMLPLO
   VIEW vDialogTemp BASED ON LOD TZWDLGSO
   VIEW vDialogCtrl BASED ON LOD TZWDLGSO
   STRING ( 10000 ) szJavaScript
   STRING ( 32 )    szJavaScriptLocation
   STRING ( 64 )    szSystemIniApplName
   STRING ( 100 )   szViewName
   STRING ( 100 )   szEntityName
   STRING ( 100 )   szEntityNameR
   STRING ( 100 )   szScopingName
   STRING ( 100 )   szContextName
   STRING ( 32 )    szDlgTagRoot
   STRING ( 100 )   szWndTagRoot
   STRING ( 100 )   szCtrlTag
   STRING ( 100 )   szDlgTag
// STRING ( 32 )    szWndTag
   STRING ( 64 )    szOperName
   STRING ( 100 )   szDownloadViewName
   STRING ( 100 )   szUploadViewName
   STRING ( 64 )    szWAB
   STRING ( 10 )    szMaxStringLength
   STRING ( 50 )    szPrivateKey
   STRING ( 50 )    szPublicKey
   STRING ( 3 )     szBuffer
   STRING ( 1 )     InsertBlankFlag
   STRING ( 1 )     szCommentAdded
   STRING ( 1 )     szDialogClassCreated
   STRING ( 1 )     szUploadTransferFileFlag
   STRING ( 1 )     szPosDataCreated
   STRING ( 1 )     szWebRedirection
   STRING ( 1 )     szRepeatingGroupFlag
   STRING ( 1 )     szProductionMode
   STRING ( 1 )     szGridScopeOI
   INTEGER          lControl
   INTEGER          lMaxStringLength
   INTEGER          lActionType
   INTEGER          lAutoSubAction
   INTEGER          lAutoNextPrev
   INTEGER          lSubtypeX
   SHORT            nViewNameLth
   SHORT            nGridParent
   SHORT            nRC

   InsertBlankFlag = "N"
   
   TraceLineS("*** GenJSPJ_Action *** ", "")

   szWebRedirection = ""
   GetViewByName( vLPLR, "TaskLPLR", vDialog, zLEVEL_TASK )
   szSystemIniApplName = "[App." + vLPLR.LPLR.Name + "]"
   SysReadZeidonIni( -1, szSystemIniApplName, "WebRedirection", szWebRedirection )
   
   szWriteBuffer = "   while ( bDone == false && StringUtils.equals( strActionToProcess, ^" + szActionName + "^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = true;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      VmlOperation.SetZeidonSessionAttribute( session, task, ^" + szFormName + "^, strActionToProcess );"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szDialogClassCreated = "N"
   szDlgTagRoot = vDialogRoot.Dialog.Tag
   szWndTagRoot = vDialogRoot.Window.Tag
   szJavaScript = vDialog.Action.WebJavaScript
   szJavaScriptLocation = vDialog.Action.WebJavaScriptLocation

   IF szJavaScript != "" AND szJavaScriptLocation = "Pre-Mapping"
      szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

//**********************************

   // KJS 11/05/09
   // If we unregister zeidon at the end of building this window, then when the user clicks an action,
   // we need to call any Prebuild/Posbuild operations (that would build objects used on this page) before we
   // call the action selected.
   IF vDialogRoot.Window.WEB_UnregisterZeidonWindow = "Y"
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      szCommentAdded = "N"
      FOR EACH vDialogTemp.Action
         FOR EACH vDialogTemp.ActWndEvent
            IF vDialogTemp.ActWndEvent.Type = 1 OR vDialogTemp.ActWndEvent.Type = 2

               IF vDialogTemp.ActOper EXISTS

                  // Don't want to add this comment twice if there is an operation for both prebuild and postbuild.
                  IF szCommentAdded = "N"
                     szWriteBuffer = "      // Prebuild/Postbuild Operations."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // These are called because we Unregister Zeidon when this page is finished loading, so"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // these operations need to be called before any action code (for recreating objects etc)."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szCommentAdded = "Y"
                  END

                  // In order to call a dialog operation we need to create an instance of the dialog class.  We only want to do this once.
                  IF szDialogClassCreated = "N"
                     IF szDlgTagRoot != vDialogTemp.Dialog.Tag
                        szWriteBuffer = "      " +  vDialogTemp.Dialog.Tag + "_Dialog " + vDialogTemp.Dialog.Tag + " = new " +
                                        vDialogTemp.Dialog.Tag + "_Dialog( vKZXMLPGO );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szDialogClassCreated = "Y"
                     END
                  END
                  
                  // KJS 08/06/14 - I had put a try/catch around the operation call because it seemed better than getting the exception
                  // crash. But that might be true in production but when developing, we'd really like to see the stack trace. Want to make
                  // this an ini setting but for now I think I am just going to make the operation call and skip the try/catch.
                  szProductionMode = ""
                  IF szProductionMode = "Y"
                     
                     szWriteBuffer = "      try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         nOptRC = " + vDialogTemp.Dialog.Tag + "." + vDialogTemp.ActOper.Name + "( new zVIEW( vKZXMLPGO ) );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      catch (Exception e)"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         // Set the error return code."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         nOptRC = 2;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strVMLError = ^<br><br>*** Error running Operation " + vDialogTemp.ActOper.Name + ", Please contact the helpdesk: ^ + e.getMessage();"     
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         task.log().error( strVMLError, e );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
                     //szWriteBuffer = "      nOptRC = " + vDialogTemp.Dialog.Tag + "." + vDialogTemp.ActOper.Name + "( new zVIEW( vKZXMLPGO ) );"
                     //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      if ( nOptRC == 2 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         session.setAttribute( ^ZeidonError^, ^Y^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         break;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  ELSE
                     szWriteBuffer = "      nOptRC = " + vDialogTemp.Dialog.Tag + "." + vDialogTemp.ActOper.Name + "( new zVIEW( vKZXMLPGO ) );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     
                  END
               END
            END
         END
      END
      DropView ( vDialogTemp )

   END

//***********************************

   // Keep position on the Control that triggers the Action, if it exists.
   CreateViewFromView( vDialogCtrl, vDialog )
   NAME VIEW vDialogCtrl "vDialogCtrl"
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogCtrl, "EventAct", "Tag", lControl, szActionName, "", "", 0, "Window", "" )
   IF nRC < zCURSOR_SET
      DropView( vDialogCtrl )
      vDialogCtrl = 0
   END

   lActionType = vDialog.Action.Type
   IF lActionType = zWAB_StayOnWindow OR
      lActionType = zWAB_StayOnWindowWithRefresh OR
      lActionType = zWAB_StayOnWindowWebRefresh
      szWAB = "zWAB_StayOnWindowWithRefresh"
   ELSE
      IF lActionType = zWAB_StartModelessSubwindow OR
         lActionType = zWAB_StartModalSubwindow
         szWAB = "zWAB_StartModalSubwindow"
      ELSE
         IF lActionType = zWAB_ReplaceWindowWithModelessWindow OR
            lActionType = zWAB_ReplaceWindowWithModalWindow
            szWAB = "zWAB_ReplaceWindowWithModalWindow"
         ELSE
            IF lActionType = zWAB_ReturnToParent OR
               lActionType = zWAB_ReturnToParentWithRefresh
               szWAB = "zWAB_ReturnToParent"
            ELSE
               IF lActionType = zWAB_StartTopWindow
                  szWAB = "zWAB_StartTopWindow"
               ELSE
                  IF lActionType = zWAB_ResetTopWindow
                     szWAB = "zWAB_ResetTopWindow"
                  ELSE
                     szWAB = ""
                  END
               END
            END
         END
      END
   END

   IF lActionType = zWAB_StartBrowserHTML_Page
      // KJS 02/09/2012 - I'm not sure what this is doing... does it even work?
      // Causing error in JOE so I am commenting out for now.
      szWriteBuffer = "      strURL = task.MakeWebFileName( 0 ) + ^.html^;"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "      task.dropName( strURL );"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      IF lActionType = zWAB_ProcessDownloadFile
         // Download File constants
         szWriteBuffer = "      String sDownloadFile = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sSourceFileNameOnly = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sExtension = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int l;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int x;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Download File mapping view: Mapping must be specified for download processing.
         IF vDialogCtrl = 0
            MessageSend( vDialog, "", "Download File Generation",
                                     "The Control with 'Download File' action could not be located.",
                                     zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         ELSE
            IF vDialogCtrl.CtrlMapER_Attribute DOES NOT EXIST
               MessageSend( vDialog, "", "Download File Generation",
                                        "The Control with 'Download File' action must specify mapping for the source file name.",
                                        zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            ELSE
               szDownloadViewName = vDialogCtrl.CtrlMapView.Name
               szWriteBuffer = "      View " + szDownloadViewName + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
         END
      END
   END

   // We need to determine if this Action is on a Group for File Transfer to Server, because we will not
   // generate the call to DoInputMapping in that case.
   szUploadTransferFileFlag = ""
   IF vDialogCtrl > 0
      CreateViewFromView( vDialogTemp, vDialogCtrl )
      ResetViewFromSubobject( vDialogTemp )
      SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Transfer to Server"
      IF RESULT >= zCURSOR_SET
         szUploadTransferFileFlag = "Y"
      END
      DropView( vDialogTemp )
   END

   // If this Action is for an Upload to Server File Transfer, we won't do normal input mapping, but we will map in the full target file name so
   // that we can process it, since we may not know the suffix from the source or even the file name from the source.
   IF szUploadTransferFileFlag = "Y"

      //If there is mapping on the edit ("file") control, we want to put the
      //filename that is being uploaded into that mapping.

      CreateViewFromView( vDialogTemp, vDialogCtrl )

         // Aadit, wants there to be an upload file limit, so that for email attachment, the file isn't too big to bring
         // down the mail server. This really needs to be an updatable field...
         szWriteBuffer = "      if ( iFileLth > 10485760 )"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, ^This file is too large!^, ^This file is too large!^ );"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )

      //I wanted to do the "SET CURSOR..." but because Control doesn't really have a parent
      //the c code that gets generated is only looking for ControlDef under Control (not all controls) and so
      //it is not finding it.
      //SET CURSOR FIRST vDialogTemp.Control WHERE vDialogTemp.ControlDef.Tag = "EditBox"
      FOR EACH vDialogTemp.Control

         IF vDialogTemp.ControlDef.Tag = "EditBox"
                                        //256
           //Get the mapping
            SET CURSOR FIRST vDialogTemp.CtrlMapLOD_Attribute WITHIN vDialogTemp.Control
            IF RESULT >= zCURSOR_SET
               szUploadViewName = vDialogTemp.CtrlMapView.Name
               szCtrlTag = vDialogTemp.Control.Tag
               szWriteBuffer = "      View " + szUploadViewName + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      " + vDialogTemp.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialogTemp.CtrlMapView.Name + "^ );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialogTemp.CtrlMapView.Name + " ) == false )"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      else"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + vDialogTemp.CtrlMapView.Name + ".cursor( ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )


               // KJS 08/06/14 - I had put a try/catch around the operation call because it seemed better than getting the exception
               // crash. But that might be true in production but when developing, we'd really like to see the stack trace. Want to make
               // this an ini setting but for now I think I am just going to make the operation call and skip the try/catch.
               IF szProductionMode = "Y"
                  // try
                  szWriteBuffer = "            try"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            {"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               " +
                         vDialogTemp.CtrlMapView.Name +
                         ".cursor( ^" + vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                         vDialogTemp.CtrlMapER_Attribute.Name + "^ ).setValue( strInputFileName, ^^ );"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            }"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  // catch
                  szWriteBuffer = "            catch ( InvalidAttributeValueException e )"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            {"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               nRC = 2;  // do the ^error^ redirection"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  // KJS 02/27/12 Specifically using strTag...
                  szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strInputFileName );"
               // szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               break;"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            }"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  // end of try/catch
   
                  szWriteBuffer = "         }"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               ELSE
                  szWriteBuffer = "               " +
                         vDialogTemp.CtrlMapView.Name +
                         ".cursor( ^" + vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                         vDialogTemp.CtrlMapER_Attribute.Name + "^ ).setValue( strInputFileName, ^^ );"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               END

            END
         END
      END
      DropView( vDialogTemp )

   ELSE
      IF lActionType = zWAB_StayOnWindowWebRefresh
         // DKS 2011.09.15 - We want to insert any java code that the
         // user has entered for this particular action at this point.
         IF szJavaScript != "" AND szJavaScriptLocation = ""
            szWriteBuffer = "   // Javascript code entered by user."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = szJavaScript
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // END of Javascript code entered by user."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END


      // Input Mapping Option
      IF vDialog.Action.NoMap != "Y"
         szWriteBuffer = "      // Input Mapping"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = DoInputMapping( request, session, application, false );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nRC < 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // Check if this is an action for reCAPTCHA.  If so, add the code...
   IF lActionType = 35 OR lActionType = 55
      // We need to get the control for this action so we can retrieve the private and public keys.
      CreateViewFromView( vDialogTemp, vDialog )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      szCtrlTag = "reCAPTCHA"
      IF SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" ) >= zCURSOR_SET
         szPublicKey = vDialogTemp.Control.WebreCAPTCHAPublicKey
         szPrivateKey = vDialogTemp.Control.WebreCAPTCHAPrivateKey

      END
      DropView( vDialogTemp )

      // create recaptcha without <noscript> tags
      szWriteBuffer = "      ReCaptcha captcha = ReCaptchaFactory.newReCaptcha( ^" + szPublicKey + "^, ^" + szPrivateKey + "^, false);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      ReCaptchaResponse response2 = captcha.checkAnswer( request.getRemoteAddr( ), request.getParameter( ^recaptcha_challenge_field^ ), request.getParameter( ^recaptcha_response_field^ ) );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if (response2.isValid( ))"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).info( ^reCAPTCHA Success^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // The user has not entered in the correct response, do not go further."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorTitle = ^INCORRECT RECAPTCHA^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMsg = ^You typed the reCaptcha image incorrectly.  Please try again.^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // No redirection, we are staying on this page."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 0;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

   //KJS 11/15/07 - If there is a button or hottext on a grid, then we should position on the correct
   //entity whether or not there is an operation.

   //We don't want to create the code to position on the correct
   //list entity twice.  So keep track...
   szPosDataCreated = "N"

      TraceLineS("*** Action Loop *** ", vDialog.Action.Tag  )
   //Loop through each ActCtrl to see if there is a button or hot text
   //on a grid that calls this action.  If so, then we need to
   //get position on the correct item in the list.  This is the
   //code to set position.  If there is more than one button/hottext
   //in this list that calls the same action, make sure we don't
   //create this code twice.
   FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

      szCtrlTag = vDialog.ActCtrl.Tag
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      NAME VIEW vDialogTemp "vDialogTemp"
     
      // KJS 11/08/12 - Used to only have to do the following for grid but now need to do this
      // for any control within a repeating group that has an action...
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      IF SetEntityCursor( vDialogTemp, "Control", "Tag", lControl,
                          szCtrlTag, "", "", 0,
                          "Window", "" ) >= zCURSOR_SET 

         // Identify if this Control is inside a Grid. Or if this control is inside a repeating group (or maybe both).
         nRC = 0
         nGridParent = 0
         szGridScopeOI = ""
         szBuffer = ""
         // For correct setEntityKey placement later, we need to know if this action is on a repeating group (even if it's within a grid). Because of this
         // we need to keep reseting the view from subobject because we could be down several groups.
         //LOOP WHILE nRC = 0 AND ( nGridParent = 0 OR szRepeatingGroupFlag = "" )
         LOOP WHILE nRC = 0 AND szRepeatingGroupFlag = ""
            //TraceLineS("*** LOOP for szRepeatingGroup *** ", "")
            nRC = ResetViewFromSubobject( vDialogTemp )
            IF nRC = 0 AND vDialogTemp.ControlDef EXISTS
               IF vDialogTemp.ControlDef.Tag = "GroupBox"
                  szRepeatingGroupFlag = ""
                  IF vDialogTemp.Control.WebCtrlType = "RepeatingGroup"
                     szRepeatingGroupFlag = "Y"
                  ELSE
                     SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "Repeating Group"
                     IF RESULT >= zCURSOR_SET
                        szRepeatingGroupFlag = "Y"
                        TraceLineS("**** REPEATING GROUP Y *** ", "")
                        // KJS 09/23/13 - Try getting the view for this
                        IF vDialogTemp.CtrlMapView EXISTS AND
                           vDialogTemp.CtrlMapLOD_Entity EXISTS
                           
                           szEntityNameR = vDialogTemp.CtrlMapLOD_Entity.Name
                        END
                        szBuffer = "   "
                     END
                  END
               END

               IF vDialogTemp.ControlDef.Tag = "Grid" OR szRepeatingGroupFlag = "Y"
                  // If the parent is a grid, then get the View and Entity now (we might be reseting the subobject and lose
                  // our position on the grid) so it can be used further down.
                  IF vDialogTemp.CtrlMapView EXISTS AND
                     vDialogTemp.CtrlMapLOD_Entity EXISTS AND nGridParent = 0
                     szViewName = vDialogTemp.CtrlMapView.Name
                     szEntityName = vDialogTemp.CtrlMapLOD_Entity.Name
                     // See if there is a scoping entity.
                     SET CURSOR NEXT vDialogTemp.CtrlMap
                     IF RESULT >= zCURSOR_SET
                        IF vDialogTemp.CtrlMapLOD_Entity EXISTS
                           szScopingName = vDialogTemp.CtrlMapLOD_Entity.Name
                        END
                     END
                  END
                  // The parent of the this control is a Grid, so indicate for later.
                  IF vDialogTemp.ControlDef.Tag = "Grid"
                     nGridParent = 1
                     // KJS 01/13/15 - Check if the grid is using Scope OI
                     lSubtypeX = vDialogTemp.Control.ExtendedStyle
                     lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
                     IF lSubtypeX = 0
                        szGridScopeOI = "Y"
                     END
                  END
               END
            END
         END

         //If we successfully reset from the subcontrols and we are on a grid.
         IF nGridParent = 1 OR szRepeatingGroupFlag = "Y"
         
            //TraceLineS("*** szRepeatingGroupFlag *** ", szRepeatingGroupFlag )
            //TraceLineI("*** nGridParent ***          ", nGridParent )
            //TraceLineS("*** szPosDataCreated ***     ", szPosDataCreated )
         
            // Because we are going to be looking again later in the generation process at actions and whether or not
            // they are inside a grid or repeating group, set a flag now so we don't have to do this later.
            vDialog.Action.ParentIsGridOrGrp = "Y"

            // szPosDataCreated is just to make sure we don't create this code twice.
            IF szPosDataCreated = "N"

               szPosDataCreated = "Y"
               
               TraceLineS("*** Calling EntityKey code *** ","")

               szWriteBuffer = "      // Position on the entity that was selected in the grid."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // We have a "select button" or HotText in a list, so we need to set
               // up the code to set position on the proper list item.
               //szViewName = vDialogTemp.CtrlMapView.Name
               //szEntityName = vDialogTemp.CtrlMapLOD_Entity.Name
               szWriteBuffer = "      String strEntityKey = (String) request.getParameter( ^zTableRowSelect^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //If this action is for the download button or for the upload button, we may have already created
               //a view for this view name.  Don't create the view unless it's for a different view name.
               IF  ( szViewName != szDownloadViewName AND szViewName != szUploadViewName )
                  szWriteBuffer = "      View " + szViewName + ";"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      " + szViewName + " = " + "task.getViewByName( ^" + szViewName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      if ( VmlOperation.isValid( " + szViewName + " ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "         task.log( ).info( ^Got " + szViewName + " View Key: ^ + strEntityKey );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               szWriteBuffer = "         lEKey = java.lang.Long.parseLong( strEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         csrRC = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setByEntityKey( lEKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         if ( !csrRC.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            boolean bFound = false;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // Because this link might be inside a grid that is inside a repeating group, we need to loop through
               // all the entities that the repeating group loops through to see if the entity key exists. Not just
               // the current entity we are on.
               IF szRepeatingGroupFlag = "Y"
                  szWriteBuffer = "            CursorResult csrRCRptGrp = null;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            csrRCRptGrp = " + szViewName + ".cursor( ^" + szEntityNameR + "^ ).setFirst( );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            while ( csrRCRptGrp.isSet() && !bFound )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END 
               IF nGridParent = 1 //AND szScopingName != ""
               

                  // If we are using SCOPE_OI on the grid, then we want to use setFirstWithinOi.
                  lSubtypeX = vDialog.Control.ExtendedStyle
                  lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
                  IF szGridScopeOI = "Y"
               
                     IF szScopingName = ""  
                        szWriteBuffer = szBuffer + "            csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setFirst( );"
                     ELSE
                        szWriteBuffer = szBuffer + "            csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setFirst(^" + szScopingName + "^ );"
                     END
                  ELSE
                        szWriteBuffer = szBuffer + "            csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setFirstWithinOi( );"
                  END
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szBuffer + "            while ( csrRCk.isSet() && !bFound )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szBuffer + "            {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = szBuffer + "               lEKey = " + szViewName + ".cursor( ^" + szEntityName + "^ ).getEntityKey( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "               strKey = Long.toString( lEKey );"
               //szWriteBuffer = szBuffer + "               csrRC = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setByEntityKey( lEKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = szBuffer + "               if ( csrRC.isSet() )"
               szWriteBuffer = szBuffer + "               if ( StringUtils.equals( strKey, strEntityKey ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "                  // Stop while loop because we have positioned on the correct entity."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "                  bFound = true;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szBuffer + "               }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF nGridParent = 1 //AND szScopingName != ""
                  szWriteBuffer = szBuffer + "               else"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szBuffer + "                  csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setNextContinue( );"
                  //szWriteBuffer = "                  csrRCk = " + szViewName + ".cursor( ^" + szScopingName + "^ ).setNextContinue( );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szBuffer + "            } // Grid"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               IF szRepeatingGroupFlag = "Y"
                  szWriteBuffer = "               if ( !bFound )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "                  csrRCRptGrp = " + szViewName + ".cursor( ^" + szEntityNameR + "^ ).setNextContinue( );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            } // Repeating group"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "      else"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         task.log( ).info( ^Did not get " + szViewName + " View Key: ^ + strEntityKey );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END  // IF nGridParent = 1
      END  // IF SetEntityCursor ...

      DropView( vDialogTemp )

   END  // FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

   // Operation Option
   IF vDialog.ActOper EXISTS //AND lActionType != zWAB_StartJasperPDF_Page

      szWriteBuffer = "      // Action Operation"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //FOR EACH Dialog.ActCtrl.Tag code from about was here.

      szWriteBuffer = "      nRC = 0;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log( ).info( ^CallDialogOperation: " + vDialog.Dialog.Tag + "." + vDialog.ActOper.Name + "  ^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      // In order to call a dialog operation we need to create an instance of the dialog class.  We only want to do this once.
      szDlgTag = vDialog.Dialog.Tag
      // KJS 10/08/15 - Because this could be in a different source file... I will try referencing the source file name.
      szDlgTag = vDialog.SourceFileForOper.Name 
   // szWndTag = vDialog.Window.Tag
      szOperName = vDialog.ActOper.Name
      IF szDialogClassCreated = "N"

         IF szDlgTagRoot != vDialog.Dialog.Tag
            szWriteBuffer = "      " +  szDlgTag + "_Dialog " + szDlgTag + " = new " +  szDlgTag + "_Dialog( vKZXMLPGO );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         // szDialogClassCreated = "Y"
         END
      END

      IF szJavaScript != "" AND szJavaScriptLocation = "Pre-Operation"
         szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

   // szWriteBuffer = "      task.log().info( ^ZeidonOperation: " + szDlgTag + "." + szOperName + " called from " + szFormName + ".jsp^ );"  // keep us informed of where we are ...  dks 2011.11.11
      szWriteBuffer = "      VmlOperation.SetZeidonSessionAttribute( null, task, ^" + szFormName + "^, ^" + szDlgTag + "." + szOperName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // KJS 08/06/14 - I had put a try/catch around the operation call because it seemed better than getting the exception
      // crash. But that might be true in production but when developing, we'd really like to see the stack trace. Want to make
      // this an ini setting but for now I think I am just going to make the operation call and skip the try/catch.
      IF szProductionMode = "Y"
         szWriteBuffer = "      try"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vDialog.SourceFileForOper.LanguageType = "S"
            szWriteBuffer = "         nOptRC = " + szDlgTag + "." + szOperName + "( new com.quinsoft.zeidon.scala.View( vKZXMLPGO ) );"
         ELSE 
            szWriteBuffer = "         nOptRC = " + szDlgTag + "." + szOperName + "( new zVIEW( vKZXMLPGO ) );"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      catch (Exception e)"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         // Set the error return code."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         nOptRC = 2;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strVMLError = ^<br><br>*** Error running Operation " + szOperName + ": ^ + e.getMessage();"     
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         task.log().info( strVMLError );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      ELSE
         IF vDialog.SourceFileForOper.LanguageType = "S"
            szWriteBuffer = "      nOptRC = " + szDlgTag + "." + szOperName + "( new com.quinsoft.zeidon.scala.View( vKZXMLPGO ) );"
         ELSE 
            szWriteBuffer = "      nOptRC = " + szDlgTag + "." + szOperName + "( new zVIEW( vKZXMLPGO ) );"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END
      
      //szWriteBuffer = "      nOptRC = " + szDlgTag + "." + szOperName + "( new zVIEW( vKZXMLPGO ) );"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Handle any Next Window processing from Operation.
      szWriteBuffer = "      if ( nOptRC == 2 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         session.setAttribute( ^ZeidonError^, ^Y^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"

      IF szWebRedirection = "Y"

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nOptRC == 1 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         // Dynamic Next Window"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strNextJSP_Name = " + szDlgTagRoot + ".GetWebRedirection( vKZXMLPGO );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF szJavaScript != "" AND szJavaScriptLocation = "Post Operation"
            szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         IF szWAB != ""

            szWriteBuffer = "      if ( strNextJSP_Name.equals( ^^ ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Next Window"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // In order to call a dialog operation we need to create an instance of the dialog class.  We
            // only want to do this once.
         // IF szDialogClassCreated = "N"
         //
         //    szWriteBuffer = "      " +  szDlgTagRoot + "_Dialog " + vDialog.Dialog.Tag + " = new " +
         //                    szDlgTagRoot + "_Dialog( vKZXMLPGO );"
         //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //
         //    szDialogClassCreated = "Y"
         // END

            szWriteBuffer = "         strNextJSP_Name = " + szDlgTagRoot + ".SetWebRedirection( vKZXMLPGO, " + szDlgTagRoot + "." + szWAB + ", ^"
            szWriteBuffer = szWriteBuffer + vDialog.Action.DialogName + "^, ^" + vDialog.Action.WindowName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      strURL = response.encodeRedirectURL( strNextJSP_Name );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         task.TraceLine( ^Next Window Redirect to: ^, strURL );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

         ELSE

            szWriteBuffer = "      // Next Window unknown"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

      ELSE  // not using WebDirection

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF szJavaScript != "" AND szJavaScriptLocation = "Post Operation"
            szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         IF lActionType = zWAB_StartBrowserPDF_Page
            // If we are copying to pdf, then we need to have a wait routine, otherwise, the jsp tries to open
            // the pdf file before it's actually created.
            szWriteBuffer = "      try{ "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         Thread.sleep(5000);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }catch(InterruptedException ie){ "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         out.println( ^error^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         // I know that if we are starting a pdf or html window then we do not need to do this.
         // There are probably more like Popup windows...
         IF  lActionType != zWAB_StartBrowserHTML_Page AND lActionType != zWAB_StartBrowserPDF_Page AND
             lActionType != zWAB_StartJasperPDF_Page

            // Handle any Next Window processing from Operation.
            szWriteBuffer = "      // Dynamic Next Window"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = vKZXMLPGO.cursor( ^NextDialogWindow^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strDialogName = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getAttribute( ^DialogName^ ).getString( ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strWindowName = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getAttribute( ^WindowName^ ).getString( ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strNextJSP_Name = strDialogName + strWindowName + ^.jsp^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         vKZXMLPGO.cursor( ^NextDialogWindow^ ).deleteEntity( CursorPosition.NEXT );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strURL = response.encodeRedirectURL( strNextJSP_Name );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         task.log( ).info( ^Next Window Redirect to: ^ + strURL );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            // Handle creation of return page for Function Call StartSubwindow.
            szWriteBuffer = "         nRC = vKZXMLPGO.cursor( ^NextDialogWindow^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strFunctionCall = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getAttribute( ^FunctionCall^ ).getString( ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strFunctionCall = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         if ( strFunctionCall != null && StringUtils.equals( strFunctionCall, ^StartSubwindow^ ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            vKZXMLPGO.cursor( ^PagePath^ ).createEntity( CursorPosition.NEXT );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            vKZXMLPGO.cursor( ^PagePath^ ).getAttribute( ^LastPageName^ ).setValue( ^" + szFormName + "^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         break;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         ELSE

            IF szWAB != ""

               szWriteBuffer = "      // Next Window"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // In order to call a dialog operation we need to create an instance of the dialog class.  We
               // only want to do this once.
            // IF szDialogClassCreated = "N"
         //
            //    szWriteBuffer = "      " +  szDlgTagRoot + "_Dialog " + vDialog.Dialog.Tag + " = new " +
            //                    szDlgTagRoot + "_Dialog( vKZXMLPGO );"
            //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //
            //    szDialogClassCreated = "Y"
            // END

               szWriteBuffer = "      strNextJSP_Name = " + szDlgTagRoot + ".SetWebRedirection( vKZXMLPGO, " + szDlgTagRoot + "." + szWAB + ", ^"
               szWriteBuffer = szWriteBuffer + vDialog.Action.DialogName + "^, ^" + vDialog.Action.WindowName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strURL = response.encodeRedirectURL( strNextJSP_Name );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = 1;  // do the redirection"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "         task.TraceLine( ^Next Window Redirect to: ^, strURL );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

            ELSE

               szWriteBuffer = "      // Next Window unknown"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            END

         END   // IF  lActionType != zWAB_StartBrowserHTML_Page

      END

   ELSE
      // No operation code

      IF szJavaScript != "" AND szJavaScriptLocation = "Pre-Operation"
         szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
      
      // Add Object Functions Accept, Cancel, Create Temporal Entity and Create Temporal Subobject Version.
      // Also looking at the auto setNext/Prev
      lAutoNextPrev = vDialog.Action.SB_NextPrev
      lAutoSubAction = vDialog.Action.SB_SubAction 
      IF lAutoSubAction = 1 OR    // Accept
         lAutoSubAction = 2 OR    // Cancel
         lAutoSubAction = 4 OR    // Delete
         lAutoSubAction = 16 OR   // Create
         lAutoSubAction = 32 OR   // Create Temporal Entity
         lAutoSubAction = 64 OR   // Create Subobject Version
         lAutoNextPrev = 128 OR   // Next
         lAutoNextPrev = 256      // Previous
         
         szWriteBuffer = "      // Action Auto Object Function"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = 0;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         
         // Let's put a try/catch around the auto action.
         szWriteBuffer = "      try"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         
         // Get View and Entity names from the Action.
         IF vDialog.ActMapView EXISTS
            szViewName = vDialog.ActMapView.Name 
         END
         IF vDialog.ActMapLOD_Entity EXISTS
            szEntityName = vDialog.ActMapLOD_Entity.Name 
         END

         // See if a scoping entity has been specified, and if so, use it.
         CreateViewFromView( vDialogTemp, vDialog )
         SET CURSOR NEXT vDialogTemp.ActMap
         IF RESULT >= zCURSOR_SET AND vDialogTemp.ActMapLOD_Entity EXISTS
            szScopingName = "^" + vDialogTemp.ActMapLOD_Entity.Name + "^"
         ELSE
            szScopingName = ""
         END
         DropView(vDialogTemp)

         
         // We don't want the getViewByName if it was generated above with the code:
         // IF nGridParent = 1 OR szRepeatingGroupFlag = "Y"
         IF nGridParent = 1 OR szRepeatingGroupFlag = "Y"
         ELSE
            szWriteBuffer = "      View " + szViewName + " = task.getViewByName( ^" + szViewName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         
         szWriteBuffer = "      EntityCursor cursor = " + szViewName + ".cursor( ^" + szEntityName + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         
         // If the user has selected the auto next/prev.
         IF ( lAutoNextPrev = 128 OR lAutoNextPrev = 256 ) AND lAutoSubAction = 0
            szWriteBuffer = "      if ( cursor.isNull() )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF lAutoNextPrev = 128
               szWriteBuffer = "         cursor.setNext( " + szScopingName + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE 
               szWriteBuffer = "         cursor.setPrev( " + szScopingName + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         
         // Add Accept or Cancel statement or delete.
         IF lAutoSubAction = 1 OR lAutoSubAction = 2 OR lAutoSubAction = 4
            szWriteBuffer = "      if ( cursor.isNull() )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            IF lAutoSubAction = 1 OR lAutoSubAction = 2 
               szWriteBuffer = "         if ( cursor.isVersioned( ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  
               IF lAutoSubAction = 1
                  // Accept
                  szWriteBuffer = "            cursor.acceptSubobject( );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               ELSE
               IF lAutoSubAction = 2             
                  // Cancel
                  szWriteBuffer = "            cursor.cancelSubobject( );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               END
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
            IF lAutoSubAction = 4 
               // Delete
               szWriteBuffer = "         cursor.deleteEntity( CursorPosition.NEXT );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            END
            
            szWriteBuffer = "         nRC = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         ELSE
            IF lAutoSubAction = 16
               // Create Entity
               szWriteBuffer = "      cursor.createEntity( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            ELSE 
            IF lAutoSubAction = 32
               // Create Temporal Entity
               szWriteBuffer = "      cursor.createTemporalEntity( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            ELSE
            IF lAutoSubAction = 64
               // Create Subobject Version
               szWriteBuffer = "      cursor.createTemporalSubobjectVersion( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
            END
            END
         END
         szWriteBuffer = "      }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      catch ( Exception e )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         nRC = 2;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         VmlOperation.CreateMessage( task, ^" + vDialog.Action.Tag + "^, e.getMessage( ), ^^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //szWriteBuffer = "   }  // end of auto action"
         //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      END

      IF szWAB != ""
         IF szWebRedirection = "Y"

            szWriteBuffer = "      // Next Window"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // In order to call a dialog operation we need to create an instance of the dialog class.  We
            // only want to do this once.
         // IF szDialogClassCreated = "N"
       //
         //    szWriteBuffer = "      " +  szDlgTagRoot + "_Dialog " + vDialog.Dialog.Tag + " = new " +
         //                    szDlgTagRoot + "_Dialog( vKZXMLPGO );"
         //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
       //
         //    szDialogClassCreated = "Y"
         // END

            szWriteBuffer = "      strNextJSP_Name = " + szDlgTagRoot + ".SetWebRedirection( vKZXMLPGO, " + szDlgTagRoot + "." + szWAB + ", ^"
            szWriteBuffer = szWriteBuffer + vDialog.Action.DialogName + "^, ^" + vDialog.Action.WindowName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      strURL = response.encodeRedirectURL( strNextJSP_Name );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         task.TraceLine( ^Next Window Redirect to: ^, strURL );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

         END
      ELSE
         szWriteBuffer = "      // Next Window unknown"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

      IF szJavaScript != "" AND szJavaScriptLocation = "Post Operation"
         szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

   END    // IF vDialog.ActOper EXISTS ... End of calling an operation

   IF szWebRedirection = "Y"

      IF lActionType = zWAB_StartBrowserHTML_Page
            // KJS 02/09/12 - In JOE task.setName is failing, not sure what this code is
            // even doing so I am commenting this out for now...
            szWriteBuffer = "      task.setName( strURL );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
            // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
            // That resubmitted the current page and I assume this was done thinking this was how
            // the report page would be called but since the report popup is determined in AfterPageLoaded, we
            // don't need to resubmit the page.  Just keep building this current page.
            szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END
   
      IF lActionType = zWAB_StartBrowserPDF_Page
            // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
            // That resubmitted the current page and I assume this was done thinking this was how
            // the report page would be called but since the report popup is determined in AfterPageLoaded, we
            // don't need to resubmit the page.  Just keep building this current page.
            szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

   ELSE

   // Next Window Option
      IF lActionType = zWAB_StartModelessSubwindow          OR
         lActionType = zWAB_StartModalSubwindow             OR
         lActionType = zWAB_ReplaceWindowWithModelessWindow OR
         lActionType = zWAB_ReplaceWindowWithModalWindow    OR
         lActionType = zWAB_StartTopWindow                  OR
         lActionType = zWAB_ResetTopWindow                  OR
         lActionType = zWAB_StartBrowserHTML_Page           OR
         lActionType = 35                                   OR  //reCAPTCHA StartModalSubwindow
         lActionType = 55  //reCAPTCHA ReplaceModalWindow
      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         InsertBlankFlag = "N"
      END

      szWriteBuffer = "      // Next Window"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF lActionType = zWAB_StartBrowserHTML_Page
         // KJS 02/09/12 - In JOE task.setName is failing, not sure what this code is
         // even doing so I am commenting this out for now...
         szWriteBuffer = "      task.setName( strURL );"
         //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strURL = response.encodeRedirectURL( strURL );"
      ELSE
         szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" +
                         vDialog.Action.DialogName + vDialog.Action.WindowName + ".jsp^ );"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log( ).info( ^Next Window Redirect to: ^ + strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

         IF lActionType = zWAB_StartModelessSubwindow OR
            lActionType = zWAB_StartModalSubwindow    OR
            lActionType = 35 //reCAPTCHA StartModalSubwindow
         // Next Window is subwindow. Set up current window for return.
         szWriteBuffer = "      vKZXMLPGO.cursor( ^PagePath^ ).createEntity( CursorPosition.NEXT );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      vKZXMLPGO.cursor( ^PagePath^ ).getAttribute( ^LastPageName^ ).setValue( ^" +
                         szFormName + "^, ^^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      IF lActionType = zWAB_StartBrowserHTML_Page
         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      ELSE
         szWriteBuffer = "      nRC = 1;  // do the redirection"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   END  //End of Next Window Option

   // This Action is Startup Web Popup WITH mapping, so set zOpenPopupWindow to the next page jsp.
   IF ( lActionType = zWAB_StartModalWebPopup OR lActionType = zWAB_StartModelessWebPopup ) // KJS 07/11/12 AND vDialog.Action.NoMap = ""
      //This gets the value for the popup window so that in AfterPageLoaded, we can get this
      //value and pop up the window.
      szWriteBuffer = "      strOpenPopupWindow = request.getParameter( ^zOpenPopupWindow^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZX = request.getParameter( ^zPopupWindowSZX^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZY = request.getParameter( ^zPopupWindowSZY^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 0;  // No redirection, we want to open the popup"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Same Window Refresh option
   IF lActionType = zWAB_StayOnWindowWithRefresh
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Return From Window Option
      IF lActionType = zWAB_ReturnToParent OR
         lActionType = zWAB_ReturnToParentWithRefresh

      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "      // Return to Last Window"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = vKZXMLPGO.cursor( ^PagePath^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = vKZXMLPGO.cursor( ^PagePath^ ).getAttribute( ^LastPageName^ ).getString( ^^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vKZXMLPGO.cursor( ^PagePath^ ).deleteEntity( CursorPosition.PREV );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = strLastPage + ^.jsp^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = ^" + szFormName + ".jsp^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "      strURL = response.encodeRedirectURL( strLastPage );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log( ).info( ^Return Redirect to: ^ + strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END
   // szWriteBuffer = "      return;"
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END
   END

   // Download File option.
   IF lActionType = zWAB_ProcessDownloadFile

      // Note that we need vDialogCtrl to be positioned on Control that triggers the Action to get the attribute mapping from that Control.
      // This was evaluated earlier.

      IF vDialogCtrl > 0
         IF vDialogCtrl.CtrlMapER_Attribute EXISTS

            szWriteBuffer = "  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      // Download File Processing"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            /*
            szWriteBuffer = "      sBrowser = request.getHeader( ^User-Agent^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isFirefox = ( sBrowser != null && sBrowser.indexOf( ^Firefox/^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isMSIE = ( sBrowser != null && sBrowser.indexOf( ^MSIE^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isOpera = ( sBrowser != null && sBrowser.indexOf( ^Opera^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            */

            szWriteBuffer = "      " + vDialogCtrl.CtrlMapView.Name + " = " + "task.getViewByName( ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialogCtrl.CtrlMapView.Name + " ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialogCtrl.CtrlMapView.Name + ".cursor( ^" +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialogCtrl.CtrlMapER_Domain.MaxStringLth > 254
               lMaxStringLength = vDialogCtrl.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "254"
            END

            szWriteBuffer = "            sDownloadFile = " + vDialogCtrl.CtrlMapView.Name + ".cursor( ^" + vDialogCtrl.CtrlMapRelatedEntity.Name +
                            "^ ).getAttribute( ^" + vDialogCtrl.CtrlMapER_Attribute.Name + "^ ).getString( ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            task.log( ).info( ^Download File Name: ^ + sDownloadFile );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".log( ).info( ^Entity does not exist: ^, ^" +
                                                vDialogCtrl.CtrlMapView.Name + "." +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + vDialogCtrl.CtrlMapView.Name + ".log( ).info( ^Invalid View: ^ ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         // Replace any quotes."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         sDownloadFile = sDownloadFile.replaceAll( ^\^^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         l = sDownloadFile.lastIndexOf( ^.^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         x = sDownloadFile.lastIndexOf( ^\\^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         // If x > l then the filename has no extension and"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // there must be a period in the directory name."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Right now we are not using sExtension but just"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in case we want to change the encType I want"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // to capture this."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if (x > l)"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = sDownloadFile.substring( l+1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Get the filename only without directories."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         sSourceFileNameOnly = sDownloadFile.substring( x + 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         File InputFile = new File( sDownloadFile );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         FileInputStream fis = new FileInputStream( InputFile );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         try"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            task.log( ).info( ^Download File: ^ + ^Setting outputStream and attaching file^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "            String contenttype = ^application/octet-stream^;  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setContentType(contenttype);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setHeader( ^Content-Disposition^, ^attachment; filename=^ + sSourceFileNameOnly + ^;^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            ServletOutputStream outStream = response.getOutputStream( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            int c = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ( (c=fis.read( )) != -1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               outStream.write( c );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.flush( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.close( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         catch (Exception e) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( InputFile != null && InputFile.exists( ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               //TraceLine"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               task.log( ).info( ^Error downloading file: ^ + sDownloadFile );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         fis.close( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // The end of the Action is the same as "Same Window Refresh" above.
            szWriteBuffer = "         // Stay on Window with Refresh"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         // szWriteBuffer = "      } "
         // WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END
   END // Download File option.

   // KJS 09/17/14 - Run a jasper report and open in PDF.
   IF lActionType = zWAB_StartJasperPDF_Page
      szWriteBuffer = "         try"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // KJS 09/16/14 - Right now running jasper reports is a new thing and I'm not positive we will use it for much more than
      // the 1098T report. We need an operation that returns a jasperPrint object, which at the moment we can only do in java (
      // (otherwise we would need to have a data type JasperPrint in VML), so I am going to assume that we will look for an
      // operation in ZGLOBAL1 and that the operation we are looking for has the same name as the Action name.
      szWriteBuffer = "            // At the moment, in order to call a jasper report, there needs to be an operation in"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            // ZGLOBAL1 with the same name as this action name. And it must return a JasperPrint object."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            // So the filling of the jasper report must be done there (JasperFillManager.fillReport()."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            ZGLOBAL1_Operation m_ZGLOBAL1_Operation = new ZGLOBAL1_Operation( vKZXMLPGO );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            net.sf.jasperreports.engine.JasperPrint jasperPrint = m_ZGLOBAL1_Operation." + vDialog.Action.Tag +
                      "( new zVIEW( vKZXMLPGO ));"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            byte[] file = null;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            if (jasperPrint != null) "
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               file = net.sf.jasperreports.engine.JasperExportManager.exportReportToPdf(jasperPrint);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.setContentType(^application/pdf^);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.setContentLength(file.length);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.setHeader(^Content-disposition^, ^attachment; filename=\^Report.pdf\^^);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
              
      szWriteBuffer = "               response.getOutputStream().write(file);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.getOutputStream().flush();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               response.getOutputStream().close();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         catch (Exception e)"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            e.printStackTrace();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            // Set the error return code."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            nOptRC = 2;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strVMLError = ^<br><br>*** Error running Operation " + vDialog.Action.Tag + ": ^ + e.getMessage();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log().info( strVMLError );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   END

   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   IF vDialogCtrl > 0
      DropView( vDialogCtrl )
   END

END
/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCtrlsRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCtrlsRecurs( VIEW vDialog      BASED ON LOD TZWDLGSO,
                         VIEW vGroupParent BASED ON LOD TZWDLGSO,
                         VIEW vDialogRoot  BASED ON LOD TZWDLGSO,
                         INTEGER           lFile,
                         STRING ( 10000 )  szWriteBuffer,
                         STRING ( 100 )    szIndent,
                         INTEGER           lTableRowCnt,
                         STRING ( 1 )      szNoPositioning,
                         INTEGER           lOffsetX,
                         INTEGER           lOffsetY,
                         STRING ( 100 )    szRepeatGrpKey )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vList    BASED ON LOD TZWDLGSO  // identifies attribute mapping for list entries
   VIEW vEntity  BASED ON LOD TZWDLGSO  // identifies entity mapping for list entries
   VIEW vScope   BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   VIEW vLPLR    BASED ON LOD TZCMLPLO
   STRING ( 32 )  szLPLR_Name
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 64 )  szViewName
   STRING ( 32 )  szMapEntityName
   STRING ( 32 )  szMapAttributeName
   STRING ( 32 )  szActionName
   STRING ( 256 ) szAction
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szCtrlCtrlTag
   STRING ( 50 )  szControlType
   STRING ( 50 )  szCtrlCtrlType
   STRING ( 32 )  szListCtrlTag
   STRING ( 100 ) szIndentGroup
   STRING ( 100 ) szIndentHold
   STRING ( 100 ) szNoPositioningHold
   STRING ( 100 ) szPosition
   STRING ( 10 )  szColCount
   STRING ( 100 ) szSort
   STRING ( 256 ) szAbsoluteStyle
   STRING ( 20 )  szAbsoluteWidth
   STRING ( 256 ) szRelStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 50 )  ListBoxDoubleClickAction
   STRING ( 16 )  szTabIndex
   STRING ( 32 )  szSize
   STRING ( 16 )  szWidth
   STRING ( 16 )  szHeight
   STRING ( 1 )   szBorder
   STRING ( 32 )  szRadioGroupName
   STRING ( 256 ) szWidget
   STRING ( 256 ) szText
   STRING ( 64 )  szTerm
   STRING ( 20 )  szJustify
   STRING ( 50 )  szWebCtrlType
   STRING ( 35 )  szControlTag
   STRING ( 85 )  szHTMLCtrlID
   STRING ( 50 )  szGridView
   STRING ( 50 )  szGridOrigViewName
   STRING ( 2 )   szSuffix
   STRING ( 10 )  szMaxStringLength
   STRING ( 200 ) szItemTableHeader
   STRING ( 50 )  szParentWebType
   STRING ( 1 )   szRepeatingGroupFlag
   STRING ( 1 )   szSurveyGroupFlag
   STRING ( 1 )   szGridGroupingFlag
   STRING ( 1 )   szIncludeFileFlag
   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   STRING ( 1 )   szContainer
   STRING ( 1 )   szSpanFlag
   STRING ( 1 )   szDivFlag
   STRING ( 1 )   szToggleFlag
   STRING ( 1 )   sziFrameFlag
   STRING ( 1 )   szDashboardFlag
   STRING ( 1 )   szScrollableFlag
   STRING ( 1 )   szScrollingTable
   STRING ( 1 )   szFilterTable
   STRING ( 1 )   szFileTransferFlag
   STRING ( 1 )   szGroupIsTable
   STRING ( 1 )   szreCAPTCHAFlag
   STRING ( 1 )   szTinyMCEFlag
   STRING ( 1 )   szWCP_Edit
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szWCP_Multiline
   STRING ( 1 )   szWCP_EmailAddress
   STRING ( 1 )   szWCP_Hyperlink
   STRING ( 1 )   szWCP_AbsoluteWidth
   STRING ( 1 )   szWCP_FirstOccurrenceOnly
   STRING ( 1 )   szFirstTimeThrough
   STRING ( 1 )   szGridInGroup
   STRING ( 10 )  szDisabled
   STRING ( 1 )   szTableExport
   STRING ( 100 ) szStyle
   STRING ( 100 ) szRepeatingGroupKey
   DECIMAL        dDLUnits
   INTEGER        LastY_Pos
   INTEGER        LastY_Height
   INTEGER        LastY_PosGroup
   INTEGER        LastX_Pos
   INTEGER        LastX_Width
   INTEGER        MaxY_HeightForLine
   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   INTEGER        nbsp_count
   INTEGER        Size
   INTEGER        lHeight
   INTEGER        lWidth
   INTEGER        lWidthPercent
   INTEGER        lSubtype
   INTEGER        lSubtypeX
   INTEGER        lSort
   INTEGER        lHeader
   INTEGER        lColCnt
   INTEGER        lCol
   INTEGER        lPushBtn
   INTEGER        lEditBox
   INTEGER        lStyleX
   INTEGER        lTemp
   INTEGER        lMaxStringLength
   SHORT          bResetToPlaceHolder
   SHORT          nRC

   PIX_PER_DU( vDialog, dDLUnits )

   // Generate the code for creating HTML statements for controls.
   // A major issue is determining which Controls are on the same row, as they need table entries
   // around them. Note that Groups must be handled differently from other Controls.

   // Make sure the Controls are ordered by row and column.

   szIndentHold = szIndent

   // These variables are for if we are not using absolute positioning.
   LastY_Pos      = 0
   LastY_Height   = 0
   LastY_PosGroup = 0
   LastX_Pos      = 0
   LastX_Width    = 0
   MaxY_HeightForLine = 0
   szFirstTimeThrough = "Y"

   // Process each Control
   FOR EACH vDialog.Control

      //zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits + X_BASE )
      //zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits + Y_BASE )

      // If szNoPositioning = "Y" then we are not using absolute positioning.  We need to
      // create some divs or spans to make this look similar to what's in the painter.
      IF  szNoPositioning = "Y"

         // Need to reset the x positions
         IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND szFirstTimeThrough != "Y"
         //IF  ( LastY_Pos < vDialog.Control.PSDLG_Y ) AND LastY_Pos != 0
            szWriteBuffer = "</div>  <!-- End of a new line -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            LastX_Pos       = 0
            LastX_Width     = 0

            // If we are using relative positioning, then we have automatically put
            // float:left on any groupboxes.  Because of this, I think if we are onto
            // a new row, then we should put a "clear" div in.
            szWriteBuffer = "<div style=^clear:both;^></div>  <!-- Moving to a new line, so do a clear -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

         // We may have controls on the same line with varying heights.  When determining if there is
         // blank space in between these lines, make sure we are comparing the highest control.
         Y_Pos = LastY_Pos + LastY_Height
         IF  Y_Pos > MaxY_HeightForLine
            MaxY_HeightForLine = Y_Pos
         END

         // Determine if there is blank space in between the y coordinates of the last
         // control and the current control.  If so, then we need to put in a div as a spacer control.
         IF  Y_Pos < vDialog.Control.PSDLG_Y

               //TraceLineS("****  SPACE BETWEEN Ys *** ", vDialog.Control.Tag )
               //Y_Size = ( vDialog.Control.PSDLG_Y - ( LastY_Pos + LastY_Height ) ) * dDLUnits + lOffsetY
               Y_Size = ( vDialog.Control.PSDLG_Y - ( MaxY_HeightForLine ) ) * dDLUnits + lOffsetY
               X_Size = 100
               zIntegerToString( szHeight, 16, Y_Size )
               zIntegerToString( szWidth, 16, X_Size )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = " <!-- This is added as a line spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;^></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         // There should be a <div> surrounding each line.
         IF ( LastY_Pos < vDialog.Control.PSDLG_Y ) OR szFirstTimeThrough = "Y"

               LastY_Pos    = vDialog.Control.PSDLG_Y

               // KJS 08/01/08 - Seems as though I need to give this div a width, otherwise,
               // it many times places things on different lines.
               //KELLY8
               CreateViewFromView( vDialog2, vDialog )

               X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
               SET CURSOR  NEXT vDialog2.Control
               // Loop through all the controls that are at the same y pos and see how wide they
               // are.
               LOOP  WHILE RESULT >= zCURSOR_SET AND LastY_Pos = vDialog2.Control.PSDLG_Y

                  //X_Size = X_Size + vDialog2.Control.SZDLG_X
                  X_Size = vDialog2.Control.PSDLG_X + vDialog2.Control.SZDLG_X
                  SET CURSOR  NEXT vDialog2.Control

               END

               DropView(vDialog2)

               X_Size = X_Size * dDLUnits + lOffsetY
               // KJS 09/03/08 - does this help??
               X_Size = X_Size + 1
               zIntegerToString( szWidth, 16, X_Size )

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<div style=^width:" + szWidth + "px;^>  <!-- Beginning of a new line -->"
               szWriteBuffer = "<div>  <!-- Beginning of a new line -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         X_Pos = LastX_Pos + LastX_Width
         // If there is blank space to the left of a control put in a spacer control.
         IF X_Pos < vDialog.Control.PSDLG_X

            //TraceLineS("****  SPACE BETWEEN Xs *** ", vDialog.Control.Tag )
            X_Size = ( vDialog.Control.PSDLG_X  - ( LastX_Pos + LastX_Width ) ) * dDLUnits + lOffsetX
            Y_Size = vDialog.Control.SZDLG_Y * dDLUnits + lOffsetY
            zIntegerToString( szHeight, 16, Y_Size )
            zIntegerToString( szWidth, 16, X_Size )

            // KJS 11/19/08 - Currently we are placing a span with spacers in between controls that have space between them.
            // If there is a div control (or grid or tab) in a row and there is space before it, then we should really
            // put a floating div there instead of a span.  10/07/09 - Added RadioGrp as well.
            IF vDialog.ControlDef.Tag = "GroupBox" OR vDialog.ControlDef.Tag = "Grid" OR
               vDialog.ControlDef.Tag = "Tab" OR vDialog.ControlDef.Tag = "RadioGrp"
               //szWriteBuffer = "<div style=^height:" + szHeight + "px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               // Taking out the height for this spacer since in IE this causes some issue.
               szWriteBuffer = "<div style=^height:1px;width:" + szWidth + "px;float:left;^></div>   <!-- Width Spacer -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               nbsp_count = X_Size / 5
               //TraceLineI("**** nbsp_count ", nbsp_count )

               IF  nbsp_count > 0
                  szWriteBuffer = "<span style=^height:" + szHeight + "px;^>"
                  LOOP WHILE nbsp_count > 0
                      nbsp_count = nbsp_count - 1
                      szWriteBuffer = szWriteBuffer + "&nbsp"
                  END
                  szWriteBuffer = szWriteBuffer + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
            END

         END

         LastY_Pos    = vDialog.Control.PSDLG_Y
         LastY_Height = vDialog.Control.SZDLG_Y
         LastX_Pos    = vDialog.Control.PSDLG_X
         LastX_Width  = vDialog.Control.SZDLG_X
      END

      szFirstTimeThrough = ""
      szControlType = vDialog.ControlDef.Tag
      szWebCtrlType = vDialog.Control.WebCtrlType
      szIndent = szIndentHold + "   "
      szCtrlTag = vDialog.Control.Tag

      lSubtype = vDialog.Control.Subtype
      nRC = IsFlagSequenceSet( lSubtype, 134217728 )  // zCONTROL_INVISIBLE  0x08000000L
      IF nRC != 0     // Invisible was set
         szControlType = ""  // prevent generation
      ELSE
         // Initialize the szAbsoluteStyle variable with X and Y values.
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )

      // szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"     causes extra comment id line
      // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "

      IF szControlType = "GroupBox"

         // Do I need to check if this is a groupbox and we are not using absolute positioning, then I want to
         // check if there are other groupboxes at this same PSDLG_Y.  If so, then these groups would need to
         // have a float:left applied to them.
         // Would I only want to do this once for the row?
         // Or, do I want to put a float on every div created and then create a <div style="clear:both;"</div> after
         // every row?
         //IF  szNoPositioning = "Y" AND szCheckedRowForGroups         //END

         // InitializeRepeatingGroup for GroupBox

         // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
         // as a table and try and position what is in this group box as a table.
         szGroupIsTable = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
         IF RESULT >= zCURSOR_SET
            szGroupIsTable = "Y"
         END

         // There are times when the user wants to paint a div that has no height so it will grow with the
         // data within it.  This flags the div will have no height.
         szNoHeightFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
         IF RESULT >= zCURSOR_SET
            szNoHeightFlag = "Y"
         END

         // There are times when the user wants to paint a div that has no width so it will grow with the
         // data within it.  This flags the div will have no width.
         szNoWidthFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
         IF RESULT >= zCURSOR_SET
            szNoWidthFlag = "Y"
         END

         // KJS 05/01/09
         // When the user paints a grid, they may not want this grid (and any leading header text) to show
         // during run-time if there is no data for the grid.  If the user puts this grid and any other
         // controls in a groupbox with the control property of "Table Grouping", we will not display anything
         // within this groupbox if the grid has no data during run-time.
         szGridGroupingFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Grid Grouping"
         IF RESULT >= zCURSOR_SET
            szGridGroupingFlag = "Y"
            // This div should not have any height or width.
            szNoHeightFlag = "Y"
            szNoWidthFlag = "Y"
         END

         // Set flag for RepeatingGroup either from old szWebCtrlType or new WebControlProperty.
         // Repeating Group is used for the situation where a Group of controls is to be repeated for each controlling
         // entity, very much as is done in Reports. An example in Zencas is the page of student pictures and basic
         // information for either a class or an advisor.
         szRepeatingGroupFlag = ""
         IF szWebCtrlType = "RepeatingGroup"
            szRepeatingGroupFlag = "Y"
         ELSE
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Repeating Group"
            IF RESULT >= zCURSOR_SET
               szRepeatingGroupFlag = "Y"
            END
         END

         // Set flag for Survey Group, which is a repeating group for survey questions.
         szSurveyGroupFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Survey Group"
         IF RESULT >= zCURSOR_SET
            szSurveyGroupFlag = "Y"
         END

         // Set flag for FileTransfer, as all GroupBox and subcontrol processing is skipped for that case.
         szFileTransferFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "File Transfer to Server"
         IF RESULT >= zCURSOR_SET
            szFileTransferFlag = "Y"
         END

         szIncludeFileFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Include File"
         IF RESULT >= zCURSOR_SET
            szIncludeFileFlag = "Y"
         END

         // Wondering if somehow this should be different in the sense that a group box can only be
         // either div, include file, iframe, table etc. whereas the "No Height" etc. can go with
         // div but only div, "Include File" etc.  How would a user know?
         sziFrameFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "iFrame"
         IF RESULT >= zCURSOR_SET
            sziFrameFlag = "Y"
         END

         szDashboardFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Dashboard"
         IF RESULT >= zCURSOR_SET
            szDashboardFlag = "Y"
         END

         szreCAPTCHAFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "reCAPTCHA"
         IF RESULT >= zCURSOR_SET
            szreCAPTCHAFlag = "Y"
         END

         szToggleFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Show/Hide Toggle"
         IF RESULT >= zCURSOR_SET
            szToggleFlag = "Y"
         END

         // Set Group flags either from old szWebCtrlType or new WebControlProperty.
         IF szWebCtrlType = "Scrollable"
            szScrollableFlag = "Y"
         ELSE
            szScrollableFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrollable"
            IF RESULT >= zCURSOR_SET
               szScrollableFlag = "Y"
            END
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET
               szDivFlag = "Y"
            END
         END

         szContainer = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Container Absolute Size"
         IF RESULT >= zCURSOR_SET
            szContainer = "A"
         END

         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Container"
         IF RESULT >= zCURSOR_SET
            szContainer = "C"
         END
      END

      // Initialize the szAbsoluteStyle variable with X and Y values.
      IF  szNoPositioning = "Y"
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szAbsoluteStyle = ""
         ELSE
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
            szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
         ELSE
         IF szControlType = "GroupBox" AND szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
            szAbsoluteStyle = "style=^height:" + szHeight + "px;^"
         ELSE
            CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
         END
         END
         END
      ELSE
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
      END

      szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      IF szControlType = "GroupBox" AND szGroupIsTable = "Y"

         X_Size = vDialog.Control.SZDLG_X
         Y_Size = vDialog.Control.SZDLG_Y

         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         CreateViewFromView( vGroupParent, vDialog )

         // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndentGroup = szIndent
         GenJSPJ_CrteGroupTable( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, lTableRowCnt, szNoPositioning, szRepeatGrpKey )
         ResetViewFromSubobject( vDialog )
         DropView( vGroupParent )
         vGroupParent = 0
      END

      // Inside this div there should be a grid control.  Look for the first grid control and check its mapping.
      // During run-time, we will not display anything within this groupbox if the grid has no data.  If there is
      // other items in the group box don't worry about them.  Should we give an error message if this group box
      // has no grid?
      IF szControlType = "GroupBox" AND szGridGroupingFlag = "Y"

         // If we are not using absolute positioning, then make all the divs float left.
         IF  szNoPositioning = "Y"
            zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
         END

         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Div on a Group Control requests that all the controls inside the group line up one under the other.
         szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szViewName = ""
         szMapEntityName = ""

         SetViewToSubobject( vDialog, "CtrlCtrl" )
         FOR EACH vDialog.Control
            IF vDialog.ControlDef.Tag = "Grid" AND szViewName = ""
               // Should I get grid mapping here?
               szViewName = vDialog.CtrlMapView.Name
               szMapEntityName = vDialog.CtrlMapLOD_Entity.Name
            END
         END
         ResetViewFromSubobject( vDialog )

         // If there was a grid with mapping, use these to check the existence of the entity and paint what's in the groupbox
         // if the entity exists.
         IF szViewName != "" AND szMapEntityName != ""

            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + szViewName + " = " + "task.getViewByName( ^" + szViewName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( VmlOperation.isValid( " + szViewName + " ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + szViewName + ".cursor( ^" + szMapEntityName + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Generate everything within this groupbox.
            CreateViewFromView( vGroupParent, vDialog )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0


            szWriteBuffer = "      <%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            // Do I drop the view here?
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      %>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
            // Should I give a message here that there is no grid within this groupbox or
            // should I just ignore it?
         END

         szWriteBuffer = "</div>  <!--  " + vDialog.Control.Tag + " --> "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "" AND szFileTransferFlag = "" AND szGroupIsTable = "" AND szGridGroupingFlag = ""

         // Is this clear even working???!!!
         IF szWebCtrlType = "Clear"
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.PSDLG_X * dDLUnits + lOffsetX  // borrow these for a second
            Y_Size = vDialog.Control.PSDLG_Y * dDLUnits + lOffsetY
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, X_Size, Y_Size, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szContainer != ""

         // MessageSend( vDialog, "", "Found Container GroupBox",      // debugging only
         //              szHTMLCtrlID,
         //              zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )

            szNoPositioningHold = szNoPositioning
            szNoPositioning = ""  // we want absolute positioning on all child controls

            lWidth = vDialog.Control.SZDLG_X
            lHeight = vDialog.Control.SZDLG_Y - 10

            IF szContainer = "A"
               zIntegerToString( szWidth, 10, lWidth * dDLUnits )
               IF szNoHeightFlag = "Y" // We might not want the groupbox to have a height (so it grows)
                  szAbsoluteStyle = "style=^size:absolute; width:" + szWidth + "px;^"
               ELSE
                  zIntegerToString( szHeight, 10, lHeight * dDLUnits )
                  szAbsoluteStyle = "  style=^size:absolute; width:" + szWidth + "px; height:" + szHeight + "px;^"
               END
            ELSE
               szAbsoluteStyle = ""
            END

            IF szClass = ""
               szWriteBuffer = "<fieldset" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<fieldset" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<legend>" + vDialog.Control.Text + "</legend>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )

            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</fieldset>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szNoPositioning = szNoPositioningHold
         ELSE
         IF szSpanFlag = "Y"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<span" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<span" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )

            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
         IF szWebCtrlType = "DivScroll"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div "+ szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE
         IF  szDashboardFlag = "Y"

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

//*******************************  DASHBOARD CODE   ******************************************************

            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardSource = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDashboardMore = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szFunction = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szDisplayFrame = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardMax = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iDashboardCnt = 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxColumns = 3;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iMaxInCol = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iNbrInCol = 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColStartNbr = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColEndNbr = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iRemainder = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iColNbr = 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iSortOrder = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int i = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   vKZXMLPGO = task.getViewByName( ^KZXMLPGO^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   vKZXMLPGO.cursor( ^Session^ ).setAttribute( ^DashboardFrameCount^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //Order by Sort Order "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         //nRC = " + vDialog.CtrlMapView.Name + ".OrderEntityForView( " + vDialog.CtrlMapView.Name + ", ^DashboardFrameUser^, ^PresentationSortOrder A^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // task.log( ).info( ^*** nRC after OrderEntityForView *** ^ + nRC );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         csrRC = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setFirst( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         while ( csrRC.isSet() ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            szDisplayFrame = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getStringFromAttribute( ^ActiveOnCurrentDashboard^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( StringUtils.equals( szDisplayFrame, ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // When we've reached the max number of columns then "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // start at column one again.   "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if (iColNbr > iMaxColumns ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iColNbr = 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // Set what column this frame will be positioned in. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setAttribute( ^wColumnNbr^, iColNbr );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iDashboardMax++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColNbr++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            csrRC =  " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setNextContinue( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         iRemainder = iDashboardMax % iMaxColumns;  // mod function  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( iRemainder == 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iMaxInCol = (iDashboardMax / iMaxColumns) + 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Loop through each frame that is in the first column, then those in the "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // second column etc.        "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         for  ( i=1; i <= iMaxColumns; i++ ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColNbr = i;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // If we are onto a new dashboard column, put the closing tag on the previous column "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( i != 1 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  <div id=^column-<%=iColNbr%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            // These variables are used in the Expand function. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColStartNbr = iDashboardCnt;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            iColEndNbr = (iColStartNbr + iMaxInCol) - 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if (iColEndNbr > iDashboardMax ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iColEndNbr = iDashboardMax;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            csrRC = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setFirst( ^wColumnNbr^, i, );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ( csrRC.isSet() ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               szDisplayFrame = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getStringFromAttribute( ^ActiveOnCurrentDashboard^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               iSortOrder = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).getIntegerFromAttribute( ^PresentationSortOrder^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( iSortOrder <= 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  iSortOrder = iDashboardCnt;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  task.log( ).info( ^*** There is no sort order *** ^ + iSortOrder );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^ ).setAttribute( ^wFrameNbr^, iDashboardCnt );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               // task.log( ).info( ^*** Dashboard Column *** ^ + iColNbr );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( StringUtils.equals( szDisplayFrame, ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardSource = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrame^ ).getStringFromAttribute( ^DashboardDisplayURL^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szDashboardMore = " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrame^ ).getStringFromAttribute( ^ExpandedDisplayURL^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  szFunction = ^Expand(this, ^ + iDashboardCnt + ^, ^ + iColNbr + ^, ^ + iColStartNbr + ^, ^ + iColEndNbr + ^ )^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  // task.log( ).info( ^*** Expand Function *** ^ + szFunction );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     <div id=^rpt-display-<%=iDashboardCnt%>^ class=^region-display^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div class=^region-header^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-title-<%=iDashboardCnt%>^ class=^region-header-title^ >A Report <%=iSortOrder%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-expand-<%=iDashboardCnt%>^ class=^region-header-title-expand^ title=^Expand^ onclick=^<%=szFunction%>^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         <div id=^rpt-display-open-<%=iDashboardCnt%>^ class=^region-header-title-open^ title=^More Detail...^ onclick=^OpenFrame(this,'<%=szDashboardMore%>' );^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                         </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       <div id=^rpt-display-content-<%=iDashboardCnt%>^ class=^region-body-content^ > "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          <iframe src=^<%=szDashboardSource%>^ width=^100%^ height=^100%^> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                          </iframe> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                       </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                     </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "    "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                   iDashboardCnt++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               } // if ( StringUtils.equals( szDisplayFrame, ^Y^ ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               csrRC =  " + vDialog.CtrlMapView.Name + ".cursor( ^DashboardFrameUser^, ^wColumnNbr^, i ).setNextContinue( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } // While "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            //vComboBox2.drop( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }  // For each i "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Now close the last column div. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  </div> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<% "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = " "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      } // if CheckExistenceOfEntity "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

//*****************************************  END OF DASHBOARD   ********************************************************

            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         ELSE  // IF  szDashboardFlag = "Y"

            IF  sziFrameFlag = "Y"

               // If we are not using absolute positioning, then make all the divs
               // float left.
               IF  szNoPositioning = "Y"
                  zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
               END

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Div on a Group Control requests that all the controls inside the group line up one under the other.
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<iframe " + szAbsoluteStyle + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ src=^" + vDialog.Control.WebFileName + "^>  <!-- " + vDialog.Control.Tag + " --> "
               ELSE
                  szWriteBuffer = "<iframe class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "</iframe>  <!-- " + vDialog.Control.Tag + " --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            ELSE
            // Div is the default group for now so we don't have to check IF szDivFlag = "Y" for the moment.
            //IF szDivFlag = "Y"

            // Add Scrollable if requested.
            IF szScrollableFlag = "Y"
               zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            END

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // If this is a div we want to toggle
            IF szToggleFlag = "Y"
               szWriteBuffer = "<div style=^float:left;^>  <!-- Div surrounding toggle --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // KJS 03/01/13 - Jeff was having problems because when there was only href="#", if this is lower down on the page, it
               // jumps to the top of the page. Adding the #CtrlTag, keeps it anchored.
               szWriteBuffer = "<div style=^height:20px;^><a href=^#" + szCtrlTag + "^ onclick=^animatedcollapse.toggle('" + szCtrlTag + "');^ style=^^>" + vDialog.Control.Text + "</a></div>"
               // KJS 03/08/13 - Jeff was having problem because using above code keeps the anchor tag in the url even when you go to a different
               // page. It seems like this works. Keeping the place on the page, but yet not putting the anchor in the url.
               szWriteBuffer = "<div style=^height:20px;^><a href=^#^ onclick=^animatedcollapse.toggle('" + szCtrlTag + "');return false^ style=^^>" + vDialog.Control.Text + "</a></div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- " + vDialog.Control.Tag + " --> "
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Should we put reCAPTCHA code here???  Or should I have done this up above?
            IF szreCAPTCHAFlag = "Y"
               szWriteBuffer = "<script type=^text/javascript^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   src=^https://api-secure.recaptcha.net/challenge?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <iframe src=^https://api-secure.recaptcha.net/noscript?k=" + vDialog.Control.WebreCAPTCHAPublicKey + "^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       height=^300^ width=^500^ frameborder=^0^></iframe><br>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <textarea name=^recaptcha_challenge_field^ rows=^3^ cols=^40^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   </textarea>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   <input type=^hidden^ name=^recaptcha_response_field^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "       value=^manual_challenge^"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</noscript>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            ELSE

            // KJS 09/19/08 - Adding the ability to include a file inside a div.  I am assuming that if there
            // is an include file, there will be nothing else inside the div so we dont' need to call
            // GenJSPJ_CrteCtrlsRecurs.
            IF  szIncludeFileFlag = "Y"

               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%@include file=^" + vDialog.Control.WebFileName + "^ %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            ELSE
               // Only put this in if there was no web type.  We might want to change this later.
               IF  szDivFlag = ""
                  IF vDialog.Control.Text != ""
                     szWriteBuffer = "<div " + szHTMLCtrlID + ">" + vDialog.Control.Text + "</div>"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
               END

               IF szToggleFlag = "Y"
                  szWriteBuffer = "<script type=^text/javascript^>animatedcollapse.addDiv('" + szCtrlTag + "', 'fade=400,hide=1,persist=1');animatedcollapse.init();</script>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
               CreateViewFromView( vGroupParent, vDialog )
               //TraceLineS("*** About to call recurs code from div *** ", vDialog.Control.Tag )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               szIndentGroup = szIndent
               GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                        lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )
               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0
            END
            END

            IF szToggleFlag = "Y"
               szWriteBuffer = "</div> <!-- End Div for surrounding toggle --> "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!--  " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         END
         END
         END
         END
         END  // IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "" AND szFileTransferFlag = "" AND szGroupIsTable = "" AND szGridGroupingFlag = ""

      ELSE  // Not a groupbox
         IF szControlType = "Text"  // TEXT
            GenJSPJ_CrteText( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, szCtrlTag,
                              szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "EditBox"  // EDITBOX
            GenJSPJ_CrteEditBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                 "", szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "Calendar"  // CALENDAR
            GenJSPJ_CrteCalendar( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                  "", szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "RadioGrp" // RADIO BUTTON GROUP
            szRadioGroupName = szCtrlTag
            szWriteBuffer = "<% strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strRadioGroupValue = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
            //I'm going to do this like the way group box is (or was).  If there is text
            //to go on the box then we will create <fieldset.  If there is no text then
            //we will create a div.
            //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
            //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
            //an id and name but think it should.
            IF vDialog.Control.Text = ""
               szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ " + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<fieldset " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSPJ_CrteCtrlsRadio( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                    szRadioGroupName, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            IF vDialog.Control.Text = ""
               szWriteBuffer = "</div>"
            ELSE
               szWriteBuffer = "</fieldset>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         IF szControlType = "CheckBox"  // CHECKBOX
            GenJSPJ_CrteCheckBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                                  "", szJustify, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "PushBtn"  // PUSH BUTTON
            szActionName = ""
            IF vDialog.EventAct EXISTS
               szActionName = vDialog.EventAct.Tag
               nRC = zstrcmpi( szActionName, "alt-f4" )
               IF nRC = 0
                  szActionName = "AltF4"
               END
            END

            CreateTabIndexString( vDialog, szTabIndex )
            szAbsoluteStyle = szAbsoluteStyle + szTabIndex

            szText = vDialog.Control.Text
            // Set Class as either null or with Class value.
            IF vDialog.Control.CSS_Class = ""
               szClass = ""
            ELSE
               szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
            END

            //If we put a title on the control, when the mouse is hovered over the control, this text will display.
            szTitleHTML = ""
            szTitle = vDialog.Control.DIL_Text
            IF szTitle != ""
               szTitleHTML = " title=^" + szTitle + "^ "
            END

            //KJS 10/19/07 - Added title.
            /*
            IF szWebCtrlType = "Button"
               szWidget = "<button type=^button^ " + szClass + szTitleHTML + "name=^"
               szTerm = szText + "</button>"
               szText = ""
            ELSE
               szWidget = "<input type=^submit^ " + szClass + szTitleHTML + "name=^"
               szTerm = ""
            END
            */
               szWidget = "<button type=^button^ " + szClass + szTitleHTML + "name=^"
               szTerm = szText + "</button>"
               szText = ""
               
            // Action is different if this is a repeating group.
            IF szRepeatGrpKey = ""
               szAction = szActionName + "( )"
            ELSE
               szAction = szActionName + "( '" + szCtrlTag + szRepeatGrpKey + "' )"
            END

            szParentWebType = ""
            IF vGroupParent != 0
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szParentWebType = "RelativePos"
               ELSE
                  szParentWebType = vGroupParent.Control.WebCtrlType
               END
            END
            IF szParentWebType = "Div" OR szParentWebType = "DivScroll" OR
               szParentWebType = "Span"

               szWriteBuffer = "<p></p>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               CreateSizeString( vDialog, szSize )
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szAction + "^ " + "style=^" + szSize + "^>" + szTerm
            ELSE
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szAction + "^ " + szAbsoluteStyle + ">" + szTerm
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  //End of PushBtn

         IF szControlType = "ComboBox"  // COMBOBOX
            GenJSPJ_CrteComboBox( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                  szCtrlTag, "", szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
         END

         IF szControlType = "Bitmap" OR szControlType = "BitmapBtn"  // BITMAP / JPG
            GenJSPJ_CrteJPG( vDialog, lFile, szWriteBuffer, szIndent,
                             szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END

         IF szControlType = "ListBox"  // LISTBOX
            GenJSPJ_CrteListBox( vDialog, lFile, szWriteBuffer, szIndentGroup,
                                 szCtrlTag, szNoPositioning, lOffsetX, lOffsetY )
         END  // IF szControlType = "ListBox"

         IF szControlType = "GroupBox" AND szRepeatingGroupFlag = "Y"  // REPEATING GROUP

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP BEGIN */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP BEGIN -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Begin with JSP first cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                               vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      long   lEntityKeyRG" + szCtrlTag + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strEntityKeyRG" + szCtrlTag + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
               ELSE
                  szScopingEntityName = ""
               END

               DropView( vDialog2 )

               szWriteBuffer = "      csrRC = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^ ).setFirst( " + szScopingEntityName + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( csrRC.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               
               szWriteBuffer = "         lEntityKeyRG" + szCtrlTag + " = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKeyRG" + szCtrlTag + " = Long.toString( lEntityKeyRG" + szCtrlTag + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process GroupBox begin.

         // If we are not using absolute positioning, then make all the divs float left.
         IF  szNoPositioning = "Y"
            zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
         END

         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS 09/11/08 - Now that we can generate using relative positioning, this
            // repeating group doesn't work right.  Instead of using fieldset, I will use the
            // div.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<div " + szAbsoluteStyle + "> <!-- div for repeating group --> "
               ELSE
                  szWriteBuffer = "<div class=^" + szClass + "^ " + szAbsoluteStyle + ">  <!-- div for repeating group -->"
               END
            ELSE
               CreateRelStyleString( vDialog, szRelStyle, 0, 0, "" )
               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szWriteBuffer = "<fieldset " + szRelStyle + ">"
               ELSE
                  szWriteBuffer = "<fieldset class=^" + szClass + "^ " + szRelStyle + ">"
               END
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Process fields on GroupBox.
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            szRepeatingGroupKey = "::<%=strEntityKeyRG" + szCtrlTag + "%>"
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatingGroupKey )
            //szRepeatGrpKey = "::<%=strEntityKeyRG%>"
            //GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
            //                         lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            szRepeatingGroupKey = ""
            DropView( vGroupParent )
            vGroupParent = 0

            // Process GroupBox end.
            IF  szNoPositioning = "Y"
               szWriteBuffer = "</div>   <!-- end div for repeating group -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<div style=^clear:both;^></div> <!-- clear before each repeating group -->"
            ELSE
               szWriteBuffer = "</fieldset>"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Conclude with JSP next cursor loop.
            IF vDialog.CtrlMapView EXISTS
               szWriteBuffer = "         csrRC = " + vDialog.CtrlMapView.Name +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^ ).setNextContinue( );"  // now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
                               //"^ ).setNext( " + szScopingEntityName + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "<% /* REPEATING GROUP END */ %>"
            szWriteBuffer = "<!-- REPEATING GROUP END -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END  // END OF REPEATING GROUP
/*
         // SURVEY GROUP
         IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y" AND vDialog.CtrlMapView EXISTS
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<!-- SURVEY GROUP BEGIN -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div> <!-- surrounding div for survey --> "
            ELSE
               szWriteBuffer = "<div class=^" + szClass + "^>  <!-- surrounding div for survey -->"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iQuestionCount = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   int iQuestionInGroupCount = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szQuestion = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szTblMultChName = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szCheckType = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String strBtnTwo = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String strBtnOne = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szGroupNbr = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // First begin with Question Group loop.
            szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                         vDialog.CtrlMapView.Name + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( nRC > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // See if a scoping entity has been specified, and if so, use it.
            CreateViewFromView( vDialog2, vDialog )
            SET CURSOR NEXT vDialog2.CtrlMap
            IF vDialog2.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
            ELSE
               szScopingEntityName = ""
            END
            DropView( vDialog2 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                         ".CheckExistenceOfEntity( strSessionId, ^SurveyQuestionGroup^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szGroupNbr = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestionaire^, ^wCurrentSurveyGroup^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorFirst( strSessionId, ^SurveyQuestionGroup^" +
                         ", ^wOrder^, szGroupNbr, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szGroupName = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestionGroup^, ^Name^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<div class=^surveygroup^> <!-- div for survey question group --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<span><%=szGroupName%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div> <!-- end div for survey question group --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<div class=^surveygroupspacing^> <!-- div for survey question group spacing --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
             szWriteBuffer = "</div> <!-- end div for survey question group spacing --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // Now go through question loop.
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // See if a scoping entity has been specified, and if so, use it.
            CreateViewFromView( vDialog2, vDialog )
            SET CURSOR NEXT vDialog2.CtrlMap
            IF vDialog2.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
            ELSE
               szScopingEntityName = ""
            END
            DropView( vDialog2 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorFirst( strSessionId, ^" + "SurveyQuestion" +
                         "^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      while ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Get the Question
            szWriteBuffer = "          iQuestionCount = iQuestionCount + 1;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szQuestion = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Number^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          if ( szQuestion.length() > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "             szQuestion = szQuestion + ^. ^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szQuestion = szQuestion + " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Question^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionID = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^ID^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szHelp = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^HelpDescription^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szType = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^Type^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szCommentFlag = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^AllowCommentFlag^, ^^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionIDName = ^QuestionID^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionTypeName = ^QuestionType^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szAllowCommentName = ^AllowComment^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szIsOptional = ^IsOptionalt^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szResponseIsOptional = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^ResponseIsOptional^, ^^, 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szQuestionHelp = " + vDialog.CtrlMapView.Name +
                  ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^HelpDescription^, ^^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // THIS IS WHERE WE WOULD CREATE THE VARIOUS QUESTIONS ETC>
            // We have a couple of hidden inputs to keep track of the question id and the type.
            szWriteBuffer = "   <input name=^<%=szQuestionIDName%>^ id=^<%=szQuestionIDName%>^ type=^hidden^ value=^<%=szQuestionID%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szQuestionTypeName%>^ id=^<%=szQuestionTypeName%>^ type=^hidden^ value=^<%=szType%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szAllowCommentName%>^ id=^<%=szAllowCommentName%>^ type=^hidden^ value=^<%=szCommentFlag%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <input name=^<%=szIsOptional%>^ id=^<%=szIsOptional%>^ type=^hidden^ value=^<%=szResponseIsOptional%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<div class=^surveyquestion^> <!-- div for survey question --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<span title=^<%=szQuestionHelp%>^ ><%=szQuestion%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div> <!-- end div for survey question --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:5px;^></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Create Question Text
            szWriteBuffer = "<div class=^surveyquestionanswers^>  <!-- div around survey answers --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Check if this is single answer or multiple choice
            szWriteBuffer = "   if ( szType.equals(^Text^) ) // Text Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Single Question code
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // MLEdit: mleTextAnswer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   String szTxtAnswerName = ^txtAnswer^ + szQuestionID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^wTextAnswer^, ^^, 10000 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div >  <!-- textarea answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<textarea name=^<%=szTxtAnswerName%>^ id=^<%=szTxtAnswerName%>^ style=^width:700px;height:94px;border:solid;border-width:2px;border-style:'groove';^ wrap=^wrap^><%=strErrorMapValue%></textarea>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div >  <!-- end textarea answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // End of Single Question code
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else if ( szType.equals(^Yes/No^) ) // Yes/No Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Start of Multiple choice code
            szWriteBuffer = "      if ( szType.equals(^Multiple Choice Single Response^) ) // Multiple Choice Single Answer"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCheckType = ^radio^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCheckType = ^checkbox^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szTblMultChName = ^tblMultChoice^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            //Create table that will list multiple choice answers
               // Check if this should be a radio or checkbox.
            szWriteBuffer = "<table  cols=2 style=^^  name=^<%=szTblMultChName%>^ id=^<%=szTblMultChName%>^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      iTableRowCnt = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      int    lEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "      String strEntityKey;"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strTag;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswer = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswerName = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strchkAnswerId = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strAnswerText = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String strQuestionChoiceID = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      zeidon.zView vtblMultChoice = new zeidon.zView( strSessionId );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      vtblMultChoice.CreateViewFromView( strSessionId, " + vDialog.CtrlMapView.Name + " );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC2 = vtblMultChoice.SetCursorFirst( strSessionId, ^SurveyMultiChoiceOption^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      while ( nRC2 >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         iTableRowCnt++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         lEntityKey = vtblMultChoice.GetEntityKey( strSessionId, ^SurveyMultiChoiceOption^ );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         strEntityKey = Integer.toString( lEntityKey );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswer = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strAnswerText = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^OptionText^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswer = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^wSelectedAnswer^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strQuestionChoiceID = vtblMultChoice.GetStringFromAttributeByContext( strSessionId, ^SurveyMultiChoiceOption^, ^ID^, ^^, 200 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( szCheckType.equals(^radio^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswerName = ^chkAnswer^ + iQuestionCount;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswerName = ^chkAnswer^ + strQuestionChoiceID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strchkAnswerId = ^chkAnswer^ + strQuestionChoiceID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //szWriteBuffer = "         if ( strchkAnswer.equals( ^Y^ ) )"
            szWriteBuffer = "         if ( strchkAnswer.equals( strQuestionChoiceID ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswer = ^<input name='^ + strchkAnswerName + ^' id='^ + strchkAnswerId + ^' value='^ + strQuestionChoiceID + ^' type='^ + szCheckType + ^'  CHECKED >^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strchkAnswer = ^<input name='^ + strchkAnswerName + ^' id='^ + strchkAnswerId + ^' value='^ + strQuestionChoiceID + ^' type='^ + szCheckType + ^' >^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <td style=^width:15px;^ nowrap><%=strchkAnswer%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   <td nowrap><%=strAnswerText%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC2 = vtblMultChoice.SetCursorNext( strSessionId, ^SurveyMultiChoiceOption^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC2 = vtblMultChoice.DropView( strSessionId );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // End of Multiple choice code
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // END OF CREATING VARIOUS QUESTIONS
            szWriteBuffer = "</div>  <!-- div around survey answers --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Does question allow a comment
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( szCommentFlag.equals(^Y^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          String szCommentText = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "          szCommentText = " + vDialog.CtrlMapView.Name +
                 ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^RequestCommentText^, ^^, 0 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( szCommentText.equals(^^) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         szCommentText = ^Comment^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:24px^></div>  <!-- Spacer before comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div class=^surveyquestioncommenttext^>  <!-- div for comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<span><%=szCommentText%></span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- End of comment -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div style=^height:5px;^></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div class=^surveyquestioncomment^>  <!-- div comment text answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // MLEdit: MLEdit1"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      String szCommentName = ^txtComment^ + szQuestionID;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = " + vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^SurveyQuestion^, ^wComment^, ^^, 10000 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<textarea name=^<%=szCommentName%>^ id=^<%=szCommentName%>^ style=^width:700px;height:94px;border:'2px solid';border-style:'groove';^ wrap=^wrap^><%=strErrorMapValue%></textarea>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- comment text answer -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // End of Question Comment
            // Spacing between questions
            szWriteBuffer = "<div class=^surveyquestionspacing^></div> <!-- spacing between survey questions -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Loop to next Question.
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorNext( strSessionId, ^" + "SurveyQuestion" +
                         "^, ^" + szScopingEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // Loop to next Question Group.
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                         ".SetCursorNext( strSessionId, ^" + "SurveyQuestionGroup" +
                         "^, ^" + szScopingEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // This is where we create the buttons at the bottom of the page.
            // Create Next and Prev buttons if necessary and when we are on the last page
            // create the Done button.  These assume that there are the following actions
            // in the dialog for this page: SUBMIT_Survey, NEXT_SurveyPage and PREV_SurveyPage
            szWriteBuffer = "         // This is where we create the buttons at the bottom of the page.  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Create Next and Prev buttons if necessary and when we are on the last page"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // create the Done button.  These assume that there are the following actions"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in the dialog for this page: SUBMIT_Survey, NEXT_SurveyPage and PREV_SurveyPage"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnTwo = ^<button type='button' name='btnNext' id='btnNext' value='' onclick='NEXT_SurveyPage( )'>Next-></button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( Integer.parseInt(szGroupNbr) > 1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnOne = ^<button type='button' name='btnPrev' id='btnPrev' value='' onclick='PREV_SurveyPage( )'><-Prev</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnTwo = ^<button type='button' name='btnSubmit' id='btnSubmit' value='' onclick='SUBMIT_Survey( )'>Submit Survey</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( Integer.parseInt(szGroupNbr) > 1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strBtnOne = ^<button type='button' name='btnPrev' id='btnPrev' value='' onclick='PREV_SurveyPage( )'><-Prev</button>^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "   <input name=^SurveyQuestionCount^ id=^SurveyQuestionCount^ type=^hidden^ value=<%=iQuestionCount%>>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  <!-- end div for survey -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<div class=^surveybuttons^>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<td><%=strBtnOne%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<td><%=strBtnTwo%></td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</div>  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<!-- SURVEY GROUP END -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  // END OF SURVEY GROUP
*/

         // Generation of the Tab control
         IF szControlType = "Tab"

            IF  vDialog.Control.CSS_Class != ""
               szClass = "tab-pane " + vDialog.Control.CSS_Class
            ELSE
               szClass = "tab-pane"
            END

            // If we are using relative positioning, don't give the tab a height.
            IF  szNoPositioning = "Y"
               // We might not want the groupbox to have a height (so it grows)
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szAbsoluteStyle = "style=^width:" + szWidth + "px;^"
            END

            // Create the parent tab control
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<div id=^" + szCtrlTag + "^ class=^" + szClass + "^ " + szAbsoluteStyle + "> <!-- Beginning of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //<script type="text/javascript">tp1 = new WebFXTabPane( document.getElementById( "tabPane1" ) );</script>
            szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + " = new WebFXTabPane( document.getElementById( ^" + szCtrlTag + "^ ) );</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )

            // If we are using relative positioning, don't give each tab page a height.
            IF  szNoPositioning = "Y"
               szStyle = ""
            ELSE
               szStyle = "style=^height:" + szHeight + "px;^"
            END

            // Set to the ctrl subobject to loop thru the tabs on the tab control
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            OrderEntityForView( vDialog, "Control", "Type A" )

            FOR EACH vDialog.Control

               szCtrlCtrlTag = vDialog.Control.Tag

               IF  vDialog.Control.CSS_Class != ""
                  szClass = "tab-page " + vDialog.Control.CSS_Class
               ELSE
                  szClass = "tab-page "
               END

               // Currently there are three actions associated with the tab (premapoi, postmapoi and preleae) currently I can only see
               // onclick working so I am not going to worry about pre-leae yet.  Also, we are not differenciating between the
               // premapoi and postmapoi, just take the action if one of these exists.
               szActionName = ""
               FOR  EACH  vDialog.EventAct
                  IF  vDialog.Event.Type = "1" OR vDialog.Event.Type = "3"
                     szActionName = vDialog.EventAct.Tag
                     nRC = zstrcmpi( szActionName, "alt-f4" )
                     IF nRC = 0
                        szActionName = "AltF4"
                     END
                  END
               END

               szWriteBuffer = "<div id=^" + szCtrlCtrlTag + "^ class=^" + szClass + "^ " + szStyle + "> <!-- Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF  szActionName = ""
                  szWriteBuffer = "<h2 class=^tab^><span>" + vDialog.Control.Text +"</span></h2>"
               ELSE
                  szWriteBuffer = "<h2 class=^tab^><span onclick=^" + szActionName + "( );^>" + vDialog.Control.Text +"</span></h2>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<script type=^text/javascript^>" + szCtrlTag + ".addTabPage( document.getElementById( ^" + szCtrlCtrlTag + "^ ) );</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szIndentGroup = szIndent
               CreateViewFromView( vGroupParent, vDialog )
               //Set to ctrl subobject and generate the controls that are on this tab
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                        lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, "" )

               ResetViewFromSubobject( vDialog )
               DropView( vGroupParent )
               vGroupParent = 0
               szWriteBuffer = "</div> <!-- End of Tab item " + szCtrlCtrlTag + " -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            END

            ResetViewFromSubobject( vDialog )
            szWriteBuffer = "</div> <!-- End of Tab Control " + szCtrlTag + " -->"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            szWriteBuffer = "<script type=^text/javascript^>setupAllTabs( );</script>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END  // End of tab control

//********************** START OF GRID ***********************************

         IF szControlType = "Grid"   // SPREADSHEET

            // For each table, we will create an export option that allows the user to
            // copy the contents of a table into excel.  The problem is that this only reflects
            // values of the table as the page is being built so if the table can be changed by
            // the user, those changes would not be seen unless the page was refreshed,  Don't create
            // this export option if "No Table Export" is a webcontrolproperty for the table.
            // Also don't create this export option if we are using absolute positioning.
            szTableExport = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table Export Option"
            IF RESULT >= zCURSOR_SET AND szNoPositioning = "Y"
               szTableExport = "Y"
            END

            lSubtypeX = vDialog.Control.ExtendedStyle

            // #define zSS_SORTEDHEADERS 0x00040000 = 262144
            // #define zSS_REMEMBERSORT  0x00020000 = 131072

            lSort = IsFlagSequenceSet( lSubtypeX, 262144 )
            IF lSort = 0
               lSort = IsFlagSequenceSet( lSubtypeX, 131072 )
            END

            lTableRowCnt = lTableRowCnt + 1   // Set up iTableRowCnt variable suffix.
            szSuffix = lTableRowCnt
         // X_Size = vDialog.Control.SZDLG_X
         // lWidth = X_Size * 2
         // zIntegerToString( szWidth, 10, lWidth )

            //KJS 02/12/08 - We had been looping through CtrlCtrl instead of setting
            //the view to the subobject but if there is a hidden column, then
            //we don't want to count that column so we need to look at the web properties.
            SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
            lColCnt = 0
            FOR EACH vDialog.Control
               SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
               //Don't count this if it is hidden.
               IF RESULT < zCURSOR_SET
                  lColCnt = lColCnt + 1
               END
            END
            ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

            //lColCnt = 0
            //FOR EACH vDialog.CtrlCtrl
            //   lColCnt = lColCnt + 1
            //END

            //KJS 7/26/07 - Previously the "cols=..." was only being added to the
            //table def if the headers were sortable.  In trying to get the absolute width
            //to work for individual columns, it seems I need this set so I am going to always
            //set "cols=...".
            szColCount = ""
            IF  lColCnt > 0
               zIntegerToString( szPosition, 10, lColCnt )
               szColCount = " cols=" + szPosition
            END

            szClass = vDialog.Control.CSS_Class
            //If there is no sorting of headers...
            IF lSort = 0
               IF szClass = ""
                  szSort = ""
               ELSE
                  szSort = "class=^" + szClass + "^"
               END
            // TraceLineS( "Table not sorted: ", vDialog.Control.Tag )
            ELSE
            //Headers are being sorted
            // TraceLineS( "Table sorted: ", vDialog.Control.Tag )
               IF szClass = ""
                  szSort = "class=^sortable^ "
               ELSE
                  szSort = "class=^sortable " + szClass + "^ "
               END
            END

            // Reset szPosition from using is above as the column count.
            szPosition = ""

            // If szNoPositioning is null then we are not using absolute positioning.
            IF  szNoPositioning = ""
               // Set up "top" and "left" positions for absolute positioning.
               CreateAbsolPosStringTable( vDialog, szPosition, 0, 0 )
            END

            IF szTableExport = "Y"
               // KJS 09/29/10 - Trying to set up a system for displaying a table's values as output so the user
               // can cut and paste this into excel.  The textarea we will create should be as wide as the
               // grid.
               szWriteBuffer = "<div class=^tableexport^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<img src=^./images/btn_expand.gif^ name=^btmp" + szCtrlTag + "^ id=^btmp" + szCtrlTag + "^ " +
                               "onclick=^" + szCtrlTag + "ExportOnClick( )^ style=^width:16px;height:14px;^ alt=^ExportBmp^ >"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "<span name=^spn" + szCtrlTag + "^ id=^spn" + szCtrlTag + "^>export table data</span>"
               szWriteBuffer = "<span name=^spn" + szCtrlTag + "^ id=^spn" + szCtrlTag + "^>Click here to display data for export</span>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szWriteBuffer = "<div name=^gb" + szCtrlTag + "^ id=^gb" + szCtrlTag + "^ style=^width:" +
                                szWidth + "px;height:70px;display:none;^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<textarea name=^o" + szCtrlTag + "^ id=^o" + szCtrlTag + "^ style=^width:" +
                                szWidth + "px;height:50px;border:solid;border-width:2px;border-style:groove;^ wrap=^wrap^></textarea> <!-- textarea for table values output  -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END


            // If Absolute Width is requested, add Width to szPosition.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
            IF RESULT >= zCURSOR_SET
               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
               szPosition = szPosition + "width:" + szWidth + "px;"
               // The width in percent of the table will be the pixel width divided by 400. Multiplying by 100 gives
               // an integer value of the percent.
               //lWidthPercent = (lWidth * 100) / 400
               //szWidth = lWidthPercent
            END

            szClass = vDialog.Control.CSS_Class

            szWebCtrlType = ""
            IF vGroupParent != 0
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szWebCtrlType = "RelativePos"
               ELSE
                  szWebCtrlType = vGroupParent.Control.WebCtrlType
               END
            END

            // KJS 6/19/08 - We want to add filtering on a table.  If the user chooses the web control property "Filter Rows" then
            // they need to have an attribute on the table entity called wHideTableRow.  If this attribute is set to "Y" then
            // that entity will not be displayed in the table.
            szFilterTable = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Filter Rows (wHideTableRow='Y')"
            IF RESULT >= zCURSOR_SET
               szFilterTable = "Y"
            END

            // KJS 05/06/09 - I am placing this div around the <table> being generated so that if there is a
            // WebGridNoDataMessage, I can create this message under the table lined up with the table.  Otherwise,
            // I need to save any spacing that happens before this grid.
            IF vDialog.Control.WebNoGridDataMessage != ""
               szWriteBuffer = "<div style=^float:left^>  <!-- Div around the table, this is for the message if no data -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            szScrollingTable = ""
            //KJS 04/10/08 - Want to try and add a scrolling table with stationary headings.
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrolling Table"
            IF RESULT >= zCURSOR_SET
               szScrollingTable = "Y"
               szWriteBuffer = "<div class=^tableScroll^ "
               PIX_PER_DU( vDialog, dDLUnits )
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
               // For the scrollable table we need to give the table a height.
               szPosition = szPosition + "height:" + szHeight + "px;"

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer= szWriteBuffer + " style=^position:relative;width:" + szWidth + "px;height:" + szHeight + "px;^>"
               ELSE
                  szWriteBuffer= szWriteBuffer + " style=^" + szPosition + "^>"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<table name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ cellspacing=0 " + szSort + szColCount + "  >"
            ELSE

               IF szWebCtrlType = "RelativePos" OR szWebCtrlType = "Span"
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^position:relative^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               ELSE
                  szWriteBuffer = "<table " + szSort + szColCount + " style=^" + szPosition + "^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
               END
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Process Grid Headings, unless "NoHeadings" is requested.
            // Create a Class statement for each column in the list.
            lSubtype = vDialog.Control.Subtype
            lHeader = IsFlagSequenceSet( lSubtype, 262144 ) // zSS_HIDEROWHEADER = zCONTROL_SPECIFIC_1
            IF lHeader = 0     // NoHeader was not set
               IF lSort = 0
                  szWriteBuffer = "<thead><tr>"
               ELSE
                  szWriteBuffer = "<thead bgcolor=green><tr>"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
               lCol = 0
               //Loop through each field in the grid and create the headers
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  //KJS 2/12/2008
                  SET CURSOR  FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"

                  //Don't ceate a header if this control is hidden
                  IF RESULT < zCURSOR_SET

                     IF szCtrlCtrlType = "PushBtn"  // PUSH BUTTON
                        lPushBtn = 1
                     ELSE
                        lPushBtn = 0
                     END

                     //KJS 7/26/07 - If we want "Absolute Width" for this control, we should put the
                     //width on the <th> as well as on the <td>.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested.
                     szAbsoluteWidth = ""
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szAbsoluteWidth = "width:" + szWidth + "px;"
                     END

                     // Set Grid Title either from static text or variable.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Variable Header"
                     IF RESULT >= zCURSOR_SET
                        //Yes, there is a variable header.
                        IF szWriteBuffer != "   }"
                           // The last entry was NOT a variable text, so create the "<%" statement.
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                        szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                                        "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      nRC =  " + vDialog.CtrlMapView.Name +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END
                        szWriteBuffer = "         strErrorMapValue =  " + vDialog.CtrlMapView.Name +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "          strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "       strErrorMapValue = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   if ( StringUtils.equals( strErrorFlag, ^Y^ ) && !StringUtils.isBlank( strErrorMapValue ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "   {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "%>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF  szAbsoluteWidth = ""
                           szWriteBuffer = "   <th><%=strErrorMapValue%></th>"
                        ELSE
                           szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^><%=strErrorMapValue%></th>"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "<%"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF szTableExport = "Y"
                           // KJS 09/29/10
                           szWriteBuffer = "      strTblOutput = strTblOutput + strErrorMapValue + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        szWriteBuffer = "   }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        // The Title is a constant.
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // If this is sortable and this is a pushbutton on the grid...
                        IF lSort != 0 AND lPushBtn != 0
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th class=^gridheading^>" + vDialog.Control.Text
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^ class=^gridheading^>" + vDialog.Control.Text
                           END
                        ELSE
                           IF  szAbsoluteWidth = ""
                              szWriteBuffer = "   <th"
                           ELSE
                              szWriteBuffer = "   <th style=^" + szAbsoluteWidth + "^"
                           END

                           //If this column is for a checkbox with no header text, we are creating a checkbox so that
                           //the user can "select all" for this column.  Because of this, we do not want this
                           //column to be able to sort.  Put on the class "gridheading" which keeps this column
                           //from sorting.
                           IF vDialog.Control.Text = "" AND ( vDialog.ControlDef.Tag = "GridCheckCtl" OR vDialog.ControlDef.Tag = "CheckBox" )
                              szWriteBuffer = szWriteBuffer + " class=^gridheading^"
                           END

                           //Put the ending on the tag and the text if there is any.
                           szWriteBuffer = szWriteBuffer + ">" + vDialog.Control.Text
                        END

                        //KJS 10/19/07 - If there is no Text and the control is a checkbox, then we want to create a
                        //checkbox in the header with an onclick to "CheckAllInGrid"
                        //Need to put class="gridheading" on <th>.
                        //I shouldn't have to do this for the variable headers (code up above) because we are only doing this
                        //if there is no header text.
                        IF vDialog.Control.Text = "" AND ( vDialog.ControlDef.Tag = "GridCheckCtl" OR vDialog.ControlDef.Tag = "CheckBox" )
                           szWriteBuffer = szWriteBuffer + "<input type=^checkbox^ onclick=^CheckAllInGrid(this,'" + vDialog.Control.Tag +"')^>"
                        ELSE
                           szWriteBuffer = szWriteBuffer + ""
                        END

                        szWriteBuffer = szWriteBuffer + "</th>"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF szTableExport = "Y"
                           // KJS 09/29/10
                           // If this is simply a checkbox for checking values in the table then we don't want to include this
                           // in the strTblOutput string.
                           szWriteBuffer = "<%"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           IF vDialog.Control.Text != ""
                              szWriteBuffer = "         strTblOutput = strTblOutput + ^" + vDialog.Control.Text + "^ + ^\t^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           ELSE
                              IF vDialog.Control.Text = "" AND vDialog.ControlDef.Tag != "GridCheckCtl" AND vDialog.ControlDef.Tag != "CheckBox"
                                 szWriteBuffer = "   strTblOutput = strTblOutput + ^\t^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              END
                           END
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END
                     END  // of ELSE of IF RESULT >= zCURSOR_SET

                  END //End of checking if the current control is hidden.

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END

               END  //End of looping through each field in the grid and creating the headers.

               // If the last entry was a variable text, create the "" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               IF szTableExport = "Y"
                  // We need to add a carriage return and line feed to strTblOutput
                  szWriteBuffer = "   <%"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   strTblOutput = strTblOutput + ^\r\n^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   %>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "</tr></thead>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            IF szScrollingTable = "Y"
               // Make tbody's height 50px (this might not always be right) less than the div height.  Otherwise you get a
               // scrollbar within the scrollbar.
               zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits - 50 )
               szWriteBuffer = "<tbody height=^" + szHeight + "px;^>"
            ELSE
               szWriteBuffer = "<tbody>"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            // try/catch
            szWriteBuffer = "try"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "{"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            IF vDialog.CtrlMapView EXISTS

               szWriteBuffer = "   iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      int    iTableRowCnt" + szSuffix + " = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      long   lEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strButtonName;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strOdd;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strTag;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               IF szFilterTable = "Y"
                  szWriteBuffer = "      String strFilter;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               //szWriteBuffer = "      iTableRowCnt = 0;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls

               // Create a work variable for each column in the list.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl"
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + ";"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        // Checkboxes need the extra work value.
                        szWriteBuffer = "      String str" + vDialog.Control.Tag + "Value;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END
                  END

                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                     szListCtrlTag = vDialog.Control.Tag
                     szWriteBuffer = "      String str" + szListCtrlTag + "ErrorColor;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  // KJS 05/06/09 - First Occurrence Only is when the user wants to show only the first occurrence of a value in
                  // a table column.  We need to keep track of the last value for the column so we need to create a variable to
                  // hold the last value.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurrence Only"
                  IF RESULT >= zCURSOR_SET
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "LV = ^^;  // Last value of this column "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  // If the Grid entry requests URL Mapping, generate the variable definition here.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                  IF RESULT >= zCURSOR_SET
                     // Define variable for URL Mapping.
                     szWriteBuffer = "      String str" + vDialog.Control.Tag + "_URL;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid
               szWriteBuffer = "      "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 5/1/08 - Jeff is a pain in the butt so I need to add this code.
               // We are creating a temporary view to the table view so that when we loop through the
               // entities to create this grid, we do not lose the original entity position.
               // If you have several grids on one page mapped to the same entity path, when one grid was
               // being painted, that messed up the position of the other grids.
               szGridView = "v" + vDialog.Control.Tag
               szGridOrigViewName = vDialog.CtrlMapView.Name

               szWriteBuffer = "      View " + szGridView + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + szGridView + " = " + vDialog.CtrlMapView.Name + ".newView( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                     CreateViewFromView( vDialog2, vDialog )
                     SET CURSOR NEXT vDialog2.CtrlMap
                     IF vDialog2.CtrlMapLOD_Entity EXISTS
                        szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
                     ELSE
                        szScopingEntityName = ""
                     END

                     DropView( vDialog2 )
                     szWriteBuffer = "      csrRC2 = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                                     "^ ).setFirst( " + szScopingEntityName + " );"
               ELSE
                     szWriteBuffer = "      csrRC2 = " + szGridView +
                                  ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirstWithinOi( );"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( csrRC2.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Create an "IF" statement to filter rows if one of the web control properties was "Filter Rows"
               IF  szFilterTable = "Y"

                  szWriteBuffer = "         strFilter = " + szGridView +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name +
                               "^ ).getStringFromAttribute( ^wHideTableRow^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  szWriteBuffer = "         // If the attribute wHideTableRow is null then we want to show this row."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         if ( StringUtils.isBlank( strFilter ) )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END

            // szWriteBuffer = "         strOdd = (iTableRowCnt" + szSuffix + " % 2) != 0 ? ^ class='odd'^ : ^^;"
               szWriteBuffer = "         strOdd = (iTableRowCnt % 2) != 0 ? ^ class='odd'^ : ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // szWriteBuffer = "         iTableRowCnt" + szSuffix + "++;"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            // szWriteBuffer = "         strSuffix" + szSuffix + " = Integer.toString( iTableRowCnt" + szSuffix + " );"
            // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         lEntityKey = " + szGridView +
                               ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Long.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strButtonName = ^SelectButton^ + strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )                                                     // strButtonName?

               // Process the subcontrols for mapping.
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
            // szIndentGroup = szIndent + "   "

               // Get the mapping attributes for each column in the table.
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szJustify = ""
                  lSubtype = vDialog.Control.Subtype
                  lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_CENTERJUSTIFY )
                  IF lTemp != 0
                     szJustify = " align=^center^"
                  ELSE
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_RIGHTJUSTIFY )
                     IF lTemp != 0
                        szJustify = " align=^right^"
                     END
                  END

                  // Position on display mapping value, which is CtrlMap named "Displayed Text" or unnamed CtrlMap.
                  SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Displayed Text"
                  IF RESULT < zCURSOR_SET
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                                WHERE vDialog.CtrlMap.Tag = ""
                  END

                  // Grid Control Mapping
                  // We don't generate mapping for Push Button or if there wasn't mapping.
                  // KJS 12/14/07 - I added Combobox and GridComboCtl to this because if there is a combobox,
                  // we already get the variables for the combobox while creating the combobox html code.
                  IF szCtrlCtrlType != "PushBtn" AND szCtrlCtrlType != "BitmapBtn" AND
                     szCtrlCtrlType != "ComboBox" AND szCtrlCtrlType != "GridComboCtl" AND
                     RESULT >= zCURSOR_SET
                     // Regular text

                     szListCtrlTag = vDialog.Control.Tag
                     szControlTag = "str" + szListCtrlTag
                     szWriteBuffer = "         " + szControlTag + " = ^^;"                                       // set string to blank
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                  // IF RESULT >= zCURSOR_SET OR vDialog.Control.WebCtrlType = "Edit"
                     IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                        lEditBox = 1
                        szWriteBuffer = "         " + szControlTag + "ErrorColor = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        lEditBox = 0
                     END

                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                     ELSE
                        szContextName = ""
                     END

                     szWriteBuffer = "         nRC = " + szGridView +
                                  ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"   // start brace
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     IF lEditBox = 1

                        szWriteBuffer = "            strTag = ^" + szListCtrlTag + "::^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // If there is an error, set on that entity and report the error?
                        // KJS 10/27/11 - I don't think we need the following code because this can be done
                        // in VmlOperation.CheckError.
                        /* Keeping it in for the time being ... dks 2011.11.07 
                        szWriteBuffer = "            nRC = vMsgQ.cursor( ^WebMsg^ ).setFirst( ^ControlTag^, strTag );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               // Should we do something with the error?"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               vMsgQ.cursor( ^WebMsg^ ).deleteEntity( CursorPosition.NEXT );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                         end of Keeping it in ... */

                        szWriteBuffer = "            strErrorMapValue = VmlOperation.CheckError( strTag, strError );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( !StringUtils.isBlank( strErrorMapValue ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "                  " + szControlTag + "ErrorColor = ^ style='color:red'^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "                  " + szControlTag + " = strErrorMapValue;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END

                        szWriteBuffer = "               " + szControlTag + " = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                        szWriteBuffer = "               if ( " + szControlTag + " == null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "                  " + szControlTag + " = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     ELSE
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END

                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, strDateFormat );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                           // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                           szWriteBuffer = "            if ( " + szControlTag + " == null )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szControlTag + " = ^^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        END
                     END

                     szWriteBuffer = "         }"  // end brace
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                     // KJS 05/06/09 - Check if the user wants this column to show only the first occurrence of the column value.
                     // All other occurrences of a value are null.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "First Occurrence Only"
                     IF RESULT >= zCURSOR_SET
                        szWriteBuffer = "            // Only show the first occurrence of this column value."
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( StringUtils.equals( " + szControlTag + ", " + szControlTag + "LV" + ") )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + " = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            else "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               " + szControlTag + "LV = " + szControlTag + ";"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        // If the value of the checkbox for not being checked is anything but null, the
                        // .length( ) wouldn't work properly.  All checkboxes would be checked.  Changing this...
                        szWriteBuffer = "         if ( StringUtils.equals( " + szControlTag + ", ^" + vDialog.Control.RadioOrCheckboxValue + "^ ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     ELSE
                        IF szTableExport = "Y"
                           // KJS 09/29/10 - for table output
                           szWriteBuffer = "         strTblOutput = strTblOutput + " + szControlTag + " + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END

                        szWriteBuffer = "         if ( StringUtils.isBlank( " + szControlTag + " ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     END

                     // Checkbox mapping is different here.
                     IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"

                        //KJS 10/19/07 - We want to add "title" to controls and should I add class here as well?

                        //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                        szTitleHTML = ""
                        szTitle = vDialog.Control.DIL_Text
                        IF szTitle != ""
                           szTitleHTML = " title='" + szTitle + "' "
                        END

                        //KJS 7/26/07 - Added disabled option for the checkbox.
                        CreateDisabledString( vDialog, szDisabled )

                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 11/16/10 - adding an action to the checkbox inside a grid. Currently the GridCheckbox
                        // doesn't allow an action but we can copy in a normal checkbox which has an action.
                        IF vDialog.EventAct EXISTS
                           szText = " onclick='" + vDialog.EventAct.Tag + "( this.id )'"
                        ELSE
                           szText = ""
                        END

                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox'  CHECKED " +
                                        szDisabled + szTitleHTML + szText + "> ^;"
                        //szWriteBuffer = "            " + szControlTag + " = ^<input name='^ + " + szControlTag +
                        //                "Value + ^' value='Y' type='checkbox' CHECKED " + szDisabled + szTitleHTML + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 09/29/10 - for table output
                        // If this is a checkbox with no text then this is only for selecting table rows, only add
                        // this to strTblOutput.if this checkbox has a text value (this is what is shown in the table header).
                        // This is code for when the checkbox is checked so put in the checked value.
                        IF szTableExport = "Y" AND vDialog.Control.Text != ""
                           szWriteBuffer = "         strTblOutput = strTblOutput + ^" + vDialog.Control.RadioOrCheckboxValue + "^ + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END

                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag + "Value = ^" + vDialog.Control.Tag +
                                        "^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            " + szControlTag +
                                        " = ^<input name='^ + " + szControlTag + "Value + ^' id='^ + " + szControlTag +
                                        "Value + ^' value='Y' type='checkbox' " +
                                        szDisabled + szTitleHTML + szText + "> ^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 09/29/10 - for table output
                        // If this is a checkbox with no text then this is only for selecting table rows, only add
                        // this to strTblOutput.if this checkbox has a text value (this is what is shown in the table header).
                        // This is code for when the checkbox is not checked (there is no value) so just add the tab.
                        IF szTableExport = "Y" AND vDialog.Control.Text != ""
                           szWriteBuffer = "         strTblOutput = strTblOutput + ^\t^;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                        END
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     ELSE
                        IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y" OR szCtrlCtrlType = "Calendar" OR
                           szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                           szWriteBuffer = "            " + szControlTag + " = ^^;"
                        ELSE
                           szWriteBuffer = "            " + szControlTag + " = ^&nbsp^;"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                     // If the Grid entry requests URL Mapping, generate the code here.
                     SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
                     IF RESULT >= zCURSOR_SET
                        szControlTag = "str" + vDialog.Control.Tag + "_URL"
                        szWriteBuffer = "         " + szControlTag + " = ^^;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         nRC = " + szGridView +
                                     ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                           lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                           szMaxStringLength = lMaxStringLength
                        ELSE
                           szMaxStringLength = "254"
                        END
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END
                        szWriteBuffer = "            " + szControlTag + " = " + szGridView +
                                        ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                        "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END

                  END

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Create the table entries with values.
               szWriteBuffer = "<tr<%=strOdd%>>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-controls
               lCol = 0
               FOR EACH vDialog.Control   // Loop to create table columns

                  szCtrlCtrlType = vDialog.ControlDef.Tag
                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )  // vDialog positioned on sub-sub-controls
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  // Set up "<td" constant with optional Class.
                  // !!! KJS 01/16/09

                  // KJS 01/16/09 - I am putting in "WRAP" as a Web Control Property because I think it's confusing
                  // to have the Wrap option on a different screen (under "Common" button).  I would think you would
                  // choose, "Absolute Width" and then choose "WRAP" if you want your field to wrap.  Should I instead
                  // have a web property of "Absolute Width Wrap"??  so you only have to add one property instead of
                  // two?
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "WRAP"
                  IF RESULT >= zCURSOR_SET
                     szItemTableHeader = "<td"
                  ELSE
                     // Under the "Common" button there is a checkbox for "Wrap".  Need to check this as well as
                     // the webcontrol property.
                     IF vDialog.Control.WebWrap = "Y"
                        szItemTableHeader = "<td"
                     ELSE
                        szItemTableHeader = "<td nowrap"
                     END

                  END

                  CreateDisabledString( vDialog, szDisabled )

                  // The id attribute is a unique identification for an HTML element.
                  // The id attribute is often used with CSS or JavaScript (using the HTML DOM)
                  // to style or change the HTML element with the specified unique id.
                  // The id must be unique within the HTML document, this means that you can only
                  // use the id once on a page, but re-use it on another page.
                  //
                  // Naming rules:
                  //  - Must begin with a letter A-Z or a-z
                  //  - Can be followed by: letters (A-Za-z), digits (0-9), hyphens ("-"),
                  //    underscores ("_"), colons (":"), and periods (".")
                  //  - Values are case-sensitive
                  //
                  // dks 2008.12.10 - Because of the above statements regarding valid id's for HTML
                  // elements, I believe the following Hidden generation should produce invalid HTML.

                  //KJS 2/12/2008 - If this control is a hidden control, then we do not care what other web controls
                  //properties there might be.  Create this as a hidden field. This does not have <td> tags.
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
                  IF RESULT >= zCURSOR_SET
                     szListCtrlTag = vDialog.Control.Tag
                     szWriteBuffer = "<input type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ " +
                                            "name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^>"

                  ELSE
                     //Not a hidden control.

                     //KJS 7/25/07 - Look for values in the WebControlProperties.
                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Edit = "Y"
                     ELSE
                        szWCP_Edit = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Multiline"
                     IF RESULT >= zCURSOR_SET
                        szWCP_Multiline = "Y"
                     ELSE
                        szWCP_Multiline = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "EmailAddress"
                     IF RESULT >= zCURSOR_SET
                        szWCP_EmailAddress = "Y"
                     ELSE
                        szWCP_EmailAddress = "N"
                     END

                     SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Absolute Width"
                     IF RESULT >= zCURSOR_SET
                        szWCP_AbsoluteWidth = "Y"
                     ELSE
                        szWCP_AbsoluteWidth = "N"
                     END

                     // If Absolute Width is requested, add Width to szItemTableHeader.
                     IF szWCP_AbsoluteWidth = "Y"
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                     END

                     //If we put a title on the control, when the mouse is hovered over the control, this text will display.
                     szTitleHTML = ""
                     szTitle = vDialog.Control.DIL_Text
                     IF szTitle != ""
                        szTitleHTML = " title=^" + szTitle + "^ "
                     END

                     szClass = vDialog.Control.CSS_Class
                     IF szClass != "" AND szCtrlCtrlType != "PushBtn"  // Don't add Class here for Push Button.
                        szItemTableHeader = szItemTableHeader + " class=^" + szClass + "^"
                     END

                     //KJS 10/19/07 - Added title
                     IF szTitle != "" AND szCtrlCtrlType != "PushBtn"  // Don't add title here for Push Button.
                        szItemTableHeader = szItemTableHeader + szTitleHTML
                     END

                     IF szCtrlCtrlType = "PushBtn"
                        IF szWriteBuffer = "   }"
                           // The last entry was a variable text, so create the "%>" statement.
                           szWriteBuffer = "%>"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        // Push Button
                        szActionName = ""
                        IF vDialog.EventAct EXISTS
                           szActionName = vDialog.EventAct.Tag
                        END

                        // Set Class as either null or with Class value.
                        IF vDialog.Control.CSS_Class = ""
                           szClass = ""
                        ELSE
                           szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
                        END

                        //KJS 7/26/07 - Added DISABLED option.
                        //KJS 10/19/07 - Added title

                        // KJS 06/22/09 - I am noticing that there is no width for a push button
                        // in a grid.  I'm thinking there should be so I am going to get the
                        // width here (buttons don't have a WebControlProperty of Absolute Width).
                        PIX_PER_DU( vDialog, dDLUnits )
                        zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                        szStyle = " style=^width:" + szWidth + "px;^ "

                     // szWriteBuffer = "   " + szItemTableHeader + "><input type=^submit^ " + szTitleHTML + szClass + "name=<%=strButtonName%> onclick=^" + szActionName +
                     //                 "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ value=^" + vDialog.Control.Text + "^" + szDisabled + "></td>"
                        szWriteBuffer = "   " + szItemTableHeader + "><button type=^button^ " + szTitleHTML + szClass + "name=<%=strButtonName%> onclick=^" + szActionName +
                                        // KJS 11/10/12 thought i might want this"( '<%=strEntityKey%>' )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szStyle + szDisabled + ">"+
                                        "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szStyle + szDisabled + ">"+
                                        vDialog.Control.Text + "</button></td>"
                     ELSE
                        szListCtrlTag = vDialog.Control.Tag

                        // If Title is variable mapping, only create entries for columns with titles.
                        CreateViewFromView( vDialog2, vDialog )
                     // SET CURSOR NEXT vDialog2.CtrlMap WHERE vDialog2.CtrlMap.Tag = "Variable Header"
                     // IF RESULT >= zCURSOR_SET AND vDialog2.CtrlMapLOD_Attribute EXISTS
                     //    szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                     //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // ELSE
                        IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"

                           //IF szWCP_AbsoluteWidth = "Y"
                              PIX_PER_DU( vDialog, dDLUnits )
                              zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
                              //szItemTableHeader = szItemTableHeader + " style=^width:" + szWidth + "px;^"
                           //END

                           //szViewName = vDialog.CtrlMapView.Name
                           szViewName = szGridView
                           szMapEntityName = vDialog.CtrlMapRelatedEntity.Name
                           szMapAttributeName = vDialog.CtrlMapER_Attribute.Name

                           IF vDialog.CtrlMapContext EXISTS
                              szContextName = vDialog.CtrlMapContext.Name
                           ELSE
                              szContextName = ""
                           END

                           szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                           IF vDialog.Event EXISTS
                              IF vDialog.Event.Type = 1
                                 szSelectAction   = "onchange"
                                 szSelectFunction = "OnChange"
                              ELSE
                                 szSelectAction   = "onblur"
                                 szSelectFunction = "OnBlur"
                              END
                           ELSE
                              szSelectAction   = "onchange"
                              szSelectFunction = "OnChange"
                           END

                           //Can be a domain combo box or a table combo box
                           lSubtype = vDialog.Control.Subtype
                           nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                           IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                              //Domain combo box

                              //KELLY - Do I need to add DISABLED here?

                              IF szClass = ""
                              // szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:152px;height:20px;^ " +
                                 szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " +
                                                 szDisabled + szSelectAction + "=^" +
                                                 szListCtrlTag + szSelectFunction + "( 'h" + szListCtrlTag + "::<%=strEntityKey%>', this, <%=strEntityKey%> )^>"
                              ELSE
                                 szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML +
                                                " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( 'h" + szListCtrlTag + "<%=strEntityKey%>' this," + 
                                                " <%=strEntityKey%> )^>"
                                                //" style=^width:152px;height:20px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "<%=strEntityKey%>," + szListCtrlTag + "<%=strEntityKey%> )^>"
                              END

                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // szWriteBuffer = "      nRC = " + szViewName + ".GetView( strSessionId, ^" + szViewName + "^, vAppSubtask );"

                              // This view should be the same as the view we are getting for the grid so we don't need to retrieve
                              // it again.  Set nRC = 1 so that we go into the IF statement (should really take that out).
                              //szWriteBuffer = "      nRC = 1;"
                              //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              //szWriteBuffer = "      if ( nRC > 0 )"
                              //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              //szWriteBuffer = "      {"
                              //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      List<TableEntry> list" + szListCtrlTag + " = JspWebUtils.getTableDomainValues( " + vDialog.CtrlMapView.Name + " , ^" +
                                              vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                                 lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                                 szMaxStringLength = lMaxStringLength
                              ELSE
                                 szMaxStringLength = "254"
                              END

                              szWriteBuffer = "         nRC = " + szViewName + ".cursor( ^" + szMapEntityName + "^ ).checkExistenceOfEntity().toInt();"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         if ( nRC >= 0 )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              // KJS 10/31/12 - I think that we should get "internal value" instead of external. But then I think we
                              // need to change DoInputMapping and GenJSPJ_CtreComboBox. Get rid of last ""
                              szWriteBuffer = "            strComboCurrentValue = " + szViewName + ".cursor( ^" + szMapEntityName + "^ ).getStringFromAttribute( ^" +
                                              szMapAttributeName + "^, ^" + szContextName + "^ );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                              szWriteBuffer = "            if ( strComboCurrentValue == null )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               strComboCurrentValue = ^^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         else"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            strComboCurrentValue = ^^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  
                              IF vDialog.CtrlMapER_Attribute.NotNull != "Y"
                                 // Generate code when attribute is NOT required.
                                 szWriteBuffer = "            // Code for NOT required attribute, which makes sure a blank entry exists."
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            if ( strComboCurrentValue == ^^ )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               <option selected=^selected^ value=^^></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            else"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               <option value=^^></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              END

                              // KJS 10/31/12 - New Code for java
                              szWriteBuffer = "      for ( TableEntry entry : list" + szListCtrlTag + " )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         String internalValue = entry.getInternalValue( );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         String externalValue = entry.getExternalValue( );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         // Perhaps getInternalValue and getExternalValue should return an empty string, "
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         // but currently it returns null.  Set to empty string. "
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         if ( externalValue == null )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            internalValue = ^^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            externalValue = ^^;"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  
                              // The following if statement eliminates a null value, which would be the second null in the combo box.
                              szWriteBuffer = "         if ( !StringUtils.isBlank( externalValue ) )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            if ( StringUtils.equals( strComboCurrentValue, externalValue ) )"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               <option selected=^selected^ value=^<%=externalValue%>^><%=externalValue%></option>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            else"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            {"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "               <option value=^<%=externalValue%>^><%=externalValue%></option>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "            }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "         }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "      }  // for ( TableEntry entry"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              // KJS 10/31/12 - END OF New Code for java


                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "   </select>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           // szWriteBuffer = szWriteBuffer + "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=str" + szListCtrlTag + "%>^ >"
                              szWriteBuffer = "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboCurrentValue%>^ >"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           ELSE

                              // Select type combo box
                              CreateViewFromViewForTask( vList, vDialog, 0 )
                              SET CURSOR NEXT vList.CtrlMap
                              CreateViewFromViewForTask( vEntity, vList, 0 )
                              SET CURSOR NEXT vEntity.CtrlMap
                              CreateViewFromViewForTask( vScope, vEntity, 0 )
                              SET CURSOR NEXT vScope.CtrlMap

                              // The Select Action is either onblur or onchange depending on the following.
                              // 1. If no Action, use onchange because this allows using keystrokes in the control.
                              // 2. If Action is SelectChange, use onchange.
                              // 3. If Action is SelectEnd, use onfocusout.
                              IF vDialog.Event EXISTS
                                 IF vDialog.Event.Type = 1
                                    szSelectAction   = "onchange"
                                    szSelectFunction = "OnChange"
                                 ELSE
                                    szSelectAction   = "onblur"
                                    szSelectFunction = "OnBlur"
                                 END
                              ELSE
                                 szSelectAction = "onchange"
                                 szSelectFunction = "OnChange"
                              END


                              szWriteBuffer = "   " + szItemTableHeader + ">" // <td nowrap>

                              IF szClass = ""
                              // szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:152px;height:20px;^ " +
                                 szWriteBuffer = szWriteBuffer + "<select name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML + " style=^width:" + szWidth + "px;^ " +
                                                 szDisabled + szSelectAction + "=^" +
                                                 szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%>, <%=strEntityKey%> )^>"
                              ELSE
                                 szWriteBuffer = szWriteBuffer + "<select class=^" + szClass + "^ name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ size=^1^" + szTitleHTML +
                                                " style=^width:" + szWidth + "px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%> )^>"
                                             // " style=^width:152px;height:20px;^ " + szDisabled + szSelectAction + "=^" + szListCtrlTag + szSelectFunction + "( h" + szListCtrlTag + "::<%=strEntityKey%>," + szListCtrlTag + "::<%=strEntityKey%> )^>"
                              END
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              szWriteBuffer = "<%"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              IF vDialog.CtrlMapView EXISTS
                                 szWriteBuffer = "   " + vList.CtrlMapView.Name + " = " +
                                                 "task.getViewByName( ^" + vList.CtrlMapView.Name + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "   if ( VmlOperation.isValid( " + vList.CtrlMapView.Name + " ) )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "   {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         strComboCurrentValue = ^^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      View v" + szListCtrlTag + ";"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // If mapping is specified, set up the value to be used in selecting
                                 // the correct entry.
                                 IF vDialog.CtrlMapLOD_Attribute EXISTS
                                    IF vDialog.CtrlMapView.Name = szGridOrigViewName
                                       szWriteBuffer = "      nRC = 1;"
                                       szViewName = szGridView
                                    ELSE
                                       szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " +
                                                       "task.getViewByName( ^" + vDialog.CtrlMapView.Name +
                                                       "^ );"
                                       szViewName = vDialog.CtrlMapView.Name
                                    END
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         nRC = " + szViewName + ".cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    IF vDialog.CtrlMapContext EXISTS
                                       szContextName = vDialog.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                                       lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "254"
                                    END

                                    szWriteBuffer = "            strComboCurrentValue = " + szViewName + ".cursor( ^" +
                                             vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                                             vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                                    szWriteBuffer = "         if ( strComboCurrentValue == null )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            strComboCurrentValue = ^^;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                 ELSE
                                    szWriteBuffer = "      strComboCurrentValue = ^^;"
                                 END
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // See if a list entity has been specified, and if so, use it.
                                 IF vEntity.CtrlMapLOD_Entity EXISTS
                                    szListEntityName = vEntity.CtrlMapLOD_Entity.Name
                                 ELSE
                                    szListEntityName = vList.CtrlMapRelatedEntity.Name
                                 END

                                 // See if a scoping entity has been specified, and if so, use it.
                                 lSubtype = vDialog.Control.Subtype
                                 lSubtype = IsFlagSequenceSet( lSubtype, zCOMBOBOX_SCOPE_OI )
                                 IF lSubtype = 0
                                    IF vScope.CtrlMapLOD_Entity EXISTS
                                       szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
                                    ELSE
                                       szScopingEntityName = ""
                                    END
                                 END

                                 szWriteBuffer = "      v" + szListCtrlTag + " = " + vList.CtrlMapView.Name + ".newView( );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      ComboCount = 0;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      strComboSelectedValue = ^0^;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // Auto Include
                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    szWriteBuffer = ""
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      // For Auto Include, process null entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      ComboCount++;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      if ( StringUtils.isBlank( strComboCurrentValue ) )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         <option selected=^selected^></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "%>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         <option></option>"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "<%"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                 END

                                 IF lSubtype = 0
                                    szWriteBuffer = "      csrRC = v" + szListCtrlTag + ".cursor( ^" +
                                                                 szListEntityName + "^ ).setFirst( " + szScopingEntityName + " );"
                                 ELSE
                                    szWriteBuffer = "      csrRC = v" + szListCtrlTag + ".cursor( ^" + szListEntityName + "^ ).setFirstWithinOi( );"
                                 END

                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      while ( csrRC.isSet() )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "      {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vList.CtrlMapLOD_Attribute EXISTS
                                    IF vList.CtrlMapContext EXISTS
                                       szContextName = vList.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END


                                    IF vList.CtrlMapER_Domain.MaxStringLth > 254
                                       lMaxStringLength = vList.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "254"
                                    END

                                    szWriteBuffer = "         strErrorMapValue = v" + szListCtrlTag + ".cursor( ^" +
                                                    vList.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                                                    vList.CtrlMapER_Attribute.Name + "^, ^" +
                                                    szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
                                    szWriteBuffer = "         if ( strErrorMapValue == null )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            strErrorMapValue = ^^;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                                 END

                                 szWriteBuffer = "         if ( StringUtils.equals( strComboCurrentValue, strErrorMapValue ) )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            <option selected=^selected^><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         else"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "%>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            <option><%=strErrorMapValue%></option>"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "<%"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                                 szWriteBuffer = "         ComboCount++;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              // IF lSubtype = 0  // now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
                                    szWriteBuffer = "         csrRC =  v" + szListCtrlTag +
                                                    ".cursor( ^" + szListEntityName + "^ ).setNextContinue( );"
                                                    //"^ ).setNext( " + szScopingEntityName + " );"
                              // ELSE
                              //    szWriteBuffer = "         nRC =  v" + szListCtrlTag +
                              //                    ".cursor( ^" + szListEntityName + "^ ).setNextWithinOi( );"
                              // END

                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 DropView( vList )
                                 DropView( vEntity )
                                 DropView( vScope )
                              END

                              szWriteBuffer = "      }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              szWriteBuffer = "      v" + szListCtrlTag + ".drop( );"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                              szWriteBuffer = "   }"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                              szWriteBuffer = "%>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "   </select>"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              szWriteBuffer = "<input name=^h" + szListCtrlTag + "::<%=strEntityKey%>^ id=^h" + szListCtrlTag + "::<%=strEntityKey%>^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           END  //IF vDialog.Control.Subtype < 12000 (domain combobox)
                           szWriteBuffer = "   </td>"

                        ELSE
                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "   " + szItemTableHeader + ">"
                           //KJS 7/26/07 - Added DISABLED option.
                           szWriteBuffer = szWriteBuffer + "<input name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ "
                           szWriteBuffer = szWriteBuffer + "style=^width:80px^ type=^text^" + szDisabled + " value=^<%=str" + szListCtrlTag + "%>^ />"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "              <img src=^images/scw.gif^ title=^Select Date^ alt=^Select Date^ " + szDisabled + " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "              onclick=^scwShow( document.getElementById( '" + szListCtrlTag + "::<%=strEntityKey%>' ), this );^ /></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"
                           X_Size = vDialog.Control.SZDLG_X
                           Size = X_Size / 3
                           zIntegerToString( szSize, 10, Size )
                           //KJS 7/26/07 - Added DISABLED option.
                           //KJS 10/19/07 - Added title
                           szWriteBuffer = "   " + szItemTableHeader + "><input size=^" + szSize + "^ value=^<%=str" + szListCtrlTag + "%>^<%=str" + szListCtrlTag +
                                                  "ErrorColor%> name=^" + szListCtrlTag + "::<%=strEntityKey%>^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ " + szTitleHTML + szDisabled + "></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "Multiline" OR szWCP_Multiline = "Y"
                           // KJS 09/26/2008 - Taking out the <pre> because it makes the grid too large (can't do a "WRAP" on the
                           // <td>.  I don't think in a grid that we would want that.
                           szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                        // szWriteBuffer = "   " + szItemTableHeader + "><pre><%=str" + szListCtrlTag + "%></pre></td>"
                        ELSE
                        IF vDialog.Control.WebCtrlType = "EmailAddress" OR szWCP_EmailAddress = "Y"
                           szWriteBuffer = "   " + szItemTableHeader + " class=^Email^><%=str" + szListCtrlTag + "%></td>"
                        ELSE
                        //KJS 11/18/2007 - Adding Bitmap as a grid control
                        IF szCtrlCtrlType = "Bitmap"

                           szText = ""
                           IF vDialog.Control.Text != ""
                              szText = " alt=^" + vDialog.Control.Text + "^ "
                           END
                           IF vDialog.EventAct EXISTS
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ style=^display:block;width:100%;height:100%;text-decoration:none;^ name=^" + szListCtrlTag + "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ^onclick=^" +
                                              vDialog.EventAct.Tag + "( this.id )^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           ELSE
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ name=^" + szListCtrlTag + "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ><img src=^" +
                                              vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           END
                        ELSE
                        //DKS 02/01/2008 - Adding BitmapBtn as a grid control
                        IF szCtrlCtrlType = "BitmapBtn"

                           IF vDialog.Control.Text != ""
                              szText = "alt=^" + vDialog.Control.Text + "^"
                           ELSE
                              szText = ""
                           END

                           IF vDialog.EventAct EXISTS  // the line below was commented 3013.03.28 ... I need the line passing this.id.  dks
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ style=^display:block;width:100%;height:100%;text-decoration:none;^ name=^" + szListCtrlTag + "^ onclick=^" + vDialog.EventAct.Tag +
                                           // "( '<%=strEntityKey%>' )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                                              "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           ELSE
                              szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^  name=^" + szListCtrlTag +
                                              "^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^ ><img src=^" + vDialog.Control.WebFileName + "^ " + szTitleHTML + szText + "></a></td>"
                           END

                        ELSE
                        IF szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                           // KJS 11/16/10 - I needed to add this because if I copy a CheckBox into a grid that
                           // has an EventAct (action) then previously it was creating an <a href.  GridCheckCtl
                           // does not have EventActs but normal Checkboxes do..
                           szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                        ELSE
                           IF vDialog.EventAct EXISTS
                              // Right now the only EventAct on a regular grid subcontrol is HotText (now there is Bitmap and BitmapBtn)
                              // Process HotText Action the same as for the Text Control.
                              // KJS 11/16/10 - A normal checkbox copied into a grid can have an EventAct.
                              //KJS 10/19/07 - added title
                              IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
                                 // For a Hyperlink in a Grid, we assume there is ALWAYS both "Displayed Text" mapping and
                                 // "Hyperlink URL" mapping, which have been set above.
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^<%=str" + szListCtrlTag + "_URL%>^ " + szTitleHTML + "><%=str" + szListCtrlTag + "%></a></td>"
                              ELSE
                                 // This is HotText mapping to an Action.
                                 szWriteBuffer = "   " + szItemTableHeader + "><a href=^#^ onclick=^" + vDialog.EventAct.Tag + "( this.id )^ id=^" + szListCtrlTag + "::<%=strEntityKey%>^" + szTitleHTML + "><%=str" + szListCtrlTag + "%></a></td>"
                              END
                           ELSE
                              // Regular default Grid subcontrol.
                              szWriteBuffer = "   " + szItemTableHeader + "><%=str" + szListCtrlTag + "%></td>"
                           END
                        END // szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox"
                        END // WebCtrlType = "EmailAddress"
                        END // WebCtrlType = "BitmapBtn"
                        END // WebCtrlType = "Multiline"
                        END // WebCtrlType = "Edit"
                        END // szCtrlCtrlType = "Calendar"
                        END // szCtrlCtrlType = "ComboBox"
                        END
                        //END
                        DropView( vDialog2 )
                     END // End ELSE of PushButton
                  END // End ELSE of checking if this is a hidden field
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )  // vDialog positioned on sub-controls
                  END
               END  // Loop to create table columns

               IF szTableExport = "Y"
                  // We need to add a carriage return and line feed to strTblOutput
                  szWriteBuffer = "   <%"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   strTblOutput = strTblOutput + ^\r\n^;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "   %>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               ResetViewFromSubobject( vDialog )  // vDialog positioned on Grid

               // If the last entry was a variable text, create the "<%" statement.
               IF szWriteBuffer = "   }"
                  szWriteBuffer = "%>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               ELSE
                  szWriteBuffer = ""
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "</tr>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //If on this table we are filtering rows, we need to add the closing bracket for the "if ( strFilter.length == 0 ) statement
               IF  szFilterTable = "Y"

                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

            // IF lSubtypeX = 0  now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
                  szWriteBuffer = "         csrRC2 = " + szGridView +
                                  ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setNextContinue( );"
                               // "^ ).setNext( " + szScopingEntityName + " );"
            // ELSE
            //    szWriteBuffer = "         csrRC2 = " + szGridView +
            //                    ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setNextWithinOi( );"
            // END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + szGridView + ".drop( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
            
            // try/catch
            szWriteBuffer = "}"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "catch (Exception e)"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "{"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "out.println(^There is an error in grid: ^ + e.getMessage());"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "task.log().info( ^*** Error in grid^ + e.getMessage() );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "}"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</tbody>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "</table>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // Put ending div for the scrollable table with stationary headings
            IF  szScrollingTable = "Y"
               szWriteBuffer = "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            IF szTableExport = "Y"
               // KJS 09/29/10 - Hidden text area that will hold table values as output.  I have two of these because I am assuming the
               // user would want to see the output in a text area above the table but because we build the output string as we
               // build the table, then we need to store this value after the table.  We will copy the values from this table
               // to the text area created above.  Or could I simply build javascript code here that would copy strTblOutput to
               // the correct textarea?
               szWriteBuffer = "<textarea name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ style=^display:none;^ ><%=strTblOutput%></textarea> <!-- textarea for table values output  -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "<script type=^text/javascript^>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "document.getElementById(^o"+ szCtrlTag + "^).value = document.getElementById(^h"+ szCtrlTag + "^).value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "</script>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

            // If the user has entered a WebGridNoDataMessage for this grid, then create
            // code to check if there was no data and if so, display this message to the
            // user in a <span>.
            // I believe I would need to know if there is a spacer in front of the grid, if
            // so, then I would assume I would put that spacer in front of this message
            // as well.
            // What if I put this message as part of the table?  Do a colspan and then
            // put this message in?  But then I wouldn't have the class.
            IF vDialog.Control.WebNoGridDataMessage != ""

               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( iTableRowCnt == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               IF vDialog.Control.WebNoGridDataMsgClass = ""
                  szWriteBuffer = "<span style=^^>" + vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               ELSE
                  szWriteBuffer = "<span class=^" + vDialog.Control.WebNoGridDataMsgClass + "^ style=^^>" +
                                   vDialog.Control.WebNoGridDataMessage + "</span>"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      <%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      %>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 05/06/09 - I am putting a div with style float:left around the tables so that if there
               // is a message to display if the table has no data, then this message will line up with the
               // table.  Not sure if placing this div will affect how the tables are painted but I hope not.
               szWriteBuffer = "</div>  <!-- End of div around table -->"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

         END  // IF szControlType = "Grid"

//********************** END OF GRID ***********************************

         IF szControlType = "MLEdit"  // MLEDIT
            SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
            IF RESULT >= zCURSOR_SET
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   strErrorMapValue = VmlOperation.CheckError( ^" + szCtrlTag + "^, strError );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   if ( !StringUtils.isBlank( strErrorMapValue ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strErrorColor = ^color:red;^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strErrorColor = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                               vDialog.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF vDialog.CtrlMapContext EXISTS
                  szContextName = vDialog.CtrlMapContext.Name
               ELSE
                  szContextName = ""
               END

               IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                  lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                  szMaxStringLength = lMaxStringLength
               ELSE
                  szMaxStringLength = "254"
               END

               szWriteBuffer = "            strErrorMapValue = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                               szContextName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
               szWriteBuffer = "            if ( strErrorMapValue == null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strErrorMapValue = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "            task.log( ).info( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                               vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            task.log( ).info( ^Entity does not exist: ^ + ^" +
                               vDialog.CtrlMapView.Name +
                               "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               lStyleX = vDialog.Control.ExtendedStyle
               lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
               IF lTemp != 0
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
               END

               // This doesn't work, but something like it may be necessary to remove special characters ... dks 2012.04.25
               // strErrorMapValue = strErrorMapValue.replace("/&/g", "&amp;").replace("/>/g", "&gt;").replace("/</g", "&lt;").replace("/\"/g", "&quot;").replace("/%/g", "&#037;");

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               X_Size = vDialog.Control.SZDLG_X
               Size = X_Size / 4
               zIntegerToString( szSize, 10, Size )
               Y_Size = vDialog.Control.SZDLG_Y
               Size = Y_Size / 12
               zIntegerToString( szHeight, 10, Size )

               IF vDialog.Control.VisibleBorder = "Y"
                  zAppendQuotedString( szAbsoluteStyle, "border:solid;border-width:4px;border-style:groove;", "style=", "^" )
               ELSE
                  zAppendQuotedString( szAbsoluteStyle, "border:solid;border-width:2px;border-style:groove;", "style=", "^" )
               END

               szTinyMCEFlag = ""
               SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "wysiwyg TinyMCE"
               IF RESULT >= zCURSOR_SET
                  szTinyMCEFlag = "Y"
               END

               IF vDialog.Control.WebCtrlType = "wysiwygEditor" OR szTinyMCEFlag = "Y"

               // CreateTabIndexString( vDialog, szTabIndex )
               // CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
               // szAbsoluteStyle = szAbsoluteStyle + szTabIndex

                  GetViewByName( vLPLR, "TaskLPLR", vDialog, zLEVEL_TASK )
                  szText = vLPLR.LPLR.Name
                  szLPLR_Name = "[App." + szText + "]"
                  SysReadZeidonIni( -1, szLPLR_Name, "TinyMCEClass", szClass )
                  IF szClass = ""
                     szClass = "mceSimple"  // "mceSimple" is TinyMCE default
                  END

                  IF vDialog.Control.CSS_Class != ""
                     szClass = szClass + " " + vDialog.Control.CSS_Class
                  END

                  szWriteBuffer = "<textarea name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey +
                                  "^ class=^" + szClass + "^ " + szTitleHTML +
                                  szAbsoluteStyle + ">" +
                               // "^ rows="15" cols="80" style="width: 80%">" +
                                  "<%=strErrorMapValue%></textarea>"

               ELSE
                  szClass = vDialog.Control.CSS_Class
                  CreateTabIndexString( vDialog, szTabIndex )
                  szWriteBuffer = "<textarea name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^" + szTitleHTML +
                                  szAbsoluteStyle + szTabIndex + " wrap=^wrap^>" +
                                  "<%=strErrorMapValue%></textarea>"

               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
         END   //IF szControlType = "MLEdit"
      END
   END // FOR EACH

   // I am creating a div for every new y position.  Need to close this.  This
   // will not be correct if there are no controls.
   // If szFirstTimeThrough = "Y" then that means we were on a groupbox that doesn't have
   // any controls inside it.  If that's true, we didn't create the beginning <div so don't create
   // the closing div.
   // Only do this if we are positioning with relative positioning.
   IF  szNoPositioning = "Y"
      IF szFirstTimeThrough = ""
         szWriteBuffer = "</div>  <!-- End of a new line -->"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // szIndent = szIndentHold
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_InputMapRecurs
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_InputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                        STRING ( 32 )    ViewName,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        INTEGER          lTableRowCnt,
                        STRING ( 100)    szRepeatGrpKey )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   VIEW vDialog3 BASED ON LOD TZWDLGSO
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListMappingEntityName
   STRING ( 100 ) szViewName
   STRING ( 50 )  szControlType
   STRING ( 50 )  szCtrlCtrlType
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szCheckBoxValue
   STRING ( 1 )   szFlag
   STRING ( 2 )   szSuffix
   STRING ( 10 )  szMaxStringLength
   STRING ( 1 )   szWCP_Edit
   STRING ( 1 )   szhFlag
   STRING ( 1 )   szXSSEncode
   STRING ( 1 )   szRepeatingGroupFlag
   STRING ( 100 ) szRepeatingGroupKey
   STRING ( 256 ) szBlob
   STRING ( 100 ) szUnChecked
   STRING ( 50 )  szWebCtrlType
   STRING ( 1 )  szSurveyGroupFlag
   INTEGER       lEditBox
   INTEGER       lSubtype
   INTEGER       lSubtypeX
   INTEGER       lTemp
   INTEGER       lLen
   INTEGER       lMaxStringLength
   SHORT         nViewNameLth
   SHORT         bResetToPlaceHolder
   SHORT         nRC

   // Handle mapping for the named view (ViewName) that was passed in.
   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.  // not true!!!! // dks 2008.04.04
   FOR EACH vDialog.Control

      // To prevent cross-scripting attacks, we will run what was entered in the editbox field through some code that will
      // convert certain characters so that they are not html compatible (like "<" to "&lt;").  This is only for edit fields
      // where this is specified with XSS control property.
      szXSSEncode = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "XSS Encode"
      IF RESULT >= zCURSOR_SET
         szXSSEncode = "Y"
      END

      szSurveyGroupFlag = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Survey Group"
      IF RESULT >= zCURSOR_SET
         szSurveyGroupFlag = "Y"
      END

      lSubtype = vDialog.Control.Subtype
      lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
      IF lTemp != 0
         // Disabled entries are skipped.
      ELSE
         szCtrlTag = vDialog.Control.Tag

         szControlType = vDialog.ControlDef.Tag
         
         IF szControlType = "GroupBox"
            // Check if this is a repeating group.
            szRepeatingGroupFlag = ""
            IF szWebCtrlType = "RepeatingGroup"
               szRepeatingGroupFlag = "Y"
            ELSE
               SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Repeating Group"
               IF RESULT >= zCURSOR_SET
                  szRepeatingGroupFlag = "Y"
               END
            END
            
            IF szRepeatingGroupFlag = "Y" AND vDialog.CtrlMapView EXISTS AND vDialog.CtrlMapView.Name = ViewName
            
               szViewName = vDialog.CtrlMapView.Name
               // If this is an editable field within a repeating group then we are using vRepeatingGrp instead of
               // the view name.
               IF szRepeatGrpKey != "" 
                  szViewName = "vRepeatingGrp" + szRepeatGrpKey
                  zSearchAndReplace( szViewName, 100, " + ^::^ + strEntityKeyRG", "" )   
               END
   
            
               // We need to do something different if we have a repeating group within a repeating group.
               // Would need a new vRepeatingGrp.
               szWriteBuffer = "      // We are creating a temp view to the grid view so that if there are "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // grids on the same window with the same view we do not mess up the "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // entity positions. "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //szWriteBuffer = "      View vRepeatingGrp" + szCtrlTag + " = " + vDialog.CtrlMapView.Name + ".newView( );"
               szWriteBuffer = "      View vRepeatingGrp" + szCtrlTag + " = " + szViewName + ".newView( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      long   lEntityKeyRG" + szCtrlTag + " = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strEntityKeyRG" + szCtrlTag + " = ^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      csrRC = vRepeatingGrp" + szCtrlTag + ".cursor( ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirst( " + szScopingEntityName + " );"
               ELSE
                  szWriteBuffer = "      csrRC = vRepeatingGrp" + szCtrlTag + ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirstWithinOi( );"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( csrRC.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         lEntityKeyRG" + szCtrlTag + " = " +
                                         "vRepeatingGrp" + szCtrlTag + ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKeyRG" + szCtrlTag + " = Long.toString( lEntityKeyRG" + szCtrlTag + " );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szRepeatingGroupKey = " + ^::^ + strEntityKeyRG" + szCtrlTag 
               //szRepeatGrpKey = "::<%=strEntityKeyRG%>"
            ELSE
               // This is a repeating group but it's not for the current ViewName we have passed in, so ignore.
               szRepeatingGroupFlag = ""
            END
            
         END
         
         // If the current control is a repeating groupbox, then it has mapping, so we need to ignore that case.
         SET CURSOR FIRST vDialog.CtrlMapView WITHIN vDialog.Control
                    WHERE vDialog.CtrlMapView.Name = ViewName
         IF RESULT >= zCURSOR_SET AND szControlType != "GroupBox"

            szViewName = vDialog.CtrlMapView.Name
            // If this is an editable field within a repeating group then we are using vRepeatingGrp instead of
            // the view name.
            IF szRepeatGrpKey != "" 
               szViewName = "vRepeatingGrp" + szRepeatGrpKey
               zSearchAndReplace( szViewName, 100, " + ^::^ + strEntityKeyRG", "" )
            END

            nViewNameLth = zstrlen( szViewName )
            
            IF szControlType = "Text"     OR
               szControlType = "EditBox"  OR
               szControlType = "ComboBox"

               szFlag = "8"   // SetAttribute.. will be by default Context.
            ELSE
               szFlag = "0"   // SetAttribute.. will NOT be by default Context.
            END

            IF szControlType = "EditBox"  OR
               szControlType = "CheckBox" OR
               szControlType = "MLEdit"   OR
               szControlType = "RadioGrp"

               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  IF vDialog.CtrlMapContext EXISTS
                     szContextName = vDialog.CtrlMapContext.Name
                     //If the user specifies a context name then we will use this
                     //and not the default context. KJS 09/03/13 - Not sure we need this szFlag...
                     szFlag = "0"
                  ELSE
                     szContextName = ""
                  END

                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      nRC = " + szViewName + ".cursor( ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 ) // CursorResult.SET"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strMapValue = request.getParameter( ^" + szCtrlTag + "^" + szRepeatGrpKey + " );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  IF szControlType = "EditBox" AND szXSSEncode = "Y"
                     szWriteBuffer = "         strMapValue = ReplaceXSSValues( strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  END
                  
                  // If this is a checkbox, then we want to check the unchecked value if there is one.
                  IF szControlType = "CheckBox" 
   
                     // See if the checkbox has an unchecked value. The checked value is in attrib RadioOrCheckboxValue but we 
                     // don't have an attrib for the unchecked value.
                     lTemp = 256
                     GetBlobFromAttribute( szBlob, lTemp, vDialog, "Control", "CtrlBOI" )
                     lLen = zstrlen( szBlob )
                     lLen = lLen + 2
                     szUnChecked = ""
                     IF lTemp > lLen 
                        ZeidonCopyWithinString( szBlob, 1, lLen, 256 )
                        szUnChecked = szBlob
                        szWriteBuffer = "         // If the checkbox is not checked, then set to the unchecked value."
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if (strMapValue == null |||| strMapValue.isEmpty() )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strMapValue = ^" + szUnChecked + "^;" 
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END
                     
                  END
                  
                  // try
                  szWriteBuffer = "         try"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            if ( webMapping )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                     szCtrlTag + "^, ^^, strMapValue );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            else"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               " + szViewName +
                                                  ".cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                                  "^ ).setAttribute( ^" +
                                                  vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, " +
                                                  "^" + szContextName + "^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  // catch
                  szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            nMapError = -16;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               END
            ELSE
            IF szControlType = "ComboBox"

               nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
               IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                  // This is currently the same as Editbox above.
                  SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                  IF RESULT >= zCURSOR_SET
                     IF vDialog.CtrlMapContext EXISTS
                        szContextName = vDialog.CtrlMapContext.Name
                     ELSE
                        szContextName = ""
                     END

                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag + szRepeatGrpKey
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      nRC = " + szViewName + ".cursor( ^" +
                                                  vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      if ( nRC >= 0 )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue = request.getParameter( ^h" +
                                     szCtrlTag + "^" + szRepeatGrpKey + " );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                     // try
                     szWriteBuffer = "         try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( webMapping )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                        szCtrlTag + "^, ^^, strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               " + szViewName + ".cursor( ^" +
                                                     vDialog.CtrlMapRelatedEntity.Name +
                                                     "^ ).setAttribute( ^" +
                                                     vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, ^" + szContextName + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // end of try/catch
                     szWriteBuffer = "      }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  END
               ELSE
                  // Combobox with Auto Include or Set Position Only
                  // Note that this code is not executed if the view being
                  // passed is for the list mapping, instead of the edit
                  // mapping. Otherwise, the code would be generated twice,
                  // once when this routine is called for the edit view and
                  // once for the list view.
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR PREVIOUS vDialog2.CtrlMap
                  IF RESULT < zCURSOR_SET
                     // We were positioned on the first CtrlMap, which means we
                     // were being called for the edit view.
                     szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag + szRepeatGrpKey
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // Position on second CtrlMap, which is for list mapping Attribute.
                     SET CURSOR NEXT vDialog2.CtrlMap

                     // Position on third CtrlMap, which is for list mapping Entity.
                     // If it is null, the list mapping entity is from the prior CtrlMap.
                     CreateViewFromView( vDialog3, vDialog2 )
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                     ELSE
                        szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                     END

                     // Position on fourth CtrlMap, which is for scoping Entity.
                     SET CURSOR NEXT vDialog3.CtrlMap
                     IF vDialog3.CtrlMapLOD_Entity EXISTS
                        szScopingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                     ELSE
                        szScopingEntityName = ""
                     END

                     DropView( vDialog3 )

                     IF vDialog2.CtrlMapView EXISTS
                        szWriteBuffer = "      " + vDialog2.CtrlMapView.Name + " = " +
                                        "task.getViewByName( ^" + vDialog2.CtrlMapView.Name + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog2.CtrlMapView.Name + " ) )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "      {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        // KJS 06/04/10 - We did not previously have this checkExistenceOfEntity but now with
                        // java, the setPosition will call an exception if there are no entities (the combo box is empty).
                        szWriteBuffer = "         nRC = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                        szListMappingEntityName + "^ ).checkExistenceOfEntity( ).toInt();"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if ( nRC >= 0 )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "            strMapValue = request.getParameter( ^h" + szCtrlTag + "^" + szRepeatGrpKey + " );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            if ( strMapValue != null )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               nRelPos = java.lang.Integer.parseInt( strMapValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                           // For Auto Include, we must decrement nRelPos for blank entry.
                           szWriteBuffer = "            nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        END

                        szWriteBuffer = "               " + vDialog2.CtrlMapView.Name + ".cursor( ^" + szListMappingEntityName + "^ )" +
                                        ".setPosition( nRelPos, ^" + szScopingEntityName + "^ );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         }  // checkExistenceofEntity"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                           //Set Foreign Key
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // Set Foreign Key Code "
                           //Check the existence of the edit mapping entity
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         nRC = " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           IF vDialog2.CtrlMapContext EXISTS
                              szContextName = vDialog2.CtrlMapContext.Name
                           ELSE
                              szContextName = ""
                           END

                           IF vDialog2.CtrlMapER_Domain.MaxStringLth > 254
                              lMaxStringLength = vDialog2.CtrlMapER_Domain.MaxStringLth
                              szMaxStringLength = lMaxStringLength
                           ELSE
                              szMaxStringLength = "254"
                           END

                           szWriteBuffer = "            strMapValue = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                              vDialog2.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                              vDialog2.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                           IF vDialog.CtrlMapContext EXISTS
                              szContextName = vDialog.CtrlMapContext.Name
                           ELSE
                              szContextName = ""
                           END

                           // try
                           szWriteBuffer = "         try"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( webMapping )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                              szCtrlTag + "^, ^^, strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               " + szViewName + ".cursor( ^" +
                              vDialog.CtrlMapRelatedEntity.Name + "^ ).setAttribute( ^" +
                              vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, ^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // catch
                           szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            nMapError = -16;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // end of try/catch
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        END

                        // IF Auto Include
                        IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                           // Auto Include only.
                           szWriteBuffer = " "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // Auto Include Code "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // If the value is ^0^ then the user has selected the null entry, we do not want to do an include."
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         // If there is an entity, we want to exclude it. "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "         if ( !StringUtils.equals( strMapValue, ^0^ ) )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "            nRC = " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                           //Entity, so then we would not want to exclude and include.  Seems like this is only
                           //going to matter if this combo box is in a grid.
                           //KELLY121008
                           szWriteBuffer = "               // Only do the automatic include if this is a different entity"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               strTemp = " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "               if ( !StringUtils.equals( strTemp, " + vDialog2.CtrlMapView.Name +
                                           ".cursor( ^" + vDialog2.CtrlMapRelatedEntity.Name +
                                           "^ ).getStringFromAttribute( ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ))) "

                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^ ).excludeEntity( CursorPosition.NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "                  " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).includeSubobject( " +
                                           vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name +
                                           "^ ), CursorPosition.NEXT );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).includeSubobject( " +
                                           vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                           vDialog2.CtrlMapRelatedEntity.Name +
                                           "^ ), CursorPosition.NEXT );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            nRC = " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            if ( nRC >= 0 )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  " + szViewName + ".cursor( ^" +
                                           vDialog.CtrlMapRelatedEntity.Name +
                                           "^ ).excludeEntity( CursorPosition.NONE );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        END

                        szWriteBuffer = "      }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                     ELSE
                        MessageSend( vDialog, "", "XSL Generation",
                                     "Missing List Mapping.",
                                     zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                     END
                  END

                  DropView( vDialog2 )

               END
            ELSE
            IF szControlType = "ListBox"
               szScopingEntityName = ""
               CreateViewFromView( vDialog2, vDialog )
               SET CURSOR NEXT vDialog2.CtrlMap
               IF vDialog2.CtrlMapLOD_Entity EXISTS
                  szScopingEntityName = vDialog2.CtrlMapLOD_Entity.Name
               END

               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


               // KJS 06/04/10 - We did not previously have this checkExistenceOfEntity but now with
               // java, the setPosition will call an exception if there are no entities (the combo box is empty).
               szWriteBuffer = "      nRC = " + szViewName + ".cursor( ^" +
                               vDialog.CtrlMapLOD_Entity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         strMapValue = request.getParameter( ^h" + szCtrlTag + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( strMapValue != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nRelPos = java.lang.Integer.parseInt( strMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "               " + szViewName + ".cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ )" +
                               ".setPosition( " +
                               "nRelPos, ^" + szScopingEntityName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }  // checkExistenceOfEntity"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
              DropView( vDialog2 )

            ELSE
            IF szControlType = "Calendar"
               SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
               IF RESULT >= zCURSOR_SET
                  szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      nRC = " + szViewName + ".cursor( ^" +
                                         vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nRC >= 0 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strMapValue = request.getParameter( ^" + szCtrlTag + "^" + szRepeatGrpKey + " );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strDateFormat = request.getParameter( ^zDateFormat^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  // try
                  szWriteBuffer = "         try"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            if ( webMapping )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                     szCtrlTag + "^, ^^, strMapValue );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            else"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "               " + szViewName + ".cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, strDateFormat );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  // catch
                  szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            nMapError = -16;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  // end of try/catch
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                  WL_QC( vDialog, lFile, "", "^", 0 )

               END
            ELSE
            IF szControlType = "Grid"

               szCtrlTag = vDialog.Control.Tag
               szWriteBuffer = "      // " + szControlType + ": " + szCtrlTag
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      iTableRowCnt = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // KJS 5/1/08 - Create a temp view to the grid view and loop through that creating the mapping.
               // That way, if there are other grids on the page using the same view, we have not messed up
               // the positioning for their mapping.
               szWriteBuffer = "      // We are creating a temp view to the grid view so that if there are "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // grids on the same window with the same view we do not mess up the "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // entity positions. "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      vGridTmp = " + szViewName + ".newView( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // See if a scoping entity has been specified, and if so, use it.
               lSubtypeX = vDialog.Control.ExtendedStyle
               lSubtypeX = IsFlagSequenceSet( lSubtypeX, zSS_SCOPE_OI )
               IF lSubtypeX = 0
                  CreateViewFromView( vDialog2, vDialog )
                  SET CURSOR NEXT vDialog2.CtrlMap
                  IF vDialog2.CtrlMapLOD_Entity EXISTS
                     szScopingEntityName = "^" + vDialog2.CtrlMapLOD_Entity.Name + "^"
                  ELSE
                     szScopingEntityName = ""
                  END

                  DropView( vDialog2 )
                  szWriteBuffer = "      csrRC = vGridTmp.cursor( ^" +
                           vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirst( " + szScopingEntityName + " );"
               ELSE
                  szWriteBuffer = "      csrRC = vGridTmp.cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setFirstWithinOi( );"
               END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      while ( csrRC.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         lEntityKey = " +
                                         "vGridTmp.cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).getEntityKey( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strEntityKey = Long.toString( lEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         iTableRowCnt++;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               // Process each subcontrol.
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               FOR EACH vDialog.Control

                  szCtrlCtrlType = vDialog.ControlDef.Tag

                  IF szCtrlCtrlType = "GridSubCtl" AND vDialog.CtrlCtrl EXISTS
                     SetViewToSubobject( vDialog, "CtrlCtrl" )
                     bResetToPlaceHolder = 1
                     szCtrlCtrlType = vDialog.ControlDef.Tag
                  ELSE
                     bResetToPlaceHolder = 0
                  END

                  szCtrlTag = vDialog.Control.Tag
                  IF szCtrlCtrlType = "EditBox" OR
                     szCtrlCtrlType = "ComboBox" OR
                     szCtrlCtrlType = "GridEditCtl" OR
                     szCtrlCtrlType = "GridComboCtl"
                     szFlag = "8"   // SetAttribute... will be by default Context.
                  ELSE
                     szFlag = "0"   // SetAttribute... will NOT be by default Context.
                  END

                  IF szCtrlCtrlType = "ComboBox" OR szCtrlCtrlType = "GridComboCtl"
                     //If this is a combobox, then we get our request.GetParameter from the
                     //hidden field (ex: hComboBox1)
                     szhFlag = "h"
                  ELSE
                     szhFlag = ""
                  END

                  //KELLY - Would I want to make an "IF" statement here to check if this control id
                  //is disabled.  If so, I assume I don't want to create any of the mapping code.

                  IF  vDialog.Control.Disabled != "Y"

                  //KJS 7/25/07 - Check if this control should be an edit control
                  SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Edit"
                  IF RESULT >= zCURSOR_SET
                     szWCP_Edit = "Y"
                  ELSE
                     szWCP_Edit = "N"
                  END

                  // If this is an edit box, then set the mapping code.
                  IF vDialog.Control.WebCtrlType = "Edit" OR szWCP_Edit = "Y"

                     lEditBox = 1

                     szContextName = ""
                     SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                     IF RESULT >= zCURSOR_SET
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                           //If the user specifies a context name then we will use this
                           //and not the default context.
                           szFlag = "0"
                        ELSE
                           szContextName = ""
                        END
                     END

                     szWriteBuffer = "         strTag = ^" + szCtrlTag + "::^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // If strMapValue is null, then that means that this row of the grid is being hidden and so
                     // no value was assigned.  If this is the case, then we do not want to process this row so ignore.
                     szWriteBuffer = "         if ( strMapValue != null ) "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         { "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                        lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                        szMaxStringLength = lMaxStringLength
                     ELSE
                        szMaxStringLength = "254"
                     END

                     // try
                     szWriteBuffer = "            try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               if ( webMapping )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  VmlOperation.CreateMessage( task, ^" +
                                                           szCtrlTag + "^, ^^, strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  vGridTmp.cursor( ^" + vDialog.CtrlMapRelatedEntity.Name +
                                                           "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                                           "^, strMapValue, ^" + szContextName + "^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     szWriteBuffer = "            }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "            catch ( InvalidAttributeValueException e )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // KJS 02/27/12 Specifically using strTag...
                     szWriteBuffer = "               VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                  // szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // end of try/catch
                     szWriteBuffer = "      } "
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

                  ELSE
                     lEditBox = 0
                  END

                  IF ( szCtrlCtrlType = "GridCheckCtl" OR szCtrlCtrlType = "CheckBox" ) AND vDialog.Control.Disabled != "Y" //DonC added 7/25/07

                     szWriteBuffer = "         strTag = ^" + szCtrlTag + "^ + strEntityKey;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         strMapValue" + " = request.getParameter( strTag );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                     // See if the checkbox has an unchecked value. The checked value is in attrib RadioOrCheckboxValue but we 
                     // don't have an attrib for the unchecked value.
                     lTemp = 256
                     GetBlobFromAttribute( szBlob, lTemp, vDialog, "Control", "CtrlBOI" )
                     lLen = zstrlen( szBlob )
                     lLen = lLen + 2
                     szUnChecked = ""
                     IF lTemp > lLen 
                        ZeidonCopyWithinString( szBlob, 1, lLen, 256 )
                        szUnChecked = szBlob
                        szWriteBuffer = "         // If the checkbox is not checked, then set to the unchecked value."
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         if (strMapValue == null |||| strMapValue.isEmpty() )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            strMapValue = ^" + szUnChecked + "^;" 
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     END
                     
                     szCheckBoxValue = vDialog.Control.RadioOrCheckboxValue

                     // try
                     szWriteBuffer = "         try"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            if ( webMapping )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                        szCtrlTag + "^, ^^, strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               if ( strMapValue"  + " != null )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^, strMapValue );" //KKKKKKK
                                  //"^, ^" + szCheckBoxValue + "^ );" //KKKKKKK
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "               else"
                     WL_QC( vDialog, lFile, szWriteBuffer, "'", 0 )
                     szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                  vDialog.CtrlMapRelatedEntity.Name +
                                  "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                  "^, ^^ );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // catch
                     szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         {"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "            nMapError = -16;"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     // KJS 02/27/12 Specifically using strTag...
                     szWriteBuffer = "            VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                  // szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "         }"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     // end of try/catch
                  END

                  IF szCtrlCtrlType = "ComboBox" OR
                     szCtrlCtrlType = "GridComboCtl"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END

                        lSubtype = vDialog.Control.Subtype
                        nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
                        IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

                           szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "::^ + strEntityKey;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         if ( strMapValue != null ) "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "         { "
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                           // try
                           szWriteBuffer = "            try"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               if ( webMapping )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  VmlOperation.CreateMessage( task, ^" +
                                                                 szCtrlTag + "^, ^^, strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               else"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^, strMapValue, " +
                                     "^" + szContextName + "^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // catch
                           szWriteBuffer = "            catch ( InvalidAttributeValueException e )"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            {"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "               nMapError = -16;"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // KJS 02/27/12 Specifically using strTag...
                           szWriteBuffer = "               VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                        // szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "            }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           // end of try/catch
                           szWriteBuffer = "         }"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                           // WL_QC( vDialog, lFile, "", "^", 0 )
                        ELSE

                           // Combobox with Auto Include or Set Position Only
                           // Note that this code is not executed if the view being
                           // passed is for the list mapping, instead of the edit
                           // mapping. Otherwise, the code would be generated twice,
                           // once when this routine is called for the edit view and
                           // once for the list view.
                           CreateViewFromView( vDialog2, vDialog )
                           SET CURSOR PREVIOUS vDialog2.CtrlMap
                           IF RESULT < zCURSOR_SET
                              // We were positioned on the first CtrlMap, which means we
                              // were being called for the edit view.
                              szWriteBuffer = "         // " + szControlType + ": " + szCtrlTag
                              WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              // Position on second CtrlMap, which is for list mapping Attribute.
                              SET CURSOR NEXT vDialog2.CtrlMap

                              // Position on third CtrlMap, which is for list mapping Entity.
                              // If it is null, the list mapping entity is from the prior CtrlMap.
                              CreateViewFromView( vDialog3, vDialog2 )
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szListMappingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                              ELSE
                                 szListMappingEntityName = vDialog2.CtrlMapRelatedEntity.Name
                              END

                              // Position on fourth CtrlMap, which is for scoping Entity.
                              SET CURSOR NEXT vDialog3.CtrlMap
                              IF vDialog3.CtrlMapLOD_Entity EXISTS
                                 szScopingEntityName = vDialog3.CtrlMapLOD_Entity.Name
                              ELSE
                                 szScopingEntityName = ""
                              END

                              DropView( vDialog3 )

                              IF vDialog2.CtrlMapView EXISTS
                                 szWriteBuffer = "         " + vDialog2.CtrlMapView.Name + " = " +
                                                 "task.getViewByName( ^" + vDialog2.CtrlMapView.Name + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         if ( VmlOperation.isValid( " + vDialog2.CtrlMapView.Name + " ) )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                              // szWriteBuffer = "      // " + vDialog2.CtrlMapView.Name +
                              //                 ".SetAllSelectStatesForEntity( ^" +
                              //                 vDialog2.CtrlMapRelatedEntity.Name +
                              //                 "^, (short) 0, ^" + szScopingEntityName + "^ );"
                              // WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 // KJS 06/04/10 - We did not previously have this checkExistenceOfEntity but now with
                                 // java, the setPosition will call an exception if there are no entities (the combo box is empty).
                                 szWriteBuffer = "         nRC = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                                 szListMappingEntityName + "^ ).checkExistenceOfEntity( ).toInt();"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         if ( nRC >= 0 )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 szWriteBuffer = "            strTag = ^" + szhFlag + szCtrlTag + "^ + strEntityKey;"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            strMapValue = request.getParameter( strTag );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            if ( strMapValue != null )"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            {"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "               nRelPos = java.lang.Integer.parseInt( strMapValue );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // For Auto Include, we must decrement nRelPos for blank entry.
                                    szWriteBuffer = "                  nRelPos--;    // For Auto Include combos, we need to decrement for the blank entry."
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END
                                 szWriteBuffer = "            " + vDialog2.CtrlMapView.Name+ ".cursor( ^" + szListMappingEntityName + "^ )" +
                                                 ".setPosition( " +
                                                 "nRelPos, ^" + szScopingEntityName + "^ );"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "            }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 szWriteBuffer = "         }  // checkExistenceOfEntity"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                 IF vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056   // IF Set Foreign Key
                                    //Set Foreign Key
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Set Foreign Key Code "
                                    //Check the existence of the edit mapping entity
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = vGridTmp.cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    IF vDialog2.CtrlMapContext EXISTS
                                       szContextName = vDialog2.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    IF vDialog2.CtrlMapER_Domain.MaxStringLth > 254
                                       lMaxStringLength = vDialog2.CtrlMapER_Domain.MaxStringLth
                                       szMaxStringLength = lMaxStringLength
                                    ELSE
                                       szMaxStringLength = "254"
                                    END

                                    szWriteBuffer = "               strMapValue = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                       vDialog2.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" +
                                       vDialog2.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                                    IF vDialog.CtrlMapContext EXISTS
                                       szContextName = vDialog.CtrlMapContext.Name
                                    ELSE
                                       szContextName = ""
                                    END

                                    // try
                                    szWriteBuffer = "         try"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( webMapping )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                                       szCtrlTag + "^, ^^, strMapValue );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               else"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                       vDialog.CtrlMapRelatedEntity.Name + "^ ).setAttribute( ^" +
                                       vDialog.CtrlMapER_Attribute.Name + "^, strMapValue, ^" + szContextName + "^ );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    // catch
                                    szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nMapError = -16;"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    // KJS 02/27/12 Specifically using strTag...
                                    szWriteBuffer = "            VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                                 // szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "         }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    // end of try/catch
                                    szWriteBuffer = "      }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
                                    // Auto Include only.
                                    szWriteBuffer = " "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            // Auto Include Code "
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            nRC = " + vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            if ( nRC >= 0 )"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    //KJS 12/11/07 - Adding code to check if we are already positioned on the correct
                                    //Entity, so then we would not want to exclude and include.  Seems like this is only
                                    //going to matter if this combo box is in a grid.
                                    szWriteBuffer = "               //Only do the automatic include if this is a different entity"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               strTemp = vGridTmp.cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).getStringFromAttribute( ^" + vDialog.CtrlMapER_Attribute.Name + "^ );"

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                                    szWriteBuffer = "               if ( !StringUtils.equals( strTemp, " + vDialog2.CtrlMapView.Name +
                                                    ".cursor( ^" + vDialog2.CtrlMapRelatedEntity.Name +
                                                    "^ ).getStringFromAttribute( ^" + vDialog2.CtrlMapER_Attribute.Name + "^ ))) "

                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               {"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name +
                                                    "^ ).excludeEntity( CursorPosition.NONE );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                                    vDialog.CtrlMapRelatedEntity.Name + "^ ).includeSubobject( " +
                                                    vDialog2.CtrlMapView.Name + ".cursor( ^" +
                                                    vDialog2.CtrlMapRelatedEntity.Name +
                                                    "^), CursorPostion.NEXT );"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "               }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                    szWriteBuffer = "            }"
                                    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                                 END

                                 szWriteBuffer = "         }"
                                 WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                              ELSE  //IF vDialog2.CtrlMapView EXISTS
                                 MessageSend( vDialog, "", "XSL Generation",
                                              "Missing List Mapping.",
                                              zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
                              END  //IF vDialog2.CtrlMapView EXISTS
                           END  //IF RESULT < zCURSOR_SET

                        END
                     END
                  END

                  IF szCtrlCtrlType = "GridEditBox" OR
                     szCtrlCtrlType = "Calendar"

                     lSubtype = vDialog.Control.Subtype
                     lTemp = IsFlagSequenceSet( lSubtype, zCONTROL_DISABLED )
                     IF lTemp = 0
                        IF vDialog.CtrlMapContext EXISTS
                           szContextName = vDialog.CtrlMapContext.Name
                        ELSE
                           szContextName = ""
                        END

                        szWriteBuffer = "         strTag = ^" + szhFlag + szCtrlTag + "::^ + strEntityKey;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         strMapValue = request.getParameter( strTag );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "         if ( strMapValue != null ) "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "         { "
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


                        // try
                        szWriteBuffer = "            try"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               if ( webMapping )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "                  VmlOperation.CreateMessage( task, ^" +
                                                              szCtrlTag + "^, ^^, strMapValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               else"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        IF szCtrlCtrlType = "Calendar"
                           szWriteBuffer = "                  strDateFormat = request.getParameter( ^zDateFormat^ );"
                           WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                           szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^, strMapValue, strDateFormat );"
                        ELSE
                           szWriteBuffer = "                  vGridTmp.cursor( ^" +
                                     vDialog.CtrlMapRelatedEntity.Name +
                                     "^ ).setAttribute( ^" + vDialog.CtrlMapER_Attribute.Name +
                                     "^, strMapValue, " +
                                     "^" + szContextName + "^ );"
                        END
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // catch
                        szWriteBuffer = "            catch ( InvalidAttributeValueException e )"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            {"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "               nMapError = -16;"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // KJS 02/27/12 Specifically using strTag...
                        szWriteBuffer = "               VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
                     // szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        szWriteBuffer = "            }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                        // end of try/catch
                        szWriteBuffer = "         }"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
                     // WL_QC( vDialog, lFile, "", "^", 0 )
                     END
                  END
                  END //IF vDialog.Control.Disabled != "Y"

                  IF bResetToPlaceHolder = 1
                     ResetViewFromSubobject( vDialog )
                  END
               END

               ResetViewFromSubobject( vDialog )

            // IF lSubtypeX = 0  now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
                  szWriteBuffer = "         csrRC = " +
                                  "vGridTmp.cursor( ^" +
                                  vDialog.CtrlMapLOD_Entity.Name +
                                  "^ ).setNextContinue( );"
                                  //"^ ).setNext( " + szScopingEntityName + " );"
            // ELSE
            //    szWriteBuffer = "         nRC = " +
            //                    "vGridTmp.cursor( ^" + vDialog.CtrlMapLOD_Entity.Name + "^ ).setNextWithinOi( );"
            // END

               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "      vGridTmp.drop( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
            IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y"
               // This is the survey group. Creating input mapping for this...
               // **********************************************************
               szWriteBuffer = "      String strQuestionCount;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionID=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionType=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionName=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionAnswer=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strQuestionChoiceID=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      String strAllowComment=^^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strQuestionCount = request.getParameter( ^SurveyQuestionCount^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      int iQuestionCount=Integer.parseInt(strQuestionCount);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      for (int i=1; i<=iQuestionCount; i++)"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^QuestionID^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strQuestionID = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^QuestionType^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strQuestionType= request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strTemp = ^AllowComment^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strAllowComment= request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* strQuestionType: ^, strQuestionType );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* strQuestionID:   ^, strQuestionID );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + szViewName + "cursor(^SurveyQuestion^).setFirst( ^ID^, strQuestionID, ^SurveyQuestionaire^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strQuestionType.equals(^Text^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Text   ^, ^^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strTemp = ^txtAnswer^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               nRC = " + szViewName + ".cursor( ^SurveyQuestion^).setAttribute( ^wTextAnswer^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            else if ( strQuestionType.equals(^Yes/No^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              strTemp = ^chkAnswer^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strQuestionType.equals(^Multiple Choice Single Response^) || strQuestionType.equals(^Multiple Choice Multiple Response^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              if ( strQuestionType.equals(^Multiple Choice Single Response^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // radio buttons"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  strTemp = ^chkAnswer^ + i;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Radio Control:   ^, strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Radio Answer:   ^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 nRC = " + szViewName + ".cursor( ^SurveyQuestion^).setAttribute( ^wTextAnswer^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "              }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // check boxes"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Checkbox   ^, ^^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                nRC = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^ ).setFirst( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 while ( nRC == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strQuestionChoiceID = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^ ).getStringFromAttribute( ^ID^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strTemp = ^chkAnswer^ + strQuestionChoiceID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Checkbox Control:   ^, strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         task.log().info( ^******* Checkbox Answer:   ^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    //if ( !strQuestionAnswer.equals(^^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    if ( strQuestionAnswer != null )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       nRC = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^).setAttribute( ^wSelectedAnswer^, strQuestionChoiceID );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
              szWriteBuffer = "                      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       nRC = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^).setAttribute( ^wSelectedAnswer^, ^^);"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                       "
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    nRC = " + szViewName + ".cursor( ^SurveyMultiChoiceOption^ ).setNextContinue( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                    task.log().info( ^DoInputMapping setNextContinue RC: ^, nRC );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                 }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // Map Comment if it exists
               szWriteBuffer = "            if ( strAllowComment.equals(^Y^) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strTemp = ^txtComment^ + strQuestionID;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strQuestionAnswer = request.getParameter( strTemp );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               nRC = " + szViewName + ".cursor( ^SurveyQuestion^).setAttribute( ^wComment^, strQuestionAnswer );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // *************************************************************
            END // IF szControlType = "GroupBox" AND szSurveyGroupFlag = "Y"

            END // IF szControlType = "Grid"
            END // IF szControlType = "Calendar"
            END // IF szControlType = "ListBox"
            END // IF szControlType = "ComboBox"
            END // IF szControlType = "EditBox" OR "CheckBox" OR "MLEdit" OR "RadioGrp"
         ELSE
            IF vDialog.CtrlCtrl EXISTS
               OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
               SetViewToSubobject( vDialog, "CtrlCtrl" )
               IF szRepeatingGroupKey != ""
                  GenJSPJ_InputMapRecurs( vDialog, ViewName, lFile, szWriteBuffer, lTableRowCnt, szRepeatingGroupKey )
                  szRepeatingGroupKey = ""
               ELSE 
                  GenJSPJ_InputMapRecurs( vDialog, ViewName, lFile, szWriteBuffer, lTableRowCnt, szRepeatGrpKey )
               END
               ResetViewFromSubobject( vDialog )
               
               IF szRepeatingGroupFlag = "Y"
               
                  szViewName = "vRepeatingGrp" + szCtrlTag
                  szWriteBuffer = "         csrRC = " + szViewName +
                                  ".cursor( ^" +
                                  vDialog.CtrlMapLOD_Entity.Name +
                                  "^ ).setNextContinue( );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      } // End of Repeating Group loop (" + szCtrlTag + ")"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END  // IF RESULT >= zCURSOR_SET AND szControlType != "GroupBox"
      END  // IF Disabled entries are skipped
   END  // FOR EACH vDialog.Control
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_OutputMapRecurs
//
//  Comboboxes and listboxes need to do some mapping before the action
//  is called, so create separate javascript functions for actions that
//  are called from comboboxes or listboxes.
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_OutputMapRecurs( VIEW vDialog BASED ON LOD TZWDLGSO,
                         INTEGER          lFile,
                         STRING ( 10000 ) szWriteBuffer,
                         STRING ( 255 )   szFormName,
                         STRING ( 100 )   szRepeatGrpKey )

   VIEW          vDialogParent
   STRING ( 50 ) szControlType
   STRING ( 50 ) szCtrlTag
   STRING ( 50 ) szActionName
   STRING ( 50 ) szWebCtrlType
   STRING ( 10 ) szSelectFunction
   STRING ( 10000 ) szJavaScript
   STRING ( 1 )  szCodeCreated
   STRING ( 1 )  szRepeatingGroupFlag
   SHORT         nGridParent
   INTEGER       lSubtype
   SHORT         nRC

   // "ONCHANGE" FUNCTION GENERATION FOR COMBOBOX CONTROLS

   // Identify if this Control is inside a Grid by setting nGridParent.
   // Note by DonC on 9/7/07: I don't see why the following code is necessary as we know the
   // combobox is in a Grid because its type is "GridComboCtl".
   /*nGridParent = 0
   nRC = 0
   CreateViewFromView( vDialogParent, vDialog )
   LOOP WHILE nGridParent = 0 AND nRC = 0
      nRC = ResetViewFromSubobject( vDialogParent )
      IF nRC = 0 AND vDialogParent.ControlDef EXISTS
         szControlType = vDialogParent.ControlDef.Tag
         IF szControlType = "Grid"
            nGridParent = 1
         END
      END
   END
   DropView( vDialogParent )*/

   // Note that Control.SubType is an integer composed of multiple values,
   // but is always less than 12,000 for Domain Combos.
   FOR EACH vDialog.Control

      szControlType = vDialog.ControlDef.Tag
      szCtrlTag = vDialog.Control.Tag
      
      IF szControlType = "GroupBox" AND szRepeatGrpKey = ""
         szRepeatingGroupFlag = ""
         IF szWebCtrlType = "RepeatingGroup"
            szRepeatingGroupFlag = "Y"
         ELSE
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Repeating Group"
            IF RESULT >= zCURSOR_SET
               szRepeatingGroupFlag = "Y"
            END
         END
         //szRepeatGrpKey = "Y"
      END      

      // Set up Action data for combo boxes.
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectFunction = "OnChange"
         ELSE
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectFunction = "OnChange"
      END

      // Process Combobox entries
      IF szControlType = "ComboBox" OR szControlType = "GridComboCtl"
         // The function statements for Combobox entries are primarily driven by:
         // 1. Whether the Combobox is Domain or select entity type.
         // 2. Whether there is an Action triggered by the combobox.
         // 3. Whether the Combobox is part of a Grid.

         //Is this combobox in a grid?  You'd think you could just tell by the name "GridComboCtl but
         //I can create a combobox outside the listbox and then move it into the grid and the type will
         //still be "ComboBox".
         nGridParent = 0
         nRC = 0
         CreateViewFromView( vDialogParent, vDialog )
         nRC = ResetViewFromSubobject( vDialogParent )
         IF nRC = 0 AND vDialogParent.ControlDef EXISTS
            szControlType = vDialogParent.ControlDef.Tag
            IF szControlType = "Grid"
               nGridParent = 1
            END
         END
         DropView( vDialogParent )

         //KJS 12/7/07 - We are going to add autoinclude and set foreign key comboboxes.
         //so we will need to change the below statements.

         // function statement
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0 AND szRepeatGrpKey = ""
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control, strEntityKey )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0 AND szRepeatGrpKey = ""
               // Select Combobox NOT in Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Select Combobox IN Grid.
               szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( hControl, Control )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   isWindowClosing = false;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // If Action is SelectEnd, generate code to skip submit on tab.
         IF vDialog.EventAct EXISTS AND vDialog.Event.Type = 256
            szWriteBuffer = "   if (isChangedComboBox(document." + szFormName + "." + szCtrlTag + ") == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      return;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         END

         // ACTION EXISTS
         lSubtype = vDialog.Control.Subtype
         nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
         IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox
            // Domain Combobox
            IF nGridParent = 0 AND szRepeatGrpKey = ""
               // Domain Combobox NOT in Grid.
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               // Domain Combobox IN Grid.
               szWriteBuffer = "      document.getElementById( hControl ).value = Control.value;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            // Select type Combobox
            IF nGridParent = 0 AND szRepeatGrpKey = ""
               //NOT in Grid
               szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                               "document." + szFormName + "." + szCtrlTag + ".selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            ELSE
               //IN Grid
               szWriteBuffer = "      document.getElementById( hControl ).value = Control.selectedIndex;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         // Action Processing
         IF vDialog.EventAct EXISTS

            // KJS 08/14/2009 - There may be times when we simply want to run the javascript code without submitting
            // this form.  The only problem is if this combobox is an auto include or a "set foreign key" then we have
            // to submit to allow this to happen.  If the combobox is not one of those and the action type is
            // zWAB_StayOnWindow and there is javascript code, then do not want to do the submit.

            szCodeCreated = "N"

            szJavaScript = vDialog.EventAct.WebJavaScript

            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)
               // "Auto include" or "set foreign key" combo box.  Do nothing.
            ELSE
               // Not an "auto include" or "set foreign key" combobox and there is javascript code for
               // the action.
               IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""
                     // Create only the javascript code without the form submit.

                  szCodeCreated = "Y"
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END

            // The code for szWAB_StayOnWindow with Javascript code was not created so build this
            // the normal way with the action .submit.
            IF szCodeCreated = "N"
               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               //KJS 11/16/2007 - We want to insert any javascript code that the
               //user has entered for this action.  This will be put before the action
               //generated code for submitting.  If the user wants to skip the
               //generated code, the inserted code should end with a return.
               IF  szJavaScript != ""
                  szWriteBuffer = "      // Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = szJavaScript
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      // END of Javascript code entered by user."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END

               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         ELSE
            //There is no action but because this is an automatic include or a
            //set foreign key combobox, there should be an action and a submit.
            //We will call a generic one
            IF (vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252)  OR
               (vDialog.Control.Subtype >= 36864 AND vDialog.Control.Subtype <= 45056)

               szActionName = "ZEIDON_ComboBoxSubmit"
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      ELSE
      IF szControlType = "ListBox"

         //szWriteBuffer = "function " + szCtrlTag + szSelectFunction + "( )"
         IF szRepeatGrpKey = "" 
            szWriteBuffer = "function " + szCtrlTag +  "OnClick( )"
         ELSE
            szWriteBuffer = "function " + szCtrlTag +  "OnClick( hControl, Control )"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "{"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // _IsDocDisabled code.
         szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         //document.getElementById( hControl ).value
         
         IF szRepeatGrpKey = "" 
            szWriteBuffer = "      document." + szFormName + ".h" + szCtrlTag + ".value = " +
                            "document." + szFormName + "." + szCtrlTag + ".selectedIndex"
         ELSE
            szWriteBuffer = "      document.getElementById( hControl ).value = Control.selectedIndex;"
         END                         
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Action Processing
         IF vDialog.EventAct EXISTS

            szJavaScript = vDialog.EventAct.WebJavaScript

            IF vDialog.EventAct.Type = zWAB_StayOnWindow AND szJavaScript != ""

               szWriteBuffer = "      // Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // END of Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            ELSE

               // Only generate the DisableFormElements statement if there is an Action tied to the combobox.
               szWriteBuffer = "      _DisableFormElements( true );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szActionName = vDialog.EventAct.Tag
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      document." + szFormName + ".submit( );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END
         END

         szWriteBuffer = "   }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "}"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      ELSE
         // This is not a combobox, so continue processing subobjects.
         IF vDialog.CtrlCtrl EXISTS

            SetViewToSubobject( vDialog, "CtrlCtrl" )
            IF szRepeatingGroupFlag = "Y"
               GenJSPJ_OutputMapRecurs( vDialog, lFile, szWriteBuffer, szFormName, szRepeatingGroupFlag )
            ELSE 
               GenJSPJ_OutputMapRecurs( vDialog, lFile, szWriteBuffer, szFormName, szRepeatGrpKey )
            END
            ResetViewFromSubobject( vDialog )

         END
      END  // End of checking if this is a listbox
      END  // End of checking if this is a combobox

   END // FOR EACH vDialog.Control
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_Action
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_Action( VIEW vDialog     BASED ON LOD TZWDLGSO,
                VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                INTEGER          lFile,
                STRING ( 10000 ) szWriteBuffer,
                STRING ( 255 )   szFormName,
                STRING ( 34 )    szActionName,
                INTEGER          lTraceLevel )

   VIEW vLPLR       BASED ON LOD TZCMLPLO
   VIEW vDialogTemp BASED ON LOD TZWDLGSO
   VIEW vDialogCtrl BASED ON LOD TZWDLGSO
   STRING ( 10000 ) szJavaScript
   STRING ( 32 )    szJavaScriptLocation
   STRING ( 64 )    szSystemIniApplName
   STRING ( 32 )    szViewName
   STRING ( 32 )    szEntityName
   STRING ( 32 )    szEntityNameR
   STRING ( 32 )    szContextName
   STRING ( 32 )    szDlgTagRoot
   STRING ( 32 )    szWndTagRoot
   STRING ( 32 )    szCtrlTag
   STRING ( 32 )    szDlgTag
// STRING ( 32 )    szWndTag
   STRING ( 64 )    szOperName
   STRING ( 32 )    szDownloadViewName
   STRING ( 32 )    szUploadViewName
   STRING ( 64 )    szWAB
   STRING ( 10 )    szMaxStringLength
   STRING ( 50 )    szPrivateKey
   STRING ( 50 )    szPublicKey
   STRING ( 1 )     InsertBlankFlag
   STRING ( 1 )     szCommentAdded
   STRING ( 1 )     szDialogClassCreated
   STRING ( 1 )     szUploadTransferFileFlag
   STRING ( 1 )     szPosDataCreated
   STRING ( 1 )     szWebRedirection
   STRING ( 1 )     szRepeatingGroupFlag
   INTEGER          lControl
   INTEGER          lMaxStringLength
   INTEGER          lActionType
   SHORT            nViewNameLth
   SHORT            nGridParent
   SHORT            nRC

   InsertBlankFlag = "N"

   szWebRedirection = ""
   GetViewByName( vLPLR, "TaskLPLR", vDialog, zLEVEL_TASK )
   szSystemIniApplName = "[App." + vLPLR.LPLR.Name + "]"
   SysReadZeidonIni( -1, szSystemIniApplName, "WebRedirection", szWebRedirection )

   szWriteBuffer = "   while ( bDone == false && StringUtils.equals( strActionToProcess, ^" + szActionName + "^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      bDone = true;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      VmlOperation.SetZeidonSessionAttribute( session, task, ^" + szFormName + "^, strActionToProcess );"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szDialogClassCreated = "N"
   szDlgTagRoot = vDialogRoot.Dialog.Tag
   szWndTagRoot = vDialogRoot.Window.Tag
   szJavaScript = vDialog.Action.WebJavaScript
   szJavaScriptLocation = vDialog.Action.WebJavaScriptLocation

   IF szJavaScript != "" AND szJavaScriptLocation = "Pre-Mapping"
      szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

//**********************************

   // KJS 11/05/09
   // If we unregister zeidon at the end of building this window, then when the user clicks an action,
   // we need to call any Prebuild/Posbuild operations (that would build objects used on this page) before we
   // call the action selected.
   IF vDialogRoot.Window.WEB_UnregisterZeidonWindow = "Y"
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      szCommentAdded = "N"
      FOR EACH vDialogTemp.Action
         FOR EACH vDialogTemp.ActWndEvent
            IF vDialogTemp.ActWndEvent.Type = 1 OR vDialogTemp.ActWndEvent.Type = 2

               IF vDialogTemp.ActOper EXISTS

                  // Don't want to add this comment twice if there is an operation for both prebuild and postbuild.
                  IF szCommentAdded = "N"
                     szWriteBuffer = "      // Prebuild/Postbuild Operations."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // These are called because we Unregister Zeidon when this page is finished loading, so"
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szWriteBuffer = "      // these operations need to be called before any action code (for recreating objects etc)."
                     WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                     szCommentAdded = "Y"
                  END

                  // In order to call a dialog operation we need to create an instance of the dialog class.  We only want to do this once.
                  IF szDialogClassCreated = "N"
                     IF szDlgTagRoot != vDialogTemp.Dialog.Tag
                        szWriteBuffer = "      " +  vDialogTemp.Dialog.Tag + "_Dialog " + vDialogTemp.Dialog.Tag + " = new " +
                                        vDialogTemp.Dialog.Tag + "_Dialog( vKZXMLPGO );"
                        WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                        szDialogClassCreated = "Y"
                     END
                  END
                  
                  szWriteBuffer = "      try"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         nOptRC = " + vDialogTemp.Dialog.Tag + "." + vDialogTemp.ActOper.Name + "( new zVIEW( vKZXMLPGO ) );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      catch (Exception e)"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         // Set the error return code."
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         nOptRC = 2;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         strVMLError = ^<br><br>*** Error running Operation " + vDialogTemp.ActOper.Name + ": ^ + e.getMessage();"     
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         task.log().info( strVMLError );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

                  //szWriteBuffer = "      nOptRC = " + vDialogTemp.Dialog.Tag + "." + vDialogTemp.ActOper.Name + "( new zVIEW( vKZXMLPGO ) );"
                  //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      if ( nOptRC == 2 )"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      {"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         session.setAttribute( ^ZeidonError^, ^Y^ );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         break;"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "      }"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END
      END
      DropView ( vDialogTemp )

   END

//***********************************

   // Keep position on the Control that triggers the Action, if it exists.
   CreateViewFromView( vDialogCtrl, vDialog )
   NAME VIEW vDialogCtrl "vDialogCtrl"
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogCtrl, "EventAct", "Tag", lControl, szActionName, "", "", 0, "Window", "" )
   IF nRC < zCURSOR_SET
      DropView( vDialogCtrl )
      vDialogCtrl = 0
   END

   lActionType = vDialog.Action.Type
   IF lActionType = zWAB_StayOnWindow OR
      lActionType = zWAB_StayOnWindowWithRefresh OR
      lActionType = zWAB_StayOnWindowWebRefresh
      szWAB = "zWAB_StayOnWindowWithRefresh"
   ELSE
      IF lActionType = zWAB_StartModelessSubwindow OR
         lActionType = zWAB_StartModalSubwindow
         szWAB = "zWAB_StartModalSubwindow"
      ELSE
         IF lActionType = zWAB_ReplaceWindowWithModelessWindow OR
            lActionType = zWAB_ReplaceWindowWithModalWindow
            szWAB = "zWAB_ReplaceWindowWithModalWindow"
         ELSE
            IF lActionType = zWAB_ReturnToParent OR
               lActionType = zWAB_ReturnToParentWithRefresh
               szWAB = "zWAB_ReturnToParent"
            ELSE
               IF lActionType = zWAB_StartTopWindow
                  szWAB = "zWAB_StartTopWindow"
               ELSE
                  IF lActionType = zWAB_ResetTopWindow
                     szWAB = "zWAB_ResetTopWindow"
                  ELSE
                     szWAB = ""
                  END
               END
            END
         END
      END
   END

   IF lActionType = zWAB_StartBrowserHTML_Page
      // KJS 02/09/2012 - I'm not sure what this is doing... does it even work?
      // Causing error in JOE so I am commenting out for now.
      szWriteBuffer = "      strURL = task.MakeWebFileName( 0 ) + ^.html^;"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "      task.dropName( strURL );"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      IF lActionType = zWAB_ProcessDownloadFile
         // Download File constants
         szWriteBuffer = "      String sDownloadFile = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sSourceFileNameOnly = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      String sExtension = null;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int l;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      int x;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Download File mapping view: Mapping must be specified for download processing.
         IF vDialogCtrl = 0
            MessageSend( vDialog, "", "Download File Generation",
                                     "The Control with 'Download File' action could not be located.",
                                     zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         ELSE
            IF vDialogCtrl.CtrlMapER_Attribute DOES NOT EXIST
               MessageSend( vDialog, "", "Download File Generation",
                                        "The Control with 'Download File' action must specify mapping for the source file name.",
                                        zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            ELSE
               szDownloadViewName = vDialogCtrl.CtrlMapView.Name
               szWriteBuffer = "      View " + szDownloadViewName + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END
         END
      END
   END

   // We need to determine if this Action is on a Group for File Transfer to Server, because we will not
   // generate the call to DoInputMapping in that case.
   szUploadTransferFileFlag = ""
   IF vDialogCtrl > 0
      CreateViewFromView( vDialogTemp, vDialogCtrl )
      ResetViewFromSubobject( vDialogTemp )
      SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "File Transfer to Server"
      IF RESULT >= zCURSOR_SET
         szUploadTransferFileFlag = "Y"
      END
      DropView( vDialogTemp )
   END

   // If this Action is for an Upload to Server File Transfer, we won't do normal input mapping, but we will map in the full target file name so
   // that we can process it, since we may not know the suffix from the source or even the file name from the source.
   IF szUploadTransferFileFlag = "Y"

      //If there is mapping on the edit ("file") control, we want to put the
      //filename that is being uploaded into that mapping.

      CreateViewFromView( vDialogTemp, vDialogCtrl )
      //I wanted to do the "SET CURSOR..." but because Control doesn't really have a parent
      //the c code that gets generated is only looking for ControlDef under Control (not all controls) and so
      //it is not finding it.
      //SET CURSOR FIRST vDialogTemp.Control WHERE vDialogTemp.ControlDef.Tag = "EditBox"
      FOR EACH vDialogTemp.Control

         IF vDialogTemp.ControlDef.Tag = "EditBox"
                                        //256
           //Get the mapping
            SET CURSOR FIRST vDialogTemp.CtrlMapLOD_Attribute WITHIN vDialogTemp.Control
            IF RESULT >= zCURSOR_SET
               szUploadViewName = vDialogTemp.CtrlMapView.Name
               szWriteBuffer = "      View " + szUploadViewName + ";"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      " + vDialogTemp.CtrlMapView.Name + " = " +
                               "task.getViewByName( ^" + vDialogTemp.CtrlMapView.Name + "^ );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialogTemp.CtrlMapView.Name + " ) == false )"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      else"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nRC = " + vDialogTemp.CtrlMapView.Name + ".cursor( ^" +
                               vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         if ( nRC >= 0 )"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )


               // try
               szWriteBuffer = "         try"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( webMapping )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               VmlOperation.CreateMessage( task, ^" +
                                                  szCtrlTag + "^, ^^, strMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               " +
                      vDialogTemp.CtrlMapView.Name +
                      ".cursor( ^," + vDialogTemp.CtrlMapRelatedEntity.Name + "^ ).setAttribute( ^" +
                      "^, ^" +
                      vDialogTemp.CtrlMapER_Attribute.Name + "^, strInputFileName );"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // catch
               szWriteBuffer = "         catch ( InvalidAttributeValueException e )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            nMapError = -16;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // KJS 02/27/12 Specifically using strTag...
               szWriteBuffer = "            VmlOperation.CreateMessage( task, strTag, e.getReason( ), strMapValue );"
            // szWriteBuffer = "            VmlOperation.CreateMessage( task, ^" + szCtrlTag + "^, e.getReason( ), strMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // end of try/catch

               szWriteBuffer = "      }"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "   }"
               WL_QC( vDialogTemp, lFile, szWriteBuffer, "^", 0 )

            END
         END
      END
      DropView( vDialogTemp )

   ELSE
      IF lActionType = zWAB_StayOnWindowWebRefresh
         // DKS 2011.09.15 - We want to insert any java code that the
         // user has entered for this particular action at this point.
         IF szJavaScript != "" AND szJavaScriptLocation = ""
            szWriteBuffer = "   // Javascript code entered by user."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = szJavaScript
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // END of Javascript code entered by user."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END


      // Input Mapping Option
      IF vDialog.Action.NoMap != "Y"
         szWriteBuffer = "      // Input Mapping"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      nRC = DoInputMapping( request, session, application, false );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nRC < 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         break;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // Check if this is an action for reCAPTCHA.  If so, add the code...
   IF lActionType = 35 OR lActionType = 55
      // We need to get the control for this action so we can retrieve the private and public keys.
      CreateViewFromView( vDialogTemp, vDialog )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      szCtrlTag = "reCAPTCHA"
      IF SetEntityCursor( vDialogTemp, "WebControlProperty", "Name", lControl,
                          szCtrlTag, "", "", 0, "Window", "" ) >= zCURSOR_SET
         szPublicKey = vDialogTemp.Control.WebreCAPTCHAPublicKey
         szPrivateKey = vDialogTemp.Control.WebreCAPTCHAPrivateKey

      END
      DropView( vDialogTemp )

      // create recaptcha without <noscript> tags
      szWriteBuffer = "      ReCaptcha captcha = ReCaptchaFactory.newReCaptcha( ^" + szPublicKey + "^, ^" + szPrivateKey + "^, false);"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      ReCaptchaResponse response2 = captcha.checkAnswer( request.getRemoteAddr( ), request.getParameter( ^recaptcha_challenge_field^ ), request.getParameter( ^recaptcha_response_field^ ) );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = ""
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if (response2.isValid( ))"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).info( ^reCAPTCHA Success^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // The user has not entered in the correct response, do not go further."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorTitle = ^INCORRECT RECAPTCHA^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMsg = ^You typed the reCaptcha image incorrectly.  Please try again.^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // No redirection, we are staying on this page."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 0;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

   //KJS 11/15/07 - If there is a button or hottext on a grid, then we should position on the correct
   //entity whether or not there is an operation.

   //We don't want to create the code to position on the correct
   //list entity twice.  So keep track...
   szPosDataCreated = "N"

   //Loop through each ActCtrl to see if there is a button or hot text
   //on a grid that calls this action.  If so, then we need to
   //get position on the correct item in the list.  This is the
   //code to set position.  If there is more than one button/hottext
   //in this list that calls the same action, make sure we don't
   //create this code twice.
   FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

      szCtrlTag = vDialog.ActCtrl.Tag
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      NAME VIEW vDialogTemp "vDialogTemp"
     
      // KJS 11/08/12 - Used to only have to do the following for grid but now need to do this
      // for any control within a repeating group that has an action...
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      IF SetEntityCursor( vDialogTemp, "Control", "Tag", lControl,
                          szCtrlTag, "", "", 0,
                          "Window", "" ) >= zCURSOR_SET 

         // Identify if this Control is inside a Grid. Or if this control is inside a repeating group (or maybe both).
         nRC = 0
         nGridParent = 0
         // For correct setEntityKey placement later, we need to know if this action is on a repeating group (even if it's within a grid). Because of this
         // we need to keep reseting the view from subobject because we could be down several groups.
         LOOP WHILE nRC = 0 AND ( nGridParent = 0 OR szRepeatingGroupFlag = "" )
            nRC = ResetViewFromSubobject( vDialogTemp )
            IF nRC = 0 AND vDialogTemp.ControlDef EXISTS
               IF vDialogTemp.ControlDef.Tag = "GroupBox"
                  szRepeatingGroupFlag = ""
                  IF vDialogTemp.Control.WebCtrlType = "RepeatingGroup"
                     szRepeatingGroupFlag = "Y"
                  ELSE
                     SET CURSOR FIRST vDialogTemp.WebControlProperty WHERE vDialogTemp.WebControlProperty.Name = "Repeating Group"
                     IF RESULT >= zCURSOR_SET
                        szRepeatingGroupFlag = "Y"
                        // KJS 09/23/13 - Try getting the view for this
                        IF vDialogTemp.CtrlMapView EXISTS AND
                           vDialogTemp.CtrlMapLOD_Entity EXISTS
                           
                           szEntityNameR = vDialogTemp.CtrlMapLOD_Entity.Name
                        END
                        
                     END
                  END
               END
               IF vDialogTemp.ControlDef.Tag = "Grid" OR szRepeatingGroupFlag = "Y"
                  // If the parent is a grid, then get the View and Entity now (we might be reseting the subobject and lose
                  // our position on the grid) so it can be used further down.
                  IF vDialogTemp.CtrlMapView EXISTS AND
                     vDialogTemp.CtrlMapLOD_Entity EXISTS AND nGridParent = 0
                     szViewName = vDialogTemp.CtrlMapView.Name
                     szEntityName = vDialogTemp.CtrlMapLOD_Entity.Name
                     SET CURSOR NEXT vDialogTemp.CgtrlMapLOD_Entity
                     IF RESULT >= zCURSOR_SET
                        szScopingName = vDialogTemp.CtrlMapLOD_Entity.Name
                     END
                  END
                  // The parent of the this control is a Grid, so indicate for later.
                  nGridParent = 1
               END
            END
         END

         //If we successfully reset from the subcontrols and we are on a grid.
         IF nGridParent = 1
         
            // Because we are going to be looking again later in the generation process at actions and whether or not
            // they are inside a grid or repeating group, set a flag now so we don't have to do this later.
            vDialog.Action.ParentIsGridOrGrp = "Y"

            // szPosDataCreated is just to make sure we don't create this code twice.
            IF szPosDataCreated = "N"

               szPosDataCreated = "Y"

               szWriteBuffer = "      // Position on the entity that was selected in the grid."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // We have a "select button" or HotText in a list, so we need to set
               // up the code to set position on the proper list item.
               //szViewName = vDialogTemp.CtrlMapView.Name
               //szEntityName = vDialogTemp.CtrlMapLOD_Entity.Name
               szWriteBuffer = "      String strEntityKey = (String) request.getParameter( ^zTableRowSelect^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               //If this action is for the download button or for the upload button, we may have already created
               //a view for this view name.  Don't create the view unless it's for a different view name.
               IF  ( szViewName != szDownloadViewName AND szViewName != szUploadViewName )
                  szWriteBuffer = "      View " + szViewName + ";"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

               szWriteBuffer = "      " + szViewName + " = " + "task.getViewByName( ^" + szViewName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      if ( VmlOperation.isValid( " + szViewName + " ) )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "         task.log( ).info( ^Got " + szViewName + " View Key: ^ + strEntityKey );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END
               szWriteBuffer = "         lEKey = java.lang.Long.parseLong( strEntityKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         csrRC = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setByEntityKey( lEKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         if ( !csrRC.isSet() ) //if ( nRC < 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         // This is temp code because SetCursorEntityKey doesn't work on subobjects."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // Because this link might be inside a grid that is inside a repeating group, we need to loop through
               // all the entities that the repeating group loops through to see if the entity key exists. Not just
               // the current entity we are on.
               IF szRepeatingGroupFlag = "Y"
                  szWriteBuffer = "            csrRCk = " + szViewName + ".cursor( ^" + szEntityNameR + "^ ).setFirst( );"
               ELSE 
                  szWriteBuffer = "            csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setFirst( );"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            while ( csrRCk.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "               csrRC = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setByEntityKey( lEKey );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               if ( csrRC.isSet() )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  // Stop while loop because we have positioned on the correct entity."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               // KJS 09/05/12 - The following is wrong because csrRCk is not an integer.  I think we can just use "break".
               //szWriteBuffer = "                  csrRCk = -1;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "                  break;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               IF szRepeatingGroupFlag = "Y"
                  szWriteBuffer = "                  csrRCk = " + szViewName + ".cursor( ^" + szEntityNameR + "^ ).setNextContinue( );"
               ELSE
                  szWriteBuffer = "                  csrRCk = " + szViewName + ".cursor( ^" + szEntityName + "^ ).setNextContinue( );"
               END
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "      else"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
                  szWriteBuffer = "         task.log( ).info( ^Did not get " + szViewName + " View Key: ^ + strEntityKey );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               END
            END
         END  // IF nGridParent = 1
      END  // IF SetEntityCursor ...

      DropView( vDialogTemp )

   END  // FOR EACH vDialog.ActCtrl WITHIN vDialog.Action

   // Operation Option
   IF vDialog.ActOper EXISTS

      szWriteBuffer = "      // Action Operation"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //FOR EACH Dialog.ActCtrl.Tag code from about was here.

      szWriteBuffer = "      nRC = 0;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log( ).info( ^CallDialogOperation: " + vDialog.Dialog.Tag + "." + vDialog.ActOper.Name + "  ^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      // In order to call a dialog operation we need to create an instance of the dialog class.  We only want to do this once.
      szDlgTag = vDialog.Dialog.Tag
   // szWndTag = vDialog.Window.Tag
      szOperName = vDialog.ActOper.Name
      IF szDialogClassCreated = "N"

         IF szDlgTagRoot != szDlgTag
            szWriteBuffer = "      " +  szDlgTag + "_Dialog " + szDlgTag + " = new " +  szDlgTag + "_Dialog( vKZXMLPGO );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         // szDialogClassCreated = "Y"
         END
      END

      IF szJavaScript != "" AND szJavaScriptLocation = "Pre-Operation"
         szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

   // szWriteBuffer = "      task.log().info( ^ZeidonOperation: " + szDlgTag + "." + szOperName + " called from " + szFormName + ".jsp^ );"  // keep us informed of where we are ...  dks 2011.11.11
      szWriteBuffer = "      VmlOperation.SetZeidonSessionAttribute( null, task, ^" + szFormName + ".jsp^, ^" + szDlgTag + "." + szOperName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "      try"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nOptRC = " + szDlgTag + "." + szOperName + "( new zVIEW( vKZXMLPGO ) );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      catch (Exception e)"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         // Set the error return code."
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nOptRC = 2;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strVMLError = ^<br><br>*** Error running Operation " + szOperName + ": ^ + e.getMessage();"     
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log().info( strVMLError );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      //szWriteBuffer = "      nOptRC = " + szDlgTag + "." + szOperName + "( new zVIEW( vKZXMLPGO ) );"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Handle any Next Window processing from Operation.
      szWriteBuffer = "      if ( nOptRC == 2 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = 2;  // do the ^error^ redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         session.setAttribute( ^ZeidonError^, ^Y^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         break;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"

      IF szWebRedirection = "Y"

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      if ( nOptRC == 1 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         // Dynamic Next Window"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strNextJSP_Name = " + szDlgTagRoot + ".GetWebRedirection( vKZXMLPGO );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF szJavaScript != "" AND szJavaScriptLocation = "Post Operation"
            szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         IF szWAB != ""

            szWriteBuffer = "      if ( strNextJSP_Name.equals( ^^ ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Next Window"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // In order to call a dialog operation we need to create an instance of the dialog class.  We
            // only want to do this once.
         // IF szDialogClassCreated = "N"
         //
         //    szWriteBuffer = "      " +  szDlgTagRoot + "_Dialog " + vDialog.Dialog.Tag + " = new " +
         //                    szDlgTagRoot + "_Dialog( vKZXMLPGO );"
         //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //
         //    szDialogClassCreated = "Y"
         // END

            szWriteBuffer = "         strNextJSP_Name = " + szDlgTagRoot + ".SetWebRedirection( vKZXMLPGO, " + szDlgTagRoot + "." + szWAB + ", ^"
            szWriteBuffer = szWriteBuffer + vDialog.Action.DialogName + "^, ^" + vDialog.Action.WindowName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      strURL = response.encodeRedirectURL( strNextJSP_Name );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         task.TraceLine( ^Next Window Redirect to: ^, strURL );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

         ELSE

            szWriteBuffer = "      // Next Window unknown"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

      ELSE  // not using WebDirection

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF szJavaScript != "" AND szJavaScriptLocation = "Post Operation"
            szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         IF lActionType = zWAB_StartBrowserPDF_Page
            // If we are copying to pdf, then we need to have a wait routine, otherwise, the jsp tries to open
            // the pdf file before it's actually created.
            szWriteBuffer = "      try{ "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         Thread.sleep(5000);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }catch(InterruptedException ie){ "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         out.println( ^error^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         // I know that if we are starting a pdf or html window then we do not need to do this.
         // There are probably more like Popup windows...
         IF  lActionType != zWAB_StartBrowserHTML_Page AND lActionType != zWAB_StartBrowserPDF_Page

            // Handle any Next Window processing from Operation.
            szWriteBuffer = "      // Dynamic Next Window"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = vKZXMLPGO.cursor( ^NextDialogWindow^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strDialogName = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getStringFromAttribute( ^DialogName^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strWindowName = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getStringFromAttribute( ^WindowName^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strNextJSP_Name = strDialogName + strWindowName + ^.jsp^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         vKZXMLPGO.cursor( ^NextDialogWindow^ ).deleteEntity( CursorPosition.NEXT );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strURL = response.encodeRedirectURL( strNextJSP_Name );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         task.log( ).info( ^Next Window Redirect to: ^ + strURL );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            // Handle creation of return page for Function Call StartSubwindow.
            szWriteBuffer = "         nRC = vKZXMLPGO.cursor( ^NextDialogWindow^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strFunctionCall = vKZXMLPGO.cursor( ^NextDialogWindow^ ).getStringFromAttribute( ^FunctionCall^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strFunctionCall = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         if ( strFunctionCall != null && StringUtils.equals( strFunctionCall, ^StartSubwindow^ ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            vKZXMLPGO.cursor( ^PagePath^ ).createEntity( CursorPosition.NEXT );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            vKZXMLPGO.cursor( ^PagePath^ ).setAttribute( ^LastPageName^, ^" + szFormName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         break;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         ELSE

            IF szWAB != ""

               szWriteBuffer = "      // Next Window"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               // In order to call a dialog operation we need to create an instance of the dialog class.  We
               // only want to do this once.
            // IF szDialogClassCreated = "N"
         //
            //    szWriteBuffer = "      " +  szDlgTagRoot + "_Dialog " + vDialog.Dialog.Tag + " = new " +
            //                    szDlgTagRoot + "_Dialog( vKZXMLPGO );"
            //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //
            //    szDialogClassCreated = "Y"
            // END

               szWriteBuffer = "      strNextJSP_Name = " + szDlgTagRoot + ".SetWebRedirection( vKZXMLPGO, " + szDlgTagRoot + "." + szWAB + ", ^"
               szWriteBuffer = szWriteBuffer + vDialog.Action.DialogName + "^, ^" + vDialog.Action.WindowName + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      strURL = response.encodeRedirectURL( strNextJSP_Name );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      nRC = 1;  // do the redirection"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               //KJS Trace
               IF (lTraceLevel = 1)
                  szWriteBuffer = "         task.TraceLine( ^Next Window Redirect to: ^, strURL );"
                  WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               END

            ELSE

               szWriteBuffer = "      // Next Window unknown"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            END

         END   // IF  lActionType != zWAB_StartBrowserHTML_Page

      END

   ELSE
      // No operation code

      IF szJavaScript != "" AND szJavaScriptLocation = "Pre-Operation"
         szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

      IF szWAB != ""
         IF szWebRedirection = "Y"

            szWriteBuffer = "      // Next Window"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // In order to call a dialog operation we need to create an instance of the dialog class.  We
            // only want to do this once.
         // IF szDialogClassCreated = "N"
       //
         //    szWriteBuffer = "      " +  szDlgTagRoot + "_Dialog " + vDialog.Dialog.Tag + " = new " +
         //                    szDlgTagRoot + "_Dialog( vKZXMLPGO );"
         //    WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
       //
         //    szDialogClassCreated = "Y"
         // END

            szWriteBuffer = "      strNextJSP_Name = " + szDlgTagRoot + ".SetWebRedirection( vKZXMLPGO, " + szDlgTagRoot + "." + szWAB + ", ^"
            szWriteBuffer = szWriteBuffer + vDialog.Action.DialogName + "^, ^" + vDialog.Action.WindowName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      strURL = response.encodeRedirectURL( strNextJSP_Name );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         task.TraceLine( ^Next Window Redirect to: ^, strURL );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

         END
      ELSE
         szWriteBuffer = "      // Next Window unknown"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

      IF szJavaScript != "" AND szJavaScriptLocation = "Post Operation"
         szWriteBuffer = "      " + szJavaScript + "  // " + szJavaScriptLocation
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END

   END    // IF vDialog.ActOper EXISTS ... End of calling an operation

   IF szWebRedirection = "Y"

   IF lActionType = zWAB_StartBrowserHTML_Page
         // KJS 02/09/12 - In JOE task.setName is failing, not sure what this code is
         // even doing so I am commenting this out for now...
         szWriteBuffer = "      task.setName( strURL );"
         //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   IF lActionType = zWAB_StartBrowserPDF_Page
         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   ELSE

   // Next Window Option
      IF lActionType = zWAB_StartModelessSubwindow          OR
         lActionType = zWAB_StartModalSubwindow             OR
         lActionType = zWAB_ReplaceWindowWithModelessWindow OR
         lActionType = zWAB_ReplaceWindowWithModalWindow    OR
         lActionType = zWAB_StartTopWindow                  OR
         lActionType = zWAB_ResetTopWindow                  OR
         lActionType = zWAB_StartBrowserHTML_Page           OR
         lActionType = 35                                   OR  //reCAPTCHA StartModalSubwindow
         lActionType = 55  //reCAPTCHA ReplaceModalWindow
      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         InsertBlankFlag = "N"
      END

      szWriteBuffer = "      // Next Window"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF lActionType = zWAB_StartBrowserHTML_Page
         // KJS 02/09/12 - In JOE task.setName is failing, not sure what this code is
         // even doing so I am commenting this out for now...
         szWriteBuffer = "      task.setName( strURL );"
         //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strURL = response.encodeRedirectURL( strURL );"
      ELSE
         szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" +
                         vDialog.Action.DialogName + vDialog.Action.WindowName + ".jsp^ );"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log( ).info( ^Next Window Redirect to: ^ + strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

         IF lActionType = zWAB_StartModelessSubwindow OR
            lActionType = zWAB_StartModalSubwindow    OR
            lActionType = 35 //reCAPTCHA StartModalSubwindow
         // Next Window is subwindow. Set up current window for return.
         szWriteBuffer = "      vKZXMLPGO.cursor( ^PagePath^ ).createEntity( CursorPosition.NEXT );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      vKZXMLPGO.cursor( ^PagePath^ ).setAttribute( ^LastPageName^, ^" +
                         szFormName + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      IF lActionType = zWAB_StartBrowserHTML_Page
         // KJS 03/05/08 - This was "nRC = 2 //do the error redirection" and I'm not sure why.
         // That resubmitted the current page and I assume this was done thinking this was how
         // the report page would be called but since the report popup is determined in AfterPageLoaded, we
         // don't need to resubmit the page.  Just keep building this current page.
         szWriteBuffer = "      nRC = 0;  // Don't need to redirect for popup window"
      ELSE
         szWriteBuffer = "      nRC = 1;  // do the redirection"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   END  //End of Next Window Option

   // This Action is Startup Web Popup WITH mapping, so set zOpenPopupWindow to the next page jsp.
      IF ( lActionType = zWAB_StartModalWebPopup OR lActionType = zWAB_StartModelessWebPopup ) // KJS 07/11/12 AND vDialog.Action.NoMap = ""
      //This gets the value for the popup window so that in AfterPageLoaded, we can get this
      //value and pop up the window.
      szWriteBuffer = "      strOpenPopupWindow = request.getParameter( ^zOpenPopupWindow^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZX = request.getParameter( ^zPopupWindowSZX^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strPopupWindowSZY = request.getParameter( ^zPopupWindowSZY^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 0;  // No redirection, we want to open the popup"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Same Window Refresh option
      IF lActionType = zWAB_StayOnWindowWithRefresh
      szWriteBuffer = "      // Stay on Window with Refresh"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   // Return From Window Option
      IF lActionType = zWAB_ReturnToParent OR
         lActionType = zWAB_ReturnToParentWithRefresh

      IF InsertBlankFlag = "Y"
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "      // Return to Last Window"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = vKZXMLPGO.cursor( ^PagePath^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = vKZXMLPGO.cursor( ^PagePath^ ).getStringFromAttribute( ^LastPageName^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         vKZXMLPGO.cursor( ^PagePath^ ).deleteEntity( CursorPosition.PREV );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = strLastPage + ^.jsp^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strLastPage = ^" + szFormName + ".jsp^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "      strURL = response.encodeRedirectURL( strLastPage );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //KJS Trace
      IF (lTraceLevel = 1)
         szWriteBuffer = "      task.log( ).info( ^Return Redirect to: ^ + strURL );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END
   // szWriteBuffer = "      return;"
      szWriteBuffer = "      nRC = 1;  // do the redirection"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END
   END

   // Download File option.
   IF lActionType = zWAB_ProcessDownloadFile

      // Note that we need vDialogCtrl to be positioned on Control that triggers the Action to get the attribute mapping from that Control.
      // This was evaluated earlier.

      IF vDialogCtrl > 0
         IF vDialogCtrl.CtrlMapER_Attribute EXISTS

            szWriteBuffer = "  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      // Download File Processing"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            /*
            szWriteBuffer = "      sBrowser = request.getHeader( ^User-Agent^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isFirefox = ( sBrowser != null && sBrowser.indexOf( ^Firefox/^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isMSIE = ( sBrowser != null && sBrowser.indexOf( ^MSIE^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      boolean isOpera = ( sBrowser != null && sBrowser.indexOf( ^Opera^ ) != -1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            */

            szWriteBuffer = "      " + vDialogCtrl.CtrlMapView.Name + " = " + "task.getViewByName( ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialogCtrl.CtrlMapView.Name + " ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialogCtrl.CtrlMapView.Name + ".cursor( ^" +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            IF vDialogCtrl.CtrlMapER_Domain.MaxStringLth > 254
               lMaxStringLength = vDialogCtrl.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "254"
            END

            szWriteBuffer = "            sDownloadFile = " + vDialogCtrl.CtrlMapView.Name + ".cursor( ^" + vDialogCtrl.CtrlMapRelatedEntity.Name +
                            "^ ).getStringFromAttribute( ^" + vDialogCtrl.CtrlMapER_Attribute.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            task.log( ).info( ^Download File Name: ^ + sDownloadFile );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "         else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            " + vDialogCtrl.CtrlMapView.Name + ".log( ).info( ^Entity does not exist: ^, ^" +
                                                vDialogCtrl.CtrlMapView.Name + "." +
                                                vDialogCtrl.CtrlMapRelatedEntity.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         " + vDialogCtrl.CtrlMapView.Name + ".log( ).info( ^Invalid View: ^ ^" + vDialogCtrl.CtrlMapView.Name + "^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         // Replace any quotes."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         sDownloadFile = sDownloadFile.replaceAll( ^\^^, ^^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         l = sDownloadFile.lastIndexOf( ^.^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         x = sDownloadFile.lastIndexOf( ^\\^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         // If x > l then the filename has no extension and"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // there must be a period in the directory name."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Right now we are not using sExtension but just"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // in case we want to change the encType I want"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // to capture this."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if (x > l)"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            sExtension = sDownloadFile.substring( l+1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Get the filename only without directories."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         sSourceFileNameOnly = sDownloadFile.substring( x + 1 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         File InputFile = new File( sDownloadFile );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         FileInputStream fis = new FileInputStream( InputFile );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         try"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS Trace
            IF (lTraceLevel = 1)
               szWriteBuffer = "            task.log( ).info( ^Download File: ^ + ^Setting outputStream and attaching file^ );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "            String contenttype = ^application/octet-stream^;  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setContentType(contenttype);"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            response.setHeader( ^Content-Disposition^, ^attachment; filename=^ + sSourceFileNameOnly + ^;^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            ServletOutputStream outStream = response.getOutputStream( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            int c = 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            while ( (c=fis.read( )) != -1 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               outStream.write( c );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.flush( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            outStream.close( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         catch (Exception e) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( InputFile != null && InputFile.exists( ) ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               //TraceLine"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               task.log( ).info( ^Error downloading file: ^ + sDownloadFile );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            } "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "         fis.close( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // The end of the Action is the same as "Same Window Refresh" above.
            szWriteBuffer = "         // Stay on Window with Refresh"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strURL = response.encodeRedirectURL( ^" + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag + ".jsp^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = 1;  // do the redirection"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         // szWriteBuffer = "      } "
         // WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END
   END // Download File option.

   szWriteBuffer = "      break;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   IF vDialogCtrl > 0
      DropView( vDialogCtrl )
   END

END
/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: CreateTabIndexString
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
CreateTabIndexString( VIEW vDialog BASED ON LOD TZWDLGSO,
                      STRING ( 16 ) szTabIndex )

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 8 ) szWork
   SHORT        nTabIndex

   GET VIEW vDialogRoot NAMED "vDialogRoot"
   nTabIndex = vDialog.Control.SyncKey
   IF nTabIndex > 0 AND nTabIndex < 9999
      zIntegerToString( szWork, 8, nTabIndex )
      szTabIndex = " tabindex=" + szWork + " "
   ELSE
      GET VIEW vDialogRoot NAMED "DialogRoot"
      IF vDialogRoot.Window.wWindowHasTabsFlag = "Y"
         szTabIndex = " tabindex=-1 "    // Since tabs are used on the Window, this Control will be marked "no tab".
      ELSE
         szTabIndex = ""
      END
   END

   RETURN( nTabIndex )
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildMainNavSection
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
BuildMainNavSection( VIEW vDialog,
                     VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                     INTEGER lFile )

   STRING ( 10000 ) szWriteBuffer
   STRING ( 50 )    szNavigationTitle
   STRING ( 256 )   szHTML_Address
   STRING ( 256 )   szClass
   STRING ( 50 )    szDialogName
   STRING ( 50 )    szMenuName
   STRING ( 34 )    szActionName
   INTEGER          ActionType
   SHORT            nRC

   // MAIN NAVIGATION BAR

   szWriteBuffer = "<!-- Main Navigation *********************** -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   IF vDialogRoot.Menu EXISTS 
      szMenuName = vDialogRoot.Menu.Tag 
      IF vDialogRoot.Menu.CSS_Class != ""
         szClass = " class=^" + vDialogRoot.Menu.CSS_Class + "^ " 
      END
   END
   szWriteBuffer = "<div id=^mainnavigation^" + szClass + ">"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   <ul id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + ">"
   szWriteBuffer = "   <ul id=^" + szMenuName + "^ name=^" + szMenuName + "^ >"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   FOR EACH vDialogRoot.OptAct WITHIN vDialogRoot.Menu
      szNavigationTitle = vDialogRoot.Option.Text
      szDialogName = vDialogRoot.OptAct.DialogName
      IF szDialogName = ""
         szDialogName = "NoDialogName"
      END
      
      IF vDialogRoot.Option.CSS_Class != ""
         szClass = " class=^" + vDialogRoot.Option.CSS_Class + "^ "
      ELSE
         szClass = ""
      END

      IF vDialogRoot.OptAct EXISTS
         //Because the menu actions can be created on separate windows from the control
         //actions, we need to make sure these actions are unique.  We will prefix a
         //"m" to the main menu actions and prefix a "sm" to the side menu actions.
         szActionName = "m" + vDialogRoot.OptAct.Tag
         ActionType = vDialogRoot.OptAct.Type
      ELSE
         szActionName = ""
         ActionType = 0
      END

      IF ActionType = zWAB_LinkToHTML_Address
         szHTML_Address = ""
         IF vDialogRoot.OptAct EXISTS
            SET CURSOR FIRST vDialogRoot.Action WHERE vDialogRoot.Action.ZKey = vDialogRoot.OptAct.ZKey
            szHTML_Address = vDialogRoot.Action.WebHTML_TransferAddress
         END
         szWriteBuffer = "       <li id=^l" + szActionName + "^ name=^l" + szActionName + "^ " + szClass + "><a href=^" + szHTML_Address + "^ target=^_blank^>" + szNavigationTitle + "</a></li>"
      ELSE
         // Regular Action

         szWriteBuffer = "       <li id=^l" + szActionName + "^ name=^l" + szActionName + "^ " + szClass + "><a href=^#^ onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
      END
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   END

   // Division ending for Navigation Bar
   szWriteBuffer = "   </ul>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "</div>  <!-- end Navigation Bar -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = ""
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   // Include the banner at the bottom of the menu options.
   //szWriteBuffer = "<div class=^noprint^>"
   //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<%@include file=^./include/topmenuend.inc^ %>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   // KJS 07/31/08 - I am taking out the following inc file.  I am
   // currently thinking that anything in this inc file could simply
   // be put in topmenuend.inc and that might seem a little simpler.
   // Not sure...
   //szWriteBuffer = "<%@include file=^Left_Nav_Background.inc^ %>"
   //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "</div>"
   //WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildSideNavSection
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
BuildSideNavSection( VIEW vDialog,
                     VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                     INTEGER lFile,
                     STRING (1) szReusableMenu,
                     VIEW vDialogMenu BASED ON LOD TZWDLGSO )

   STRING ( 10000 ) szWriteBuffer
   STRING ( 50 )    szNavigationTitle
   STRING ( 50 )    szHTML_Name
   STRING ( 50 )    szDialogName
   STRING ( 50 )    szOptionTag
   STRING ( 50 )    szMenuName
   STRING ( 34 )    szActionName
   STRING ( 256 )   szClass
   STRING ( 256 )   szClass2
   INTEGER          ActionType
   INTEGER          lLth
   SHORT            nRC

   // SIDE NAVIGATION BAR
   TraceLineS( "*** BuildSideNavSection Window! *** ", vDialog.Window.Tag )

   szWriteBuffer = ""
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<div id=^leftcontent^>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   szWriteBuffer = "<!-- Side Navigation *********************** -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   IF vDialogRoot.Menu EXISTS 
      szMenuName = vDialogRoot.Menu.Tag 
      IF vDialogRoot.Menu.CSS_Class != ""
         szClass = " class=^" + vDialogRoot.Menu.CSS_Class + "^ " 
      END
   END
   szWriteBuffer = "<div id=^sidenavigation^" + szClass + ">"
   //szWriteBuffer = "<div id=^sidenavigation^>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   <ul id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + ">"
   szWriteBuffer = "   <ul id=^" + szMenuName + "^ name=^" + szMenuName + "^>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   FOR EACH vDialogRoot.OptAct WITHIN vDialogRoot.Menu
      szNavigationTitle = vDialogRoot.Option.Text
      szDialogName = vDialogRoot.OptAct.DialogName
      IF szDialogName = ""
         szDialogName = "NoDialogName"
      END

      IF szReusableMenu = "Y"
         szMenuName = "sm" + vDialogRoot.Option.Tag
      ELSE
         szMenuName = vDialogRoot.Option.Tag
      END

   // szHTML_Name = szDialogName + vDialogRoot.OptAct.WindowName + ".jsp"
      IF vDialogRoot.OptAct EXISTS

         // Because the menu actions can be created on separate windows from the control
         // actions, we need to make sure these actions are unique.  We will prefix a
         // "m" to the main menu actions and prefix a "sm" to the side menu actions.
         IF szReusableMenu = "Y"
            szActionName = "sm" + vDialogRoot.OptAct.Tag
            lLth = zstrlen( szActionName )
            IF lLth > 32
               MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
                            szActionName,
                            zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            END
         ELSE
            szActionName = vDialogRoot.OptAct.Tag
         END
         ActionType = vDialogRoot.OptAct.Type
      ELSE
         szActionName = ""
         ActionType = 0
      END

      // If the window we are currently generating is the same window that this
      // side menu points to, then we want to set a class on this option.  The
      // reason is so that we can tell which side menu option the user has selected.
      IF vDialogRoot.OptAct.WindowName = vDialog.Window.Tag
         szClass2 = " class=^sideselected^ "
      ELSE
         szClass2 = ""
      END
      
      IF vDialogRoot.Option.CSS_Class != "" 
         szClass = " class=^" + vDialogRoot.Option.CSS_Class + "^"
      ELSE
         szClass = ""
      END

      szWriteBuffer = "<%"
      szOptionTag = vDialogRoot.Option.Tag
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC = vKZXMLPGO.SetCursorFirst( strSessionId, ^DisableMenuOption^, ^MenuOptionName^, ^" + szOptionTag + "^, ^^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC < 0 )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + "><a href=^#^ " + szClass2 + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "<%"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END  // FOR EACH

   // This is for building a default menu?
   // Trying to get this file to compile.
   IF vDialogMenu != 0
      CreateViewFromViewForTask( vDialogMenu, vDialogMenu, 0 )
      SET CURSOR FIRST vDialogMenu.Menu WHERE vDialogMenu.Menu.ZKey = vDialogMenu.DfltMenu.ZKey
      FOR EACH vDialogMenu.OptAct WITHIN vDialogMenu.Menu
         szNavigationTitle = vDialogMenu.Option.Text
         szDialogName = vDialogMenu.OptAct.DialogName
         IF szDialogName = ""
            szDialogName = "NoDialogName"
         END

      // szHTML_Name = szDialogName + vDialogMenu.OptAct.WindowName + ".jsp"
         IF vDialogMenu.OptAct EXISTS
            szActionName = vDialogMenu.OptAct.Tag
            ActionType = vDialogMenu.OptAct.Type
         ELSE
            szActionName = ""
            ActionType = 0
         END
         
         szMenuName = vDialogRoot.Option.Tag         

         // If the window we are currently generating is the same window that this
         // side menu points to, then we want to set a class on this option.  The
         // reason is so that we can tell which side menu option the user has selected.
         IF vDialogMenu.OptAct.WindowName = vDialog.Window.Tag
            szClass2 = "class=^sideselected^ "
         ELSE
            szClass2 = ""
         END
      
         IF vDialogMenu.Option.CSS_Class != "" 
            szClass = "class=^" + vDialogMenu.Option.CSS_Class + "^"
         ELSE
            szClass = ""
         END

         szWriteBuffer = "<%"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szOptionTag = vDialogMenu.Option.Tag
         szOptionTag = vDialogMenu.Option.Tag
         szWriteBuffer = "   nRC = vKZXMLPGO.SetCursorFirst( strSessionId, ^DisableMenuOption^, ^MenuOptionName^, ^" + szOptionTag + "^, ^^ );"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( nRC < 0 )"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + "><a href=^#^ " + szClass2 + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "<%"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   }"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 1 )
      END  // FOR EACH

      DropView( vDialogMenu )
   END  // vDialogMenu != 0

   // Division ending for Navigation Bar.
   szWriteBuffer = "   </ul>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "</div> <!-- sidenavigation -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   IF vDialogRoot.Dialog.WEB_LeftSideInclude != ""
      //szWriteBuffer = "<%@ include file=^./include/leftcontent.inc^ %>"
      szWriteBuffer = "<!-- left content include file -->"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<%@ include file=^" + vDialogRoot.Dialog.WEB_LeftSideInclude + "^ %>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END
   szWriteBuffer = "</div>  <!-- leftcontent -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = ""
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   /*
   szCSS_Class = vDialog.Window.CSS_Class
   IF szCSS_Class = ""
      // Begin the division for the main body content.
      szWriteBuffer = "<div id=^content^>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END
   */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_MenuFunctions
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_MenuFunctions( VIEW vDialog BASED ON LOD TZWDLGSO,
                      VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                      INTEGER          lFile,
                      STRING ( 10000 ) szWriteBuffer,
                      STRING ( 255 )   szFormName,
                      STRING ( 2 )     szActionPrefix )

   VIEW vDialog2 BASED ON LOD TZWDLGSO
   STRING ( 34 )    szActionName
   STRING ( 32 )    szCtrlTag
   STRING ( 10000 ) szJavaScript
   INTEGER          lControl
   SHORT            bListButton
   SHORT            nRC

   FOR EACH vDialog.Option
      IF vDialog.OptAct EXISTS
         SET CURSOR FIRST vDialog.Action WHERE vDialog.Action.Tag = vDialog.OptAct.Tag
         IF RESULT >= zCURSOR_SET
            //Because the menu actions can be created on separate windows from the control
            //actions, we need to make sure these actions are unique.  We will prefix a
            //"m" to the main menu actions and prefix a "sm" to the side menu actions.
            szActionName = szActionPrefix + vDialog.Action.Tag
            nRC = zstrcmpi( szActionName, "alt-f4" )
            IF nRC = 0
               szActionName = "AltF4"
            END

            bListButton = 0
            IF vDialog.ActEvent EXISTS AND vDialog.ActCtrl EXISTS

               szCtrlTag = vDialog.ActCtrl.Tag
               CreateViewFromViewForTask( vDialog2, vDialogRoot, 0 )

               lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
               IF SetEntityCursor( vDialog2, "Control", "Tag", lControl,
                                   szCtrlTag, "", "", 0,
                                   "Window", "" ) >= zCURSOR_SET AND
                  vDialog2.ControlDef.Key = 1020

                  IF ResetViewFromSubobject( vDialog2 ) = 0 AND
                     vDialog2.ControlDef.Key = 2010

                     bListButton = 1

                  END
               END

               DropView( vDialog2 )

            END

            IF bListButton = 1
               szWriteBuffer = "function " + szActionName + "( strEntityKey )"
            ELSE
               szWriteBuffer = "function " + szActionName + "( )"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "{"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   isWindowClosing = false;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS 11/16/2007 - We want to insert any javascript code that the
            //user has entered for this action.  This will be put before the action
            //generated code for submitting.
            szJavaScript = vDialog.Action.WebJavaScript
            IF szJavaScript != ""
               szWriteBuffer = ""
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      // Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = szJavaScript
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      // END of Javascript code entered by user."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            END

               // KJS 10/28/10 - Testing this to see how using an hourglass would work while
               // the user is waiting for something to happen.
               //szWriteBuffer = "      document.body.style.cursor = ^wait^;"
               //WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      _DisableFormElements( true );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            IF bListButton = 1
               szWriteBuffer = "      document." + szFormName + ".zTableRowSelect.value = strEntityKey;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            IF vDialog.Action.Type = zWAB_ExitDialogTask
               // For exiting the Dialog (ie., Session), the Action is OnUnload.
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^_OnUnload^;"
            ELSE
               szWriteBuffer = "      document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      document." + szFormName + ".submit( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "}"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_CrteCalendar
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_CrteCalendar( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY )

   // Format a CALENDAR control.

   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 10 )  szDisabled
   STRING ( 10 )  szWidth
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 16 )  szTabIndex
   DECIMAL        dDLUnits

   szWriteBuffer = "<% strErrorMapValue = ^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET
      szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                      ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC <= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                      ".CheckExistenceOfEntity( strSessionId, ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMapValue = " +
                      vDialog.CtrlMapView.Name +
                      ".GetStringFromAttributeByContext( strSessionId, ^" +
               vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
               vDialog.CtrlMapER_Attribute.Name + "^, strDateFormat, 10 );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      // We will set the height to the constant 32 px.
      PIX_PER_DU( vDialog, dDLUnits )
      zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
      szHeight = "32"
      szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"

      // If szNoPositioning is null then we are using absolute positioning when creating controls.
      IF  szNoPositioning = ""

         zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
         zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )
         szStyle = szStyle + "position:absolute;left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
      ELSE
         szStyle = szStyle + "^ "
      END

      CreateTabIndexString( vDialog, szTabIndex )

      CreateDisabledString( vDialog, szDisabled )

      // Multiple class names must be separated by white space characters.
      szClass = vDialog.Control.CSS_Class

      szWriteBuffer = "<span " + szStyle + ">"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF szClass = ""
         szWriteBuffer = "   <input name=^" + szCtrlTag + "^ id='" + szCtrlTag + "' " + szDisabled +
                             "style=^width:80px^ type=^text^ value=^<%=strErrorMapValue%>^ " + szTabIndex + " />"
      ELSE
         szWriteBuffer = "   <input class=^" + szClass + "^ name=^" + szCtrlTag + "^ id='" + szCtrlTag + "' " + szDisabled +
                             "style=^width:80px^ type=^text^ value=^<%=strErrorMapValue%>^ " + szTabIndex + " />"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <img src=^images/scw.gif^  name=^" + szCtrlTag + "Img^ id=^" + szCtrlTag + "Img^ title=^Select Date^ alt=^Select Date^"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "        onclick=^scwShow( document.getElementById( '" + szCtrlTag + "' ), this );^ " + szTabIndex + " />"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</span>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   END
END

/*************************************************************************************************
**
**    OPERATION: GenJSP_EmailEntries
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSP_EmailEntries( VIEW vDialog     BASED ON LOD TZWDLGSO,
                     VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 255 )   szFormName )

   VIEW vDialogTemp BASED ON LOD TZWDLGSO
   STRING ( 32 ) szCtrlWebCtrlType
   STRING ( 32 ) szActionName
   INTEGER       lControl
   INTEGER       lActionType
   SHORT         nRC

   // Generate statements for formatting an email to be sent to all email addresses in a list.

   szWriteBuffer = "   // This is for indicating whether the user hit the window close box."
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   isWindowClosing = false;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szWriteBuffer = "   if ( _IsDocDisabled( ) == false )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var szEmailList = ^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var tds;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var thisTd;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      var k;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      // Generates list of email addresses from td entries with class ^Email^."
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      tds = document.getElementsByTagName( ^td^ );"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      for ( k = 0; k < tds.length; k++ )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         thisTd = tds[ k ];"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( thisTd.className == ^Email^ )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            if ( szEmailList != ^^ )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "               szEmailList += ^,^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   szWriteBuffer = "            szEmailList += thisTd.innerHTML;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szWriteBuffer = "      if ( szEmailList != ^^ )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // Put together the email components and send them."
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         // Note that problems may occur if the client computer has no default email program specified."
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         var thisMLE;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         var mle;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         var eml;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         var subject;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         var bcc;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         var sub;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         var bod;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         var mle1;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   // Email Recipient
   // Email Recipient is one of three options.
   // 1. If event is Start Email Client, the list of email addresses.
   // 2. If event is Start Email BCC or Start Email CC AND an Email Recipient control exists on the page, the
   //    Email Recipient control value.
   // 3. If event is Start Email BCC or Start Email CC AND an Email Recipient control DOES NOT EXIST on the page,
   //    a null value.
   // Generate JSP statements if an email recipient was requested. (A control with WebCtrlType = "EmailRecipient")
   szWriteBuffer = "         // Email Recipient."
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   lActionType = vDialog.Action.Type
   IF lActionType = zWAB_StartEmailClient
      // Case 1 above
      szWriteBuffer = "         eml = szEmailList;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE

      szCtrlWebCtrlType = "EmailRecipient"
      CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
      lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
      nRC = SetEntityCursor( vDialogTemp, "Control", "WebCtrlType", lControl, szCtrlWebCtrlType, "", "", 0, "Window", "" )
      IF nRC >= zCURSOR_SET
         // Case 2 above
         szWriteBuffer = "         eml = document." + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag +
                         "." + vDialogTemp.Control.Tag + ".value;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      ELSE
         // Case 3 above
         szWriteBuffer = "         eml = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
      DropView( vDialogTemp )
   END


   // Email Subject
   // Generate JSP statements if an email subject was requested. (A control with WebCtrlType = "EmailSubject")
   szWriteBuffer = "         // Email Subject."
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szCtrlWebCtrlType = "EmailSubject"
   CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogTemp, "Control", "WebCtrlType", lControl, szCtrlWebCtrlType, "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      szWriteBuffer = "         subject = document." + vDialogRoot.Dialog.Tag + vDialogRoot.Window.Tag +
                      "." + vDialogTemp.Control.Tag + ".value;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END
   DropView( vDialogTemp )
   szWriteBuffer = "         if ( subject == ^^ )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            sub = ^?subject=&nbsp^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            sub = ^?subject=^ + subject;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   // Email Body
   // Generate JSP statements if an email body was requested. (A control with WebCtrlType = "EmailMessage")
   szWriteBuffer = "         // Email Body."
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szCtrlWebCtrlType = "EmailMessage"
   CreateViewFromViewForTask( vDialogTemp, vDialogRoot, 0 )
   lControl = zQUAL_STRING + zPOS_FIRST + zRECURS
   nRC = SetEntityCursor( vDialogTemp, "Control", "WebCtrlType", lControl, szCtrlWebCtrlType, "", "", 0, "Window", "" )
   IF nRC >= zCURSOR_SET
      szWriteBuffer = "         mle = document.getElementById( ^" + vDialogTemp.Control.Tag + "^ ).value;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END
   DropView( vDialogTemp )
   szWriteBuffer = "         while ( mle.search( ^\n^ ) >= 0 )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            mle1=mle.replace( ^\n^, ^%0a^ );"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            mle=mle1;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         if ( mle == ^^ )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            bod = ^&body=&nbsp^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         else"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "            bod = ^&body=^ + mle;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   // Email BCC or CC.
   szWriteBuffer = "         // Email BCC/CC."
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   IF lActionType = zWAB_StartEmailClientBCC
      szWriteBuffer = "         bcc = ^&bcc=^ + szEmailList;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "         location.href=^mailto:^ + eml + sub + bcc + bod;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      IF lActionType = zWAB_StartEmailClientCC
         szWriteBuffer = "         bcc = ^&cc=^ + szEmailList;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "         location.href=^mailto:^ + eml + sub + bcc + bod;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      ELSE
         szWriteBuffer = "         bcc = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         location.href=^mailto:^ + eml + sub + bcc + bod;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   END

   // If the Action has an operation, we must also set up the code to trigger the Action and Operation at the
   // Application Server.
   IF vDialog.ActOper EXISTS
      szActionName = vDialog.Action.Tag
      szWriteBuffer = "         document." + szFormName + ".zAction.value = ^" + szActionName + "^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         document." + szFormName + ".submit( );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   END

   szWriteBuffer = "      }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   szWriteBuffer = ""
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

END


/*************************************************************************************************
**
**    OPERATION: GenJSP_CrteListBox
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSP_CrteListBox( VIEW vDialog,
                    INTEGER lFile,
                    STRING ( 10000 ) szWriteBuffer,
                    STRING ( 50 )    szIndent,
                    STRING ( 32 )    szCtrlTag,
                    STRING ( 1 )     szNoPositioning,
                    INTEGER lOffsetX,
                    INTEGER lOffsetY )

   VIEW vScope  BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 32 )  szEntityName
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) ListBoxDoubleClickAction
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szMaxStringLength
   STRING ( 10 )  szWidth
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 10 )  szDisabled
   DECIMAL        dDLUnits
   INTEGER        lSubtype
   INTEGER        lMaxStringLength

   szStyle = "width:" + szWidth + "px; height:" + szHeight + "px;"
   szClass = vDialog.Control.CSS_Class

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateTabIndexString( vDialog, szTabIndex )
   // We will set the height to the constant 20 px.
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
   szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"

   // If szNoPositioning is null then we are using absolute positioning on controls.
   IF  szNoPositioning = ""

      zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
      zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )
      szStyle = szStyle + "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;"
      //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END

   szStyle = szStyle + "^ " + szTabIndex

   szWriteBuffer = "<% strErrorMapValue = ^^;  %>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szSelectFunction = "OnClick"


      // Check if DoubleClick Event and Action exist and handle accordingly.
      ListBoxDoubleClickAction = ""
      SET CURSOR FIRST vDialog.Event WHERE vDialog.Event.Type = 2
      IF RESULT >= zCURSOR_SET AND vDialog.EventAct EXISTS
         ListBoxDoubleClickAction = " ondblclick=^" + vDialog.EventAct.Tag + "( )^ "
      END


      // Set cursor to the scoping entity if one exists
      CreateViewFromViewForTask( vScope, vDialog, 0 )
      SET CURSOR NEXT vScope.CtrlMap

      IF szClass = ""
         szWriteBuffer = "<select name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^4^ " + szTitleHTML + szStyle + szDisabled + " onclick=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ListBoxDoubleClickAction + ">"
      ELSE
         szWriteBuffer = "<select class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^4^ " + szTitleHTML + szStyle + szDisabled + " onclick=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ListBoxDoubleClickAction + ">"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS


         // See if a list entity has been specified, and if so, use it.
         // Since this is a listbox I believe this should always be specified.
         IF vDialog.CtrlMapLOD_Entity EXISTS
            szListEntityName = vDialog.CtrlMapLOD_Entity.Name
         END

         szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                         ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( nRC > 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboCurrentValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      zeidon.zView v" + szCtrlTag + " = new zeidon.zView( strSessionId );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szAttributeName = ""
         szEntityName = ""
         szContextName = ""

         // Set position on the text field inside the listbox.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         IF vDialog.CtrlMapLOD_Attribute EXISTS

            szAttributeName = vDialog.CtrlMapER_Attribute.Name
            szEntityName = vDialog.CtrlMapRelatedEntity.Name

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^" +
                            szEntityName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            END

            IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
               lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "254"
            END


            szWriteBuffer = "         strComboCurrentValue = " + vDialog.CtrlMapView.Name +
                     ".GetStringFromAttributeByContext( strSessionId, ^" +
                     szEntityName + "^, ^" +
                     szAttributeName + "^, ^" + szContextName + "^, " + szMaxStringLength + " );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         ELSE
            szWriteBuffer = "      strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
         ResetViewFromSubobject( vDialog )

         // See if a scoping entity has been specified, and if so, use it.
         szScopingEntityName = ""
         lSubtype = vDialog.Control.Subtype
         lSubtype = IsFlagSequenceSet( lSubtype, zLISTBOX_SCOPE_OI )
         IF lSubtype = 0
            IF vScope.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vScope.CtrlMapLOD_Entity.Name
            END
         END

         szWriteBuffer = "      v" + szCtrlTag + ".CreateViewFromView( strSessionId, " + vDialog.CtrlMapView.Name + " );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "      ComboCount = 0;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboSelectedValue = ^0^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF lSubtype = 0
            szWriteBuffer = "      nRC = v" + szCtrlTag + ".SetCursorFirst( strSessionId, ^" +
                                         szListEntityName + "^, ^" + szScopingEntityName + "^ );"
         ELSE
            szWriteBuffer = "      nRC = v" + szCtrlTag + ".SetCursorScopeOI( strSessionId, ^" +
                                         szListEntityName + "^, 1 ); // first" // zPOS_FIRST
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      while ( nRC >= 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         IF szAttributeName != ""

            szWriteBuffer = "         strErrorMapValue = v" + szCtrlTag +
                            ".GetStringFromAttributeByContext( strSessionId, ^" +
                            szEntityName + "^, ^" +
                            szAttributeName + "^, ^" +
                            szContextName + "^, " + szMaxStringLength + " );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         szWriteBuffer = "         if ( strComboCurrentValue.equals( strErrorMapValue ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option selected=^selected^ value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "         ComboCount++;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF lSubtype = 0
            szWriteBuffer = "         nRC =  v" + szCtrlTag +
                            ".SetCursorNext( strSessionId, ^" + szListEntityName +
                            "^, ^" + szScopingEntityName + "^ );"
         ELSE
            szWriteBuffer = "         nRC =  v" + szCtrlTag +
                            ".SetCursorScopeOI( strSessionId, ^" + szListEntityName + "^, 3 ); // next" // zPOS_NEXT
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         DropView( vScope )
      END

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "      v" + szCtrlTag + ".DropView( strSessionId );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   szWriteBuffer = "</select>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_CrteText
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_CrteText( VIEW vDialog      BASED ON LOD TZWDLGSO,
                 VIEW vGroupParent BASED ON LOD TZWDLGSO,
                 VIEW vDialogRoot  BASED ON LOD TZWDLGSO,
                 INTEGER          lFile,
                 STRING ( 10000 ) szWriteBuffer,
                 STRING ( 50 )    szIndent,
                 STRING ( 32 )    szCtrlTag,
                 STRING ( 20 )    szJustify,
                 STRING ( 1 )     szNoPositioning,
                 INTEGER          lOffsetX,
                 INTEGER          lOffsetY )

   // Format a TEXT control.

   STRING ( 32 )  szContextName
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClassHTML
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 1000 ) szText
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szMaxStringLength
   STRING ( 20 )  szGroupParentType
   STRING ( 85 )  szHTMLCtrlID
   INTEGER        lMaxStringLength
   INTEGER        lSubtypeX
   INTEGER        lSubtype
   INTEGER        lTemp
   SHORT          nMultiLineFlag
   SHORT          nBoldFlag
   SHORT          nItalicFlag
   SHORT          nStrikeoutFlag
   SHORT          nUnderlineFlag
   INTEGER        lJustify
   INTEGER        lFontSize
   INTEGER        lTextColor
   INTEGER        lTextBkColor
   INTEGER        lBorderStyle
   INTEGER        lBorderColor
   INTEGER        lEscapement
   INTEGER        lType
   STRING ( 32 )  szFaceName
   STRING ( 256 ) szDecoration
   STRING ( 1 )   szIsLabel
   STRING ( 256 ) szLabelFor
   SHORT          nRC

   szText = vDialog.Control.Text
   CreateTabIndexString( vDialog, szTabIndex )

   szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "

   IF  szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
   ELSE
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END

   nRC = TX_GetTextRptCtrlBOI( vDialog, nMultiLineFlag, nBoldFlag,
                               nItalicFlag, nStrikeoutFlag,
                               nUnderlineFlag, lJustify,
                               lFontSize, lTextColor, lTextBkColor,
                               lBorderStyle, lBorderColor,
                               lEscapement, lType, szFaceName )

   // If the return code is <= 0, the CtrlBOI is null.
   szDecoration = ""
   IF nRC > 0

      IF nItalicFlag != 0
         szDecoration = szDecoration + "font-style:italic;"
      END

      IF nBoldFlag != 0
         szDecoration = szDecoration + "font-weight:bold;"
      END

      IF lJustify != 0
         nRC = IsFlagSequenceSet( lJustify, 2 )
         IF nRC != 0
            szDecoration = szDecoration + "text-align:center;"
         ELSE
            nRC = IsFlagSequenceSet( lJustify, 4 )
            IF nRC != 0
               szDecoration = szDecoration + "text-align:right;"
            END
         END
      END

      IF nUnderlineFlag != 0 AND nStrikeoutFlag != 0
         szDecoration = szDecoration + "text-decoration:underline line-through;"
      ELSE
         IF nUnderlineFlag != 0
            szDecoration = szDecoration + "text-decoration:underline;"
         END

         IF nStrikeoutFlag != 0
            szDecoration = szDecoration + "text-decoration:line-through;"
         END
      END
   END

   //KJS 10/19/07 - Added title.
   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   zAppendQuotedString( szStyle, szDecoration, "style=", "^" )
   szStyle = szStyle + szTabIndex
   IF vDialog.Control.CSS_Class != ""
      szClassHTML = "class=^" + vDialog.Control.CSS_Class + "^ "
   END

   // Check if a Group control as parent of this control requests relative postioning either through the
   // older "Span" setting or the newer "RelativePos" request.
   szGroupParentType = ""
   IF vGroupParent != 0
      // Override Style if parent group requests relative positioning
      // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
      // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
      /*
      SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
      IF RESULT >= zCURSOR_SET
         szGroupParentType = "RelativePos"
      ELSE
         szGroupParentType = vGroupParent.Control.WebCtrlType
      END
      */
      szGroupParentType = vGroupParent.Control.WebCtrlType
      IF szGroupParentType = "RelativePos" OR szGroupParentType = "Span"
         szStyle = "style=^position:relative;^"
      END
   END

   // Process variable Text mapping.
   SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Displayed Text"
   IF RESULT < zCURSOR_SET
      SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                 WHERE vDialog.CtrlMap.Tag = ""
   END
   IF RESULT >= zCURSOR_SET
      // There is mapping of the Display Text value.
      szWriteBuffer = "<% strTextDisplayValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                      ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC <= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END

      IF vDialog.CtrlMapER_Domain.DataType = "T" OR vDialog.CtrlMapER_Domain.DataType = "D"
         szWriteBuffer = "         strTextDisplayValue = " +
                         vDialog.CtrlMapView.Name +
                         ".GetStringFromAttributeByContext( strSessionId, ^" +
                         vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                         vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                         szContextName + "^, 20 );"
      ELSE
         IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
            lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
            szMaxStringLength = lMaxStringLength
         ELSE
            szMaxStringLength = "254"
         END

         szWriteBuffer = "         strTextDisplayValue = " +
                         vDialog.CtrlMapView.Name +
                         ".GetStringFromAttributeByContext( strSessionId, ^" +
                         vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                         vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                         szContextName + "^, " + szMaxStringLength + " );"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szText = "<%=strTextDisplayValue%>"

   END

   IF vDialog.EventAct EXISTS    // There is only one EventAct, which is HotText.
      IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
         // The Text triggers a Hyperlink to a constant or variable URL address
         SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
         IF RESULT >= zCURSOR_SET
            // There is mapping of the Hyperlink URL value.
            szWriteBuffer = "<% strTextURL_Value = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                            ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( nRC <= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                     ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            IF vDialog.CtrlMapER_Domain.DataType = "T" OR vDialog.CtrlMapER_Domain.DataType = "D"
               szWriteBuffer = "         strTextURL_Value = " +
                               vDialog.CtrlMapView.Name +
                               ".GetStringFromAttributeByContext( strSessionId, ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                               szContextName + "^, 20 );"
            ELSE
               IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                  lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                  szMaxStringLength = lMaxStringLength
               ELSE
                  szMaxStringLength = "254"
               END

               szWriteBuffer = "         strTextURL_Value = " +
                               vDialog.CtrlMapView.Name +
                               ".GetStringFromAttributeByContext( strSessionId, ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                               szContextName + "^, " + szMaxStringLength + " );"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS 10/19/07 - Added title.

            // The Hyperlink URL value is a variable.
               szWriteBuffer = "<a href=^<%=strTextURL_Value%>^  " + szClassHTML + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"
         ELSE

            // The Hyperlink URL value is a constant in the Action.
            SET CURSOR FIRST vDialogRoot.Action WHERE vDialogRoot.Action.ZKey = vDialog.EventAct.ZKey
            IF vDialogRoot.Action.WebHTML_TransferAddress = ""
               MessageSend( vDialog, "", "XSL Generation",
                            "A Hyperlink Action without URL mapping requires a 'Link to HTML Address' value.",
                            zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //KJS 10/19/07 - Added title.
            szWriteBuffer = "<a href=^" + vDialogRoot.Action.WebHTML_TransferAddress + "^  " + szClassHTML + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"
         END
      ELSE
         // This is HotText with regular Action, rather than HyperLink.
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //KJS 10/17/2007 Jeff says we need "javascript:" before the action name for href actions.  I think this
         //is the place to put it but I confess I'm not exactly sure...
         //KJS 10/19/07 - Added title.
         //KJS 09/24/10 - Now realizing that Jeff was incorrect about the javascript: and it shouldn't be used (http://jibbering.com/faq/#FAQ4_24).
         //Changing them to use the # and onclick.
         // szWriteBuffer = "<a href=^javascript:" + vDialog.EventAct.Tag + "( );^ class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + szText + "</a>"
         szWriteBuffer = "<a href=^#^ onclick=^" + vDialog.EventAct.Tag + "( );^ " + szClassHTML + szTitleHTML + szStyle + ">" + szText + "</a>"
      END
   ELSE
      // Regular Text Control (No HotText)

   
      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      szIsLabel = ""
      szLabelFor = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Label"
      IF RESULT >= zCURSOR_SET
         szIsLabel = "Y"
         IF vDialog.Control.WebCtrlLabelLink != ""
            // Tie the label to an input control.
            szLabelFor = " for=^" + vDialog.Control.WebCtrlLabelLink + "^ " 
         END
      END
   
      szWriteBuffer = ""
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // If there is a "Label" web control property than make this a label, otherwise, just use <span>.
      IF szIsLabel = "Y"
            szWriteBuffer = "<label " + szClassHTML + szHTMLCtrlID + szLabelFor + szTitleHTML + szStyle + ">" + szText + "</label>"
      ELSE 
         szWriteBuffer = "<span " + szClassHTML + szHTMLCtrlID + szTitleHTML + szStyle + ">" + szText + "</span>"
      END
   END

   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_CrteCtrlsRadio
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_CrteCtrlsRadio( VIEW vDialog BASED ON LOD TZWDLGSO,
                       INTEGER          lFile,
                       STRING ( 10000 ) szWriteBuffer,
                       STRING ( 50 )    szIndent,
                       STRING ( 32 )    szRadioGroupName,
                       STRING ( 1 )     szNoPositioning,
                       INTEGER          lOffsetX,
                       INTEGER          lOffsetY )

   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szCtrlTag
   STRING ( 256 ) szTitleHTML
   STRING ( 10 )  szDisabled
   STRING ( 16 )  szPosition
   STRING ( 16 )  szTabIndex
   STRING ( 32 )  szActionName
   STRING ( 1 )   szFirstTimeThru
   INTEGER        nRC
   INTEGER        LastY_Pos

   LastY_Pos = 0
   szFirstTimeThru = "Y"
   IF vDialog.Control EXISTS
      LastY_Pos = vDialog.Control.PSDLG_Y
   END
   szWriteBuffer = "   <table style=^margin:0px;padding:0px;^  name=^tbl" + szRadioGroupName + "^ id=tbl^" + szRadioGroupName + "^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <tr style=^border:0px^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   // Process the individual Radio Buttons for a Radio Button Group.
   FOR EACH vDialog.Control
      szActionName = ""
      IF vDialog.EventAct EXISTS
         szActionName = vDialog.EventAct.Tag
         nRC = zstrcmpi( szActionName, "alt-f4" )
         IF nRC = 0
            szActionName = "AltF4"
         END
      END

      szCtrlTag = vDialog.Control.Tag

      szWriteBuffer = "<% strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( strRadioGroupValue.equals( ^" +
                               vDialog.Control.RadioOrCheckboxValue + "^ ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorMapValue = ^checked=\^checked\^^;  %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      CreateTabIndexString( vDialog, szTabIndex )

      // If this window is being generated with no positioning then
      // do not create the position in the style.
      IF  szNoPositioning = ""
         CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
      END
      //CreateAbsolPosString( vDialog, szPosition, 0, 0 )
      CreateDisabledString( vDialog, szDisabled )
      FixStyleString( szStyle, szPosition, "", "" )

      // If LastY_Pos = -100 then this is the first time thru...
      IF ( ( LastY_Pos < vDialog.Control.PSDLG_Y ) )
         szWriteBuffer = "   </tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   <tr style=^border:0px^>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      ELSE
      // KJS 07/22/10 - Currently for relative positioning, the radio buttons are being created one right after the other
      // (on the same line), no matter how I paint them on the screen).  Really to look at that but since we hardly ever
      // use them, I am for a fast fix going to append "&nbsp&nbsp&nbsp" after each button, to give some spacing.
         IF szNoPositioning = "Y" AND szFirstTimeThru = "N"
            szWriteBuffer = "      <td nowrap style=^border:0px;^>&nbsp&nbsp&nbsp</td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
      END

      szStyle = szStyle + szTabIndex
   // szStyle = " style=^position:absolute;LEFT:" + szX + ";TOP:" + szY + ";^ "
      IF  szActionName != ""
         szWriteBuffer = "      <td style=^width:15px;border:0px;^><input type=^radio^ name=^" + szRadioGroupName + "^ id=^" + szCtrlTag +
                         "^ value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " onclick=^" + szActionName + "( )^  ></td>"
      ELSE
         szWriteBuffer = "      <td style=^width:15px;border:0px;^><input type=^radio^ name=^" + szRadioGroupName + "^ id=^" + szCtrlTag +
                         "^ value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " ></td>"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF szNoPositioning = "Y"
         CreateNoPosStyleString( vDialog, szStyle, "")
      ELSE
         CreateAbsolStyleString( vDialog, szStyle, 30 + lOffsetX, lOffsetY, "" )
      END

      //If we put a title on the control, when the mouse is hovered over the control, this text will display.
      szTitleHTML = ""
      szTitle = vDialog.Control.DIL_Text
      IF szTitle != ""
         szTitleHTML = " title=^" + szTitle + "^ "
      END

      szClass = vDialog.Control.CSS_Class
      IF szClass = ""
         szWriteBuffer = "      <td nowrap style=^border:0px;^><span " + szTitleHTML + ">" + vDialog.Control.Text + "</span></td>"
      ELSE
         szWriteBuffer = "      <td nowrap style=^border:0px;^><span class=^" + szClass + "^ " + szTitleHTML + ">" + vDialog.Control.Text + "</span></td>"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      LastY_Pos = vDialog.Control.PSDLG_Y
      szFirstTimeThru = "N"
   END
   szWriteBuffer = "   </tr>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   </table>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_ChildFunctions
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_ChildFunctions( VIEW vDialog BASED ON LOD TZWDLGSO,
                       INTEGER          lFile,
                       STRING ( 10000 ) szWriteBuffer,
                       STRING ( 255 )   szFormName )

   STRING ( 50 ) szCtrlTag

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_CrteCheckBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_CrteCheckBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY )

   // Format an CHECKBOX control.
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 10 )  szDisabled
   STRING ( 100 ) szPosition
   STRING ( 16 )  szTabIndex
   STRING ( 20 )  szSpaces

   szWriteBuffer = "<%   strErrorMapValue = ^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   IF vDialog.CtrlMapView EXISTS
      szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                      ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC <= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                      ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                      ".CheckExistenceOfEntity( strSessionId, ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strRadioGroupValue = " +
                      vDialog.CtrlMapView.Name + ".GetString( strSessionId, ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "   if ( strRadioGroupValue.equals( ^" +
                   vDialog.Control.RadioOrCheckboxValue + "^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strErrorMapValue = ^checked=\^checked\^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   CreateTabIndexString( vDialog, szTabIndex )

   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF  szNoPositioning = ""
      CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
   END

   IF vDialog.Control.VisibleBorder = "Y"
      szPosition = szPosition + "border:'2px solid';border-style:'groove';"
   END

   szStyle = "style=^" + szPosition + "^" + szTabIndex

   CreateDisabledString( vDialog, szDisabled )

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle = ""
      szTitleHTML = ""
   ELSE
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   IF vDialog.EventAct EXISTS
      szWriteBuffer = "<input type=^checkbox^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szDisabled +
                      " value=^" + vDialog.Control.RadioOrCheckboxValue +
                      "^ <%=strErrorMapValue%> " + szTitleHTML + szStyle + " onclick=^" + vDialog.EventAct.Tag + "( )^>"
   ELSE
      szWriteBuffer = "<input type=^checkbox^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szDisabled +
                      " value=^" + vDialog.Control.RadioOrCheckboxValue +
                      "^ <%=strErrorMapValue%> " + szTitleHTML + szStyle + ">"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF  szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
      // If we aren't putting in absolute positioning, make sure that there is a little space between
      // the checkbox and the text.
      szSpaces = "&nbsp "
   ELSE
      CreateAbsolStyleString( vDialog, szStyle, 30 + lOffsetX, lOffsetY, "" )
      szSpaces = ""
   END
   szClass = vDialog.Control.CSS_Class

   IF szClass = ""
      szWriteBuffer = "<span " + szTitleHTML + szStyle + ">" + szSpaces + vDialog.Control.Text + "</span>"
   ELSE
      szWriteBuffer = "<span class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + szSpaces + vDialog.Control.Text + "</span>"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_CrteEditBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_CrteEditBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                    INTEGER          lFile,
                    STRING ( 10000 ) szWriteBuffer,
                    STRING ( 50 )    szIndent,
                    STRING ( 32 )    szCtrlTag,
                    STRING ( 1 )     szTableRowFlag,
                    STRING ( 20 )    szJustify,
                    STRING ( 1 )     szNoPositioning,
                    INTEGER          lOffsetX,
                    INTEGER          lOffsetY )

   // Format an EDITBOX control.

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 32 )  szContextName
   STRING ( 300 ) szValue
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 64 )  szType
   STRING ( 64 )  szWidget
   STRING ( 16 )  szTabIndex
   STRING ( 50 )  szEditActionCode
   STRING ( 32 )  szActionName
   STRING ( 10 )  szMaxStringLength
   STRING ( 10 )  szDisabled
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szCreateSessionVariable
   STRING ( 1 )   szNoOutputMapping
   INTEGER        lMaxStringLength
   INTEGER        lStyleX
   INTEGER        lTemp
   SHORT          bMapping
   SHORT          nRC

   // For testing no height on input boxes
   STRING ( 10 )  szWidth
   DECIMAL        dDLUnits
   STRING ( 100 )  szSize
   STRING ( 100 )  szPosition

   CreateTabIndexString( vDialog, szTabIndex )
   //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "<%=strErrorColor%>" )
   // KJS 07/08 - We placed DOCTYPE at the top of our html pages now.  For some reason, because of this
   // even though the pixel height is exactly the same as before, it shows up higher in the browser.
   // Because of this we have taken out the height for now and the input height will be determined in the
   // CSS.
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   szSize = "width:" + szWidth + "px;"
   // If zNoPositioning is null then we are using absolute positioning for controls
   IF  szNoPositioning = ""
      CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
   END

   FixStyleString( szStyle, szSize, szPosition,  "<%=strErrorColor%>"  )

   szStyle = szStyle + szTabIndex

   // If there is a WebControlProperty for "Create Session Variable", then create a session variable
   // with the value of this edit box with the Control Tag as the name.
   szCreateSessionVariable = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Create Session Variable"
   IF RESULT >= zCURSOR_SET
      szCreateSessionVariable = "Y"
   END

   // There may be times when we do not want to show the mapping of a field.  Like for instance a password field.  If the user types
   // in the wrong password, then we don't want to leave what was already typed we want the edit box to be blank.  This is
   // for xss problems (cross-scripting attacks).
   szNoOutputMapping = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Output Mapping"
   IF RESULT >= zCURSOR_SET
      szNoOutputMapping = "Y"
   END

// szWriteBuffer = "<% strErrorMapValue = ^^; %>"  extraneous???
// WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )           dks 2005.01.11

   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET AND szNoOutputMapping = ""
      bMapping = 1
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = vAppSubtask.CheckError( strSessionId, ^" + szCtrlTag + "^, strErrorTitle );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( strErrorMapValue.length( ) > 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorColor = ^color:red;^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorColor = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                      vDialog.CtrlMapView.Name + "^, vAppSubtask );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC <= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         " + vDialog.CtrlMapView.Name +
                      ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name +
                      ".CheckExistenceOfEntity( strSessionId, ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END

      IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
         lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
         szMaxStringLength = lMaxStringLength
      ELSE
         szMaxStringLength = "254"
      END
      szWriteBuffer = "            strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".GetStringFromAttributeByContext( strSessionId, ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                      szContextName + "^, " + szMaxStringLength + " );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            " + vDialog.CtrlMapView.Name +
                      ".TraceLine( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^, strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // If there is a WebControlProperty for "Create Session Variable", then create a session variable
      // with the value of this edit box with the Control Tag as the name.
      IF szCreateSessionVariable = "Y"
         szWriteBuffer = "            session.setAttribute(^" + szCtrlTag + "^, strErrorMapValue); "
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END
      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            " + vDialog.CtrlMapView.Name +
                      ".TraceLine( ^Entity does not exist: ^, ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"

      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      bMapping = 0
   END

   //KJS 07/25/07
   //See if there is a WebControlProperty for "Hidden"
   //I don't think "hidden" is a webcontrolproperty for the editbox yet
   //but since I don't think this hurts I'm going to keep it in.
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
   IF RESULT >= zCURSOR_SET
      szWCP_Hidden = "Y"
   ELSE
      szWCP_Hidden = "N"
   END

   IF vDialog.Control.WebCtrlType = "Hidden" OR szWCP_Hidden = "Y"
      szType = " type=^hidden^ "
   ELSE
   //IF vDialog.CtrlMapER_Domain EXISTS AND vDialog.CtrlMapER_Domain.Name = "Password"
   IF vDialog.CtrlMapER_Domain EXISTS AND vDialog.Control.Subtype = 4
      szType = " type=^password^ "
   ELSE
      szType = " type=^text^ "
   END
   END

   // If there is an Event for the EditBox, build code to insert in <input statement.
   szEditActionCode = ""
   IF vDialog.EventAct EXISTS
      szActionName = vDialog.EventAct.Tag
      IF vDialog.Event.Type = 16
         szEditActionCode = " onfocus=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 17
         szEditActionCode = " onblur=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 18
         szEditActionCode = " onchange=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 21
         szEditActionCode = " onkeydown=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 22
         szEditActionCode = " onkeyup=^" + szActionName + "()^ "
      ELSE
      IF vDialog.Event.Type = 24
         szEditActionCode = " onclick=^" + szActionName + "()^ "
      END
      END
      END
      END
      END
      END
   ELSE
      // If there is a Default button for the window, we must add some characters
      // to the end of the input statement.
      CreateViewFromView( vDialogRoot, vDialog )
      nRC = ResetViewFromSubobject( vDialogRoot )
      LOOP WHILE nRC = 0
         nRC = ResetViewFromSubobject( vDialogRoot )
      END
      IF vDialogRoot.Window.DfltButton != ""
         szEditActionCode = " onKeyPress=^return _OnEnter( event )^"
      ELSE
         szEditActionCode = ""
      END
      DropView( vDialogRoot )
   END

   IF szNoOutputMapping = "Y"
         szValue = "value=^^"
   ELSE
      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0 AND bMapping = 0
         szValue = "value=^" + vDialog.Control.Text + "^"
      ELSE
         szValue = "value=^<%=strErrorMapValue%>^"
      END
   END

   //KJS 10/19/07 - Added title.
   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateDisabledString( vDialog, szDisabled )
   szClass = vDialog.Control.CSS_Class
   IF szClass = ""
      szWriteBuffer = "<input name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szDisabled + szTitleHTML + szStyle + szType +
                      szValue + szEditActionCode + " >"
   ELSE
      szWriteBuffer = "<input class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " + szDisabled +
                      szTitleHTML + szStyle + szType + szValue + szEditActionCode + " >"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_CrteJPG
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_CrteJPG( VIEW vDialog BASED ON LOD TZWDLGSO,
                INTEGER          lFile,
                STRING ( 10000 ) szWriteBuffer,
                STRING ( 50 )    szIndent,
                STRING ( 32 )    szCtrlTag,
                STRING ( 1 )     szNoPositioning,
                INTEGER          lOffsetX,
                INTEGER          lOffsetY )

   // Format a BITMAP or JPG control.

   STRING ( 32 )  szContextName
   STRING ( 256 ) szClass
   STRING ( 256 ) szStyle
   STRING ( 16 )  szTabIndex
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) szText
   STRING ( 32 )  szActionName
   INTEGER        nRC

   CreateTabIndexString( vDialog, szTabIndex )

   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF  szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
   ELSE
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END

   //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   szStyle = szStyle + szTabIndex

   szActionName = ""
   IF vDialog.EventAct EXISTS
      szActionName = vDialog.EventAct.Tag
      nRC = zstrcmpi( szActionName, "alt-f4" )
      IF nRC = 0
         szActionName = "AltF4"
      END
   END

   szClass = ""
   IF vDialog.Control.CSS_Class != ""
      szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
   END

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END
   szText = ""
   IF  vDialog.Control.Text != ""
      szText = " alt=^" + vDialog.Control.Text + "^ "
   END

   //There might be mapping for this control which means we should get the
   //image from the mapping, or there might be an image file name, so we wouldn't
   //use the mapping.
   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET

      szWriteBuffer = "<% strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                      ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( nRC <= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMapValue = " +
                      vDialog.CtrlMapView.Name +
                      ".GetStringFromAttributeByContext( strSessionId, ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                      szContextName + "^, 2000 );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      IF  szActionName = ""
         szWriteBuffer = "<img src=^<%=strErrorMapValue%>^ " + szStyle + szTitleHTML + szClass + szText + ">"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      ELSE
         szWriteBuffer = "<img src=^<%=strErrorMapValue%>^ onclick=^" + szActionName + "()^ " + szStyle + szTitleHTML + szClass + szText + ">"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   ELSE
      //Not getting image from mapping, a file name has been specified.
      IF vDialog.Control.WebFileName != ""
         IF szActionName = ""
            //szWriteBuffer = "<a href=^#^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ ><img src=^" +
            //   vDialog.Control.WebFileName + "^ " + szStyle + szTitleHTML + "></a>"
            szWriteBuffer = "<img src=^" + vDialog.Control.WebFileName + "^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                              szStyle + szTitleHTML + szClass + szText + ">"
         ELSE
            szWriteBuffer = "<img src=^" + vDialog.Control.WebFileName + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ onclick=^" +
                            szActionName + "( )^ " + szStyle + szTitleHTML + szClass + szText + ">"
            //szWriteBuffer = "<a href=^#^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ ^onclick=^" +
            //                szActionName + "( )^><img src=^" + vDialog.Control.WebFileName + "^ " + szStyle + szTitleHTML + "></a>"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      ELSE
         //Neither mapping nor filename was specified.
         szWriteBuffer = "//There was no information on where to get the image.  Nothing created."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
  END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSP_CrteComboBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSP_CrteComboBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY )

   // Combo boxes on OUTPUT

   // There are two kinds of combo boxes on output.
   // 1. Domain combo boxes, which need to get the individual table values
   //    from core calls.
   // 2. Select combo boxes (e.g.  Automatic Include, Set Foreign Key, etc.)
   //    which read the data values from an object, the same as a list box.
   // These two conditions are handled quite separately below, even though
   // the resulting HTML is basically the same.

   VIEW vList   BASED ON LOD TZWDLGSO  // identifies attribute mapping for list entries
   VIEW vEntity BASED ON LOD TZWDLGSO  // identifies entity mapping for list entries
   VIEW vScope  BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szWidth
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 10 )  szDisabled
   DECIMAL        dDLUnits
   INTEGER        lSubtype
   SHORT          nRC

   szStyle = "width:" + szWidth + "px; height:" + szHeight + "px;"
   szClass = vDialog.Control.CSS_Class

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateTabIndexString( vDialog, szTabIndex )
   // We will set the height to the constant 20 px.
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   szHeight = "20"
   // The height used to be hard coded but we took that out!!!
   //szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"
   szStyle = "style=^width:" + szWidth + "px;"

   // If szNoPositioning is null then we are using absolute positioning.
   IF  szNoPositioning = ""

      zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
      zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )

      szStyle = szStyle + "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
      // CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   ELSE
      szStyle = szStyle + "^ "
   END

   szStyle = szStyle + szTabIndex

   szWriteBuffer = "<% strErrorMapValue = ^^;  %>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   lSubtype = vDialog.Control.Subtype
   nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
   IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

      // Domain type combo box

      szWriteBuffer = "<input name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ type=^hidden^ value=^0^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // The Select Action is either onfocusout or onchange depending on the following.
      // 1. If no Action, use onchange because this allows using keystrokes in the control.
      // 2. If Action is SelectChange, use onchange.
      // 3. If Action is SelectEnd, use onblur
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectAction   = "onchange"
            szSelectFunction = "OnChange"
         ELSE
            szSelectAction   = "onblur"
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectAction   = "onchange"
         szSelectFunction = "OnChange"
      END

      CreateDisabledString( vDialog, szDisabled )

      IF szClass = ""
         szWriteBuffer = "<select name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^1^ " + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      ELSE
         szWriteBuffer = "<select class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^1^ " + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS
         szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                      ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( nRC > 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // We get each table value from a core call.
         IF vDialog.CtrlMapLOD_Attribute EXISTS
            szWriteBuffer = "      int    nRowCnt= 0;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      Vector ComboVector;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END
/***** 04/26/11 */
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                     ".CheckExistenceOfEntity( strSessionId, ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strComboCurrentValue = " + vDialog.CtrlMapView.Name +
                     ".GetStringFromAttributeByContext( strSessionId, ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                     vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
/*****/
            //szWriteBuffer = "      strComboCurrentValue = " + vDialog.CtrlMapView.Name +
            //         ".GetStringFromAttributeByContext( strSessionId, ^" +
            //         vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
            //         vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, 200 );"
            //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      ComboVector = " + vDialog.CtrlMapView.Name +
                     ".GetTableListForAttribute( strSessionId, ^" + vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                     vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRowCnt = (int) ComboVector.size( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      int k;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      int nFirst;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      if ( nRowCnt > 0 ) "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            IF vDialog.CtrlMapER_Attribute.NotNull = "Y"
               // Generate code when attribute IS required.
               szWriteBuffer = "      // Code for required attribute, which doesn't allow a blank entry."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         nFirst = (ComboVector.elementAt( 0 ) == ^^) ? 1 : 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            ELSE
               // Generate code when attribute is NOT required.
               szWriteBuffer = "      // Code for NOT required attribute, which makes sure a blank entry exists."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( ComboVector.elementAt( 0 ) != ^^ )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            if ( strComboCurrentValue == ^^ )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            <option selected=^selected^ value=^^></option>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            <option value=^^></option>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "            }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

               szWriteBuffer = "         nFirst = 0;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "         for ( k = nFirst; k < nRowCnt; k++ )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strErrorMapValue = (String) ComboVector.elementAt( k );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // The following if statement eliminates a null value, which would be the second null in the combo box.
            szWriteBuffer = "            if ( strErrorMapValue.length( ) != 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               if ( strComboCurrentValue.equals( strErrorMapValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  <option selected=^selected^ value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "                  <option value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
      END

      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      } //if ( nRowCnt > 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</select>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   ELSE  //kelly1
      // Select type combo box
      CreateViewFromViewForTask( vList, vDialog, 0 )
      SET CURSOR NEXT vList.CtrlMap
      CreateViewFromViewForTask( vEntity, vList, 0 )
      SET CURSOR NEXT vEntity.CtrlMap
      CreateViewFromViewForTask( vScope, vEntity, 0 )
      SET CURSOR NEXT vScope.CtrlMap

      // The Select Action is either onblur or onchange depending on the following.
      // 1. If no Action, use onchange because this allows using keystrokes in the control.
      // 2. If Action is SelectChange, use onchange.
      // 3. If Action is SelectEnd, use onfocusout.
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectAction   = "onchange"
            szSelectFunction = "OnChange"
         ELSE
            szSelectAction   = "onblur"
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectAction = "onchange"
         szSelectFunction = "OnChange"
      END
      IF szClass = ""
         szWriteBuffer = "<select name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^1^" + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      ELSE
         szWriteBuffer = "<select class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^1^" + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS
         szWriteBuffer = "   nRC = " + vList.CtrlMapView.Name +
                         ".GetView( strSessionId, ^" + vList.CtrlMapView.Name + "^, vAppSubtask );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( nRC > 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strComboCurrentValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      zeidon.zView v" + szCtrlTag + " = new zeidon.zView( strSessionId );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // If mapping is specified, set up the value to be used in selecting
         // the correct entry.
         IF vDialog.CtrlMapLOD_Attribute EXISTS
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                            ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name +
                            "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC > 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".CheckExistenceOfEntity( strSessionId, ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END
            szWriteBuffer = "            strComboCurrentValue = " + vDialog.CtrlMapView.Name +
                     ".GetStringFromAttributeByContext( strSessionId, ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                     vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
         ELSE
            szWriteBuffer = "      strComboCurrentValue = ^^;"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // See if a list entity has been specified, and if so, use it.
         IF vEntity.CtrlMapLOD_Entity EXISTS
            szListEntityName = vEntity.CtrlMapLOD_Entity.Name
         ELSE
            szListEntityName = vList.CtrlMapRelatedEntity.Name
         END

         // See if a scoping entity has been specified, and if so, use it.
         lSubtype = vDialog.Control.Subtype
         lSubtype = IsFlagSequenceSet( lSubtype, zCOMBOBOX_SCOPE_OI )
         IF lSubtype = 0
            IF vScope.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = vScope.CtrlMapLOD_Entity.Name
            ELSE
               szScopingEntityName = ""
            END
         END

         szWriteBuffer = "      v" + szCtrlTag + ".CreateViewFromView( strSessionId, " + vList.CtrlMapView.Name + " );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      ComboCount = 0;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboSelectedValue = ^0^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Auto Include
         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // For Auto Include, we are automatically putting a blank entry as the first entry in the
            // combobox.  With this in mind, there is code in DoInputMapping that assumes the first
            // entry in a combobox is null (or blank).  What if the user doesn't want a blank entry?
            // and wants to use the "No null in list" checkbox in the painter.  I would need to
            // change this code but I'm not sure how because I can't tell from DoInputMapping what
            // the value of combobox.selectedindex[0] is, I only know they selected the index 0.
            szWriteBuffer = "      // For Auto Include, always add a null entry to the combo box.s"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      ComboCount++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( strComboCurrentValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         <option selected=^selected^ value=^^></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         <option value=^^></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         IF lSubtype = 0
            szWriteBuffer = "      nRC = v" + szCtrlTag + ".SetCursorFirst( strSessionId, ^" +
                                         szListEntityName + "^, ^" + szScopingEntityName + "^ );"
         ELSE
            szWriteBuffer = "      nRC = v" + szCtrlTag + ".SetCursorScopeOI( strSessionId, ^" +
                                         szListEntityName + "^, 1 ); // first" // zPOS_FIRST
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      while ( nRC >= 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vList.CtrlMapLOD_Attribute EXISTS
            IF vList.CtrlMapContext EXISTS
               szContextName = vList.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            szWriteBuffer = "         strErrorMapValue = v" + szCtrlTag +
                            ".GetStringFromAttributeByContext( strSessionId, ^" +
                            vList.CtrlMapRelatedEntity.Name + "^, ^" +
                            vList.CtrlMapER_Attribute.Name + "^, ^" +
                            szContextName + "^, 254 );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END


         // KJS 05/20/14 - There were some issues for auto include when the "list view" already had a blank entry, then
         // two blank entries were in the list and this caused errors. For auto include check if one of these entries is
         // blank, don't add it if it is.
         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = "         // For Auto Include, we have already created a blank entry for the combobox, check to make "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // we don't add another blank entry. That will cause errors. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( !StringUtils.isBlank( strErrorMapValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         szWriteBuffer = "         if ( strComboCurrentValue.equals( strErrorMapValue ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option selected=^selected^ value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option value=^<%=strErrorMapValue%>^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = "         } // if ( !StringUtils.isBlank( strErrorMapValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         szWriteBuffer = "         ComboCount++;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF lSubtype = 0
            szWriteBuffer = "         nRC =  v" + szCtrlTag +
                            ".SetCursorNext( strSessionId, ^" + szListEntityName +
                            "^, ^" + szScopingEntityName + "^ );"
         ELSE
            szWriteBuffer = "         nRC =  v" + szCtrlTag +
                            ".SetCursorScopeOI( strSessionId, ^" + szListEntityName + "^, 3 ); // next" // zPOS_NEXT
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         DropView( vList )
         DropView( vEntity )
         DropView( vScope )
      END

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "      v" + szCtrlTag + ".DropView( strSessionId );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</select>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

END

/*************************************************************************************************
**
**    OPERATION: GenJSP_CrteGroupTable
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSP_CrteGroupTable(  VIEW vDialog BASED ON LOD TZWDLGSO,
                        VIEW vGroupParent BASED ON LOD TZWDLGSO,
                        VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        STRING ( 100 )   szIndent,
                        INTEGER          lTableRowCnt,
                        STRING ( 1 )     szNoPositioning )

   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   INTEGER        LastY_Pos
   INTEGER        iHighestColCnt
   INTEGER        iColCnt
   INTEGER        nRC
   INTEGER        iColWidth
   INTEGER        lMaxStringLength
   INTEGER        lTemp
   INTEGER        lStyleX
   INTEGER        Size
   INTEGER        lOffsetX
   INTEGER        lOffsetY
   DECIMAL        dDLUnits
   STRING ( 10 )  szColCnt
   STRING ( 10 )  szWidth
   STRING ( 10 )  szHeight
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szParentCtrlTag
   STRING ( 85 )  szHTMLCtrlID
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 100 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 32 )  szActionName
   STRING ( 50 )  szControlType
   STRING ( 16 )  szTabIndex
   STRING ( 256 ) szText
   STRING ( 32 )  szContextName
   STRING ( 10 )  szMaxStringLength
   STRING ( 32 )  szSize
   STRING ( 256 ) szAbsoluteStyle

   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   STRING ( 1 )   szSpanFlag
   STRING ( 1 )   szDivFlag
   STRING ( 1 )   szScrollableFlag
   STRING ( 1 )   szScrollingTable
   STRING ( 1 )   szGroupIsTable
   STRING ( 1 )   szTinyMCEFlag
   STRING ( 100 ) szIndentGroup
   STRING ( 50 )  szWebCtrlType

   LastY_Pos = 0
   iColCnt = 0
   iHighestColCnt = 0
   szIndent = szIndent + "   "

   X_Size  = vGroupParent.Control.SZDLG_X
   Y_Size  = vGroupParent.Control.SZDLG_Y
   szParentCtrlTag = vGroupParent.Control.Tag

   IF vGroupParent.Control.CSS_Class != ""
      szClass = " class=^" + vGroupParent.Control.CSS_Class + "^"
   ELSE
      szClass = ""
   END

   IF  vDialog.Control EXISTS
      SET CURSOR  FIRST vDialog.Control
      LastY_Pos = vDialog.Control.PSDLG_Y
   END

   // Loop through each Control within this group.  Determine what row has the largest
   // number of controls.  This will determine how many columns our table will have.
   FOR EACH vDialog.Control

      IF  LastY_Pos < vDialog.Control.PSDLG_Y

         IF  iColCnt > iHighestColCnt
            iHighestColCnt = iColCnt
         END
         iColCnt = 0
      END

      iColCnt = iColCnt + 1

      LastY_Pos = vDialog.Control.PSDLG_Y
   END

   //TraceLineI("**** Highest Col Count *** ", iHighestColCnt )
   zIntegerToString( szColCnt, 10, iHighestColCnt )
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, X_Size * dDLUnits )
   zIntegerToString( szHeight, 10, Y_Size * dDLUnits )

   // 05/27/09 - Currently, we never put in a height.  Would we want to do this?????!!!.
   IF  szNoPositioning = "Y"

      szNoWidthFlag = ""
      SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "No Width"
      IF RESULT >= zCURSOR_SET
         szNoWidthFlag = "Y"
      END
   END

   // Create a div around the whole table.  This should probably be float.
   //szWriteBuffer = "<div style=^float:left;width:" + szWidth + "px;height:" + szHeight + "px;^" + szClass + ">"
   // KJS 09/11/09 - Neither the table or the div had an id or name.  I am not sure whether I should put the
   // id on the <table we create or on the <div> but I will put it on the div.
   szWriteBuffer = "<div id=^" + szParentCtrlTag + "^ name=^" + szParentCtrlTag + "^ style=^float:left;"
   IF szNoWidthFlag = ""
      szWriteBuffer = szWriteBuffer + "width:" + szWidth + "px;"
   END
   szWriteBuffer = szWriteBuffer + "^ " + szClass + ">"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   // Now create the table with the proper number of columns.
   //szWriteBuffer = "<table cols=" szColCount + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
   szWriteBuffer = "<table cols=" + szColCnt
   IF szNoWidthFlag = ""
      szWriteBuffer = szWriteBuffer + " style=^width:" + szWidth + "px;^ "
   END
   szWriteBuffer = szWriteBuffer + " class=^grouptable^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "<tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   LastY_Pos = 0
   IF  vDialog.Control EXISTS
      SET CURSOR  FIRST vDialog.Control
      LastY_Pos = vDialog.Control.PSDLG_Y
   END


   // Loop through the controls, placing each control in a different column.
   // When the Y_Pos has changed, we need to create a new row in the table.
   FOR EACH vDialog.Control

      // We are onto a new row
      IF  LastY_Pos < vDialog.Control.PSDLG_Y

         // If LastY_Pos is 0 then we are on the first control.
         // If this wasn't the very first row, then
         // create the end tag for the last row.
         //IF  LastY_Pos != 0
            // If the previous row didn't have as many controls as there are
            // table columns, then we need to create a blank column
            LOOP  WHILE iColCnt < iHighestColCnt
               szWriteBuffer = "<td>&nbsp</td>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               iColCnt = iColCnt + 1
            END
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //END

         szWriteBuffer = "<tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         // Since we are on a new row, reset the column count.
         iColCnt = 0
      END

      szCtrlTag = vDialog.Control.Tag
      szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "
      szControlType = vDialog.ControlDef.Tag
      CreateNoPosStyleString( vDialog, szStyle, "" )

      X_Pos = vDialog.Control.PSDLG_X
      //TraceLineI("*** Control Start position *** ", vDialog.Control.PSDLG_X )
      LastY_Pos = vDialog.Control.PSDLG_Y

      // We want to find out how wide this column should bed
      nRC = SetCursorNextEntity( vDialog, "Control", "" )
      iColWidth = 0
      IF  nRC >= zCURSOR_SET AND LastY_Pos = vDialog.Control.PSDLG_Y
         //TraceLineI("*** Next Control Start position *** ", vDialog.Control.PSDLG_X )
         iColWidth = vDialog.Control.PSDLG_X - X_Pos
      END

      IF  nRC >= zCURSOR_SET
         nRC = SetCursorPrevEntity( vDialog, "Control", "" )
      END

      IF  iColWidth = 0
         //TraceLineI("*** Width is width of control *** ", vDialog.Control.SZDLG_X )
         iColWidth = vDialog.Control.SZDLG_X
      END

      szClass = vDialog.Control.CSS_Class
      IF vDialog.Control.CSS_Class != ""
         szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
      ELSE
         szClass = ""
      END

      //KELLY0210
      zIntegerToString( szWidth, 10, iColWidth * dDLUnits )
      szWriteBuffer = "<td valign=^top^ " + szClass + "style=^width:" + szWidth + "px;^>"
      //szWriteBuffer = "<td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //****************************************************************************

      /*
      IF szControlType = "GroupBox"  // Grid or Table
         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
         CreateViewFromView( vGroupParent, vDialog )
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         TraceLineS("**** GroupBox in Table ", " Before Recurs ")
         GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, lFile, szWriteBuffer, szIndent,
                                 lTableRowCnt, szNoPositioning, 0, 0 )
         TraceLineS("**** GroupBox in Table ", " After Recurs ")
         ResetViewFromSubobject( vDialog )
         DropView( vGroupParent )
         vGroupParent = 0
      END
      */

      IF szControlType = "GroupBox"

         // Do I need to check if this is a groupbox and we are not using absolute positioning, then I want to
         // check if there are other groupboxes at this same PSDLG_Y.  If so, then these groups would need to
         // have a float:left applied to them.
         // Would I only want to do this once for the row?
         // Or, do I want to put a float on every div created and then create a <div style="clear:both;"</div> after
         // every row?
         //IF  szNoPositioning = "Y" AND szCheckedRowForGroups         //END


         // InitializeRepeatingGroup for GroupBox

         // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
         // as a table and try and position what is in this group box as a table.
         szGroupIsTable = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
         IF RESULT >= zCURSOR_SET
            szGroupIsTable = "Y"
         END

         szNoHeightFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
         IF RESULT >= zCURSOR_SET
            szNoHeightFlag = "Y"
         END

         szNoWidthFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
         IF RESULT >= zCURSOR_SET
            szNoWidthFlag = "Y"
         END

      END

      // Initialize the szAbsoluteStyle variable with X and Y values.
      IF  szNoPositioning = "Y"
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szAbsoluteStyle = ""
         ELSE
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
            szAbsoluteStyle = "style=^width:" + szWidth + ";^"
         ELSE
         IF szControlType = "GroupBox" AND szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
            szAbsoluteStyle = "style=^height:" + szHeight + ";^"
         ELSE
            CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
         END
         END
         END
      ELSE
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
      END

      szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      IF szControlType = "GroupBox" AND szGroupIsTable = "Y"

            X_Size = vDialog.Control.SZDLG_X
            Y_Size = vDialog.Control.SZDLG_Y

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            CreateViewFromView( vGroupParent, vDialog )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteGroupTable( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, lTableRowCnt, szNoPositioning )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
      END

      IF szControlType = "GroupBox" AND szGroupIsTable = ""

         // Set Group flags either from old szWebCtrlType or new WebControlProperty.
         IF szWebCtrlType = "Scrollable"
            szScrollableFlag = "Y"
         ELSE
            szScrollableFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrollable"
            IF RESULT >= zCURSOR_SET
               szScrollableFlag = "Y"
            END
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET
               szDivFlag = "Y"
            END
         END


         // Is this clear even working???!!!
         IF szWebCtrlType = "Clear"
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.PSDLG_X * dDLUnits + lOffsetX  // borrow these for a second
            Y_Size = vDialog.Control.PSDLG_Y * dDLUnits + lOffsetY
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, X_Size, Y_Size )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szSpanFlag = "Y"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<span" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<span" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szDivFlag = "Y"

            // Add Scrollable if requested.
            IF szScrollableFlag = "Y"
               zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            END

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szWebCtrlType = "DivScroll"
            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
            // Default Group is div for now

            // If we are not using absolute positioning, then make all the divs float left.
            IF  szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            /*IF szClass = ""
               szWriteBuffer = "<fieldset " + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<fieldset class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END*/
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSP_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                    lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0

            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         END
         END
         END

      END  // Control is groupbox

      IF szControlType = "Text"  // TEXT
         GenJSP_CrteText( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, szCtrlTag,
                          "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "EditBox"  // EDITBOX
         GenJSP_CrteEditBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                             "", "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "Calendar"  // CALENDAR
         GenJSP_CrteCalendar( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                              "", "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "RadioGrp" // RADIO BUTTON GROUP
         szWriteBuffer = "<% strErrorMapValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         IF vDialog.CtrlMapView EXISTS
            szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name +
                            ".GetView( strSessionId, ^" + vDialog.CtrlMapView.Name + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( nRC <= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                            ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                            ".CheckExistenceOfEntity( strSessionId, ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strRadioGroupValue = " +
                            vDialog.CtrlMapView.Name + ".GetString( strSessionId, ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                            vDialog.CtrlMapER_Attribute.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
         //I'm going to do this like the way group box is (or was).  If there is text
         //to go on the box then we will create <fieldset.  If there is no text then
         //we will create a div.
         //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
         //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
         //an id and name but think it should.
         IF vDialog.Control.Text = ""
            //szWriteBuffer = "<div " + szStyle + ">"
            szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ " + szStyle + ">"
         ELSE
            szWriteBuffer = "<fieldset " + szStyle + ">"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vDialog.Control.Text != ""
            szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndent = szIndent + "   "
         GenJSP_CrteCtrlsRadio( vDialog, lFile, szWriteBuffer, szIndent,
                                szCtrlTag, szNoPositioning, 0, 0 )
         ResetViewFromSubobject( vDialog )
         IF vDialog.Control.Text = ""
            szWriteBuffer = "</div>"
         ELSE
            szWriteBuffer = "</fieldset>"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      IF szControlType = "CheckBox"  // CHECKBOX
         GenJSP_CrteCheckBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                              "", "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "PushBtn"  // PUSH BUTTON
         szActionName = ""
         IF vDialog.EventAct EXISTS
            szActionName = vDialog.EventAct.Tag
            nRC = zstrcmpi( szActionName, "alt-f4" )
            IF nRC = 0
               szActionName = "AltF4"
            END
         END

         CreateTabIndexString( vDialog, szTabIndex )
         szStyle = szStyle + szTabIndex

         szText = ""
         szText = vDialog.Control.Text
         // Set Class as either null or with Class value.
         IF vDialog.Control.CSS_Class = ""
            szClass = ""
         ELSE
            szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
         END

         //If we put a title on the control, when the mouse is hovered over the control, this text will display.
         szTitleHTML = ""
         szTitle = vDialog.Control.DIL_Text
         IF szTitle != ""
            szTitleHTML = " title=^" + szTitle + "^ "
         END

         szWriteBuffer = "<button type=^button^ " + szClass + szTitleHTML + szHTMLCtrlID

         szWriteBuffer = szWriteBuffer + "value=^" + szText + "^ onclick=^" +
                         szActionName + "( )^ " + " " + szStyle + ">" + szText + "</button>"

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END  //End of PushBtn

      IF szControlType = "ComboBox"  // COMBOBOX
         GenJSP_CrteComboBox( vDialog, lFile, szWriteBuffer, szIndent,
                              szCtrlTag, "", szNoPositioning, 0, 0 )
      END

      IF szControlType = "Bitmap" OR szControlType = "BitmapBtn"  // BITMAP or JPG
         GenJSP_CrteJPG( vDialog, lFile, szWriteBuffer, szIndent,
                         szCtrlTag, szNoPositioning, 0, 0 )
      END

      IF szControlType = "ListBox"  // LISTBOX
         GenJSP_CrteListBox( vDialog, lFile, szWriteBuffer, szIndent,
                             szCtrlTag, szNoPositioning, 0, 0 )
      END  // IF szControlType = "ListBox"

      IF szControlType = "MLEdit"  // MLEDIT
         SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
         IF RESULT >= zCURSOR_SET
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // " + szControlType + ": " + szCtrlTag
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   nRC = " + vDialog.CtrlMapView.Name + ".GetView( strSessionId, ^" +
                            vDialog.CtrlMapView.Name + "^, vAppSubtask );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( nRC <= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
                            ".TraceLine( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name +
                            ".CheckExistenceOfEntity( strSessionId, ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szContextName = ""
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            END

            IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
               lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "254"
            END

            szWriteBuffer = "         strErrorMapValue = " +
                            vDialog.CtrlMapView.Name +
                            ".GetStringFromAttributeByContext( strSessionId, ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^, ^" +
                            vDialog.CtrlMapER_Attribute.Name + "^, ^" +
                            szContextName + "^, " + szMaxStringLength + " );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"

            lStyleX = vDialog.Control.ExtendedStyle
            lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
            IF lTemp != 0
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.SZDLG_X
            Size = X_Size / 4
            zIntegerToString( szSize, 10, Size )
            Y_Size = vDialog.Control.SZDLG_Y
            Size = Y_Size / 12
            zIntegerToString( szHeight, 10, Size )

            IF vDialog.Control.VisibleBorder = "Y"
               zAppendQuotedString( szStyle, "border:'4px solid';border-style:'groove';", "style=", "^" )
            ELSE
               zAppendQuotedString( szStyle, "border:'2px solid';border-style:'groove';", "style=", "^" )
            END
            zAppendQuotedString( szStyle, szAbsoluteStyle, "style=", "^" )


            szTinyMCEFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "wysiwyg TinyMCE"
            IF RESULT >= zCURSOR_SET
               szTinyMCEFlag = "Y"
            END

            IF vDialog.Control.WebCtrlType = "wysiwygEditor" OR szTinyMCEFlag = "Y"

               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szClass = "mceSimple" // "mceSimple" is TinyMCE default
               END

               szWriteBuffer = "<textarea" + szHTMLCtrlID +
                               "class=^" + szClass + "^ " + szTitleHTML +
                               szStyle + ">" +
                               "<%=strErrorMapValue%></textarea>"

            ELSE
               szClass = ""
               szClass = vDialog.Control.CSS_Class
               CreateTabIndexString( vDialog, szTabIndex )
               szWriteBuffer = "<textarea" + szHTMLCtrlID + szTitleHTML +
                               "class=^" + szClass + "^ " + 
                               szStyle + szTabIndex + " wrap=^wrap^>" +
                               "<%=strErrorMapValue%></textarea>"

            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END   //IF szControlType = "MLEdit"

      //****************************************************************************

      szWriteBuffer = "</td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      iColCnt = iColCnt + 1
   END

   // If the previous row didn't have as many controls as there are
   // table columns, then we need to create a blank column
   LOOP  WHILE iColCnt < iHighestColCnt
      szWriteBuffer = "<td>&nbsp</td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      iColCnt = iColCnt + 1
   END

   szWriteBuffer = "</tr>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   szWriteBuffer = "</table>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   szWriteBuffer = "</div>  <!-- " + szParentCtrlTag + " --> "
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END
/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: BuildSideNavSection
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
BuildSideNavSectionJ( VIEW vDialog,
                      VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                      INTEGER lFile,
                      STRING (1) szReusableMenu,
                      VIEW vDialogMenu BASED ON LOD TZWDLGSO )

   STRING ( 10000 ) szWriteBuffer
   STRING ( 50 )    szNavigationTitle
   STRING ( 50 )    szHTML_Name
   STRING ( 50 )    szDialogName
   STRING ( 50 )    szOptionTag
   STRING ( 50 )    szMenuName
   STRING ( 34 )    szActionName
   STRING ( 256 )   szClass
   STRING ( 256 )   szClass2
   INTEGER          ActionType
   SHORT            nRC

   // SIDE NAVIGATION BAR
   //TraceLineS( "*** BuildSideNavSection Window *** ", vDialog.Window.Tag )

   szWriteBuffer = ""
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "<div id=^leftcontent^>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   szWriteBuffer = "<!-- Side Navigation *********************** -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   IF vDialogRoot.Menu EXISTS 
      szMenuName = vDialogRoot.Menu.Tag 
      IF vDialogRoot.Menu.CSS_Class != ""
         szClass = " class=^" + vDialogRoot.Menu.CSS_Class + "^ " 
      END
   END
   szWriteBuffer = "<div id=^sidenavigation^" + szClass + ">"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   //szWriteBuffer = "   <ul id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + ">"
   szWriteBuffer = "   <ul id=^" + szMenuName + "^ name=^" + szMenuName + "^>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   FOR EACH vDialogRoot.OptAct WITHIN vDialogRoot.Menu
      szNavigationTitle = vDialogRoot.Option.Text
      szDialogName = vDialogRoot.OptAct.DialogName
      IF szDialogName = ""
         szDialogName = "NoDialogName"
      END

      IF szReusableMenu = "Y"
         szMenuName = "sm" + vDialogRoot.Option.Tag
      ELSE
         szMenuName = vDialogRoot.Option.Tag
      END

   // szHTML_Name = szDialogName + vDialogRoot.OptAct.WindowName + ".jsp"
      IF vDialogRoot.OptAct EXISTS

         // Because the menu actions can be created on separate windows from the control
         // actions, we need to make sure these actions are unique.  We will prefix a
         // "m" to the main menu actions and prefix a "sm" to the side menu actions.
         IF szReusableMenu = "Y"
            szActionName = "sm" + vDialogRoot.OptAct.Tag
         // lLth = zstrlen( szActionName )
         // IF lLth > 32
         //    MessageSend( vDialog, "", "Reusable Menu Action Name Length > 32",
         //                 szActionName,
         //                 zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
         // END
         ELSE
            szActionName = vDialogRoot.OptAct.Tag
         END
         ActionType = vDialogRoot.OptAct.Type
      ELSE
         szActionName = ""
         ActionType = 0
      END

      // If the window we are currently generating is the same window that this
      // side menu points to, then we want to set a class on this option.  The
      // reason is so that we can tell which side menu option the user has selected.
      IF vDialogRoot.OptAct.WindowName = vDialog.Window.Tag
         szClass2 = " class=^sideselected^ "
      ELSE
         szClass2 = ""
      END
      
      IF vDialogRoot.Option.CSS_Class != "" 
         szClass = " class=^" + vDialogRoot.Option.CSS_Class + "^"
      ELSE
         szClass = ""
      END

      szWriteBuffer = "<%"
      szOptionTag = vDialogRoot.Option.Tag
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   csrRC = vKZXMLPGO.cursor( ^DisableMenuOption^ ).setFirst( ^MenuOptionName^, ^" + szOptionTag + "^ );"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( !csrRC.isSet() ) //if ( nRC < 0 )"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      //szWriteBuffer = "       <li><a href=^#^ " + szClass + " onclick=^" + szActionName + "( )^>" + szNavigationTitle + "</a></li>"
      szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + "><a href=^#^ " + szClass2 + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "<%"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END

   // This is for building a default menu?
   // Trying to get this file to compile.
   IF vDialogMenu != 0
      CreateViewFromViewForTask( vDialogMenu, vDialogMenu, 0 )
      SET CURSOR FIRST vDialogMenu.Menu WHERE vDialogMenu.Menu.ZKey = vDialogMenu.DfltMenu.ZKey
      FOR EACH vDialogMenu.OptAct WITHIN vDialogMenu.Menu
         szNavigationTitle = vDialogMenu.Option.Text
         szDialogName = vDialogMenu.OptAct.DialogName
         IF szDialogName = ""
            szDialogName = "NoDialogName"
         END

      // szHTML_Name = szDialogName + vDialogMenu.OptAct.WindowName + ".jsp"
         IF vDialogMenu.OptAct EXISTS
            szActionName = vDialogMenu.OptAct.Tag
            ActionType = vDialogMenu.OptAct.Type
         ELSE
            szActionName = ""
            ActionType = 0
         END

         szMenuName = vDialogRoot.Option.Tag         

         // If the window we are currently generating is the same window that this
         // side menu points to, then we want to set a class on this option.  The
         // reason is so that we can tell which side menu option the user has selected.
         IF vDialogMenu.OptAct.WindowName = vDialog.Window.Tag
            szClass2 = "class=^sideselected^ "
         ELSE
            szClass2 = ""
         END
      
         IF vDialogMenu.Option.CSS_Class != "" 
            szClass = "class=^" + vDialogMenu.Option.CSS_Class + "^"
         ELSE
            szClass = ""
         END

         szWriteBuffer = "<%"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szOptionTag = vDialogMenu.Option.Tag
         szOptionTag = vDialogMenu.Option.Tag
         szWriteBuffer = "   csrRC = vKZXMLPGO.cursor( ^DisableMenuOption^ ).setFirst( ^MenuOptionName^, ^" + szOptionTag + "^ );"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( !csrRC.isSet( ) )"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "       <li><a href=^#^ " + szClass + " onclick=^" + szActionName + "( )^>" + szNavigationTitle + "</a></li>"
         szWriteBuffer = "       <li id=^" + szMenuName + "^ name=^" + szMenuName + "^" + szClass + "><a href=^#^ " + szClass2 + " onclick=^" + szActionName + "()^>" + szNavigationTitle + "</a></li>"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )

         szWriteBuffer = "<%"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   }"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialogMenu, lFile, szWriteBuffer, "^", 1 )
      END

      DropView( vDialogMenu )
   END

   // Division ending for Navigation Bar.
   szWriteBuffer = "   </ul>"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "</div> <!-- sidenavigation -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   IF vDialogRoot.Dialog.WEB_LeftSideInclude != ""
      //szWriteBuffer = "<%@include file=^./include/leftcontent.inc^ %>"
      szWriteBuffer = "<!-- left content include file -->"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<%@include file=^" + vDialogRoot.Dialog.WEB_LeftSideInclude + "^ %>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END
   szWriteBuffer = "</div>  <!-- leftcontent -->"
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = ""
   WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 0 )

   /*
   szCSS_Class = vDialog.Window.CSS_Class
   IF szCSS_Class = ""
      // Begin the division for the main body content.
      szWriteBuffer = "<div id=^content^>"
      WL_QC( vDialogRoot, lFile, szWriteBuffer, "^", 1 )
   END
   */

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCalendar
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCalendar( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Format a CALENDAR control.

   STRING ( 256 ) szStyle
   STRING ( 256 ) szStyleCalendar
   STRING ( 256 ) szClass
   STRING ( 10 )  szDisabled
   STRING ( 10 )  szWidth
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 16 )  szTabIndex
   STRING ( 50 )  szActionName
   STRING ( 500 ) szActionCode
   STRING ( 500 ) szCloseUpCode
   DECIMAL        dDLUnits

   szWriteBuffer = "<%"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strErrorMapValue = VmlOperation.CheckError( ^" + szCtrlTag + "^, strError );"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   if ( !StringUtils.isBlank( strErrorMapValue ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "         strErrorColor = ^color:red;^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   }"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   else"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   {"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strErrorColor = ^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )


   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( strDateFormat );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "            if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "            task.log( ).debug( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log( ).debug( ^Entity does not exist for " + szCtrlTag + ": ^ + ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      //**************** Get control event actions *********/
      
      // If there is an Event for the MLEdit, build code to insert in <textarea statement.
      szActionCode = ""
      szCloseUpCode = ""
      FOR EACH vDialog.Event
         IF vDialog.EventAct EXISTS
            szActionName = vDialog.EventAct.Tag
            IF vDialog.Event.Type = 80 // Event was GetFocus 50 but I have deleted that because it wasn't working correctly.
               szActionCode = szActionCode + " onfocus=^" + szActionName + "( )^ "
            ELSE
            IF vDialog.Event.Type = 48  // Event is LoseFocus 30
               szActionCode = szActionCode + " onblur=^" + szActionName + "( )^ "
            ELSE
            IF vDialog.Event.Type = 96  // Event is CloseUp 60
               szCloseUpCode = szCloseUpCode + "scwNextAction=" + szActionName + ".runsAfterSCW(this);"
            END
            END
            END
         END
      END

      //***************************************************

      // We will set the height to the constant 32 px.
      PIX_PER_DU( vDialog, dDLUnits )
      zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
      szHeight = "32"
      szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"

      // If szNoPositioning is null then we are using absolute positioning when creating controls.
      IF szNoPositioning = ""

         zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
         zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )
         szStyle = szStyle + "position:absolute;left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
         szStyleCalendar = " style=^width:80px^"
      ELSE
         szStyle = szStyle + "^ "
         szStyleCalendar = " style=^width:80px^"
      END

      IF szNoPositioning = "S"
         szStyle = "" // No style information
         szStyleCalendar = ""
      END

      CreateTabIndexString( vDialog, szTabIndex )

      CreateDisabledString( vDialog, szDisabled )

      // Multiple class names must be separated by white space characters.
      szClass = vDialog.Control.CSS_Class

      szWriteBuffer = "<span " + szStyle + ">"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF szClass = ""
         szWriteBuffer = "   <input name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ " + szDisabled +
                             szActionCode + szStyleCalendar + " type=^text^ value=^<%=strErrorMapValue%>^ " + szTabIndex + " />"
      ELSE
         szWriteBuffer = "   <input class=^" + szClass + "^ name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ " + szDisabled +
                             szActionCode + szStyleCalendar + " type=^text^ value=^<%=strErrorMapValue%>^ " + szTabIndex + " />"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   <img src=^images/scw.gif^  name=^" + szCtrlTag + "Img" + szRepeatGrpKey + "^ id=^" + szCtrlTag + "Img" + szRepeatGrpKey + "^ title=^Select Date^ alt=^Select Date^"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "        onclick=^" + szCloseUpCode + "scwShow( document.getElementById( '" + szCtrlTag + szRepeatGrpKey + "' ), this );^ " + szTabIndex + " />"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</span>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   END
END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCheckBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCheckBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Format an CHECKBOX control.
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 10 )  szDisabled
   STRING ( 100 ) szPosition
   STRING ( 16 )  szTabIndex
   STRING ( 20 )  szSpaces
   STRING ( 256 ) szBlob
   STRING ( 256 ) szUnChecked
   INTEGER lTemp
   INTEGER lLen
   
   // See if the checkbox has an unchecked value. The checked value is in attrib RadioOrCheckboxValue but we 
   // don't have an attrib for the unchecked value.
   /*
   lTemp = 256
   GetBlobFromAttribute( szBlob, lTemp, vDialog, "Control", "CtrlBOI" )
   lLen = zstrlen( szBlob )
   szUnChecked = ""
   IF lTemp > ( lLen + 2 )
      ZeidonCopyWithinString( szBlob, 1, lLen + 2, 256 )
      szUnChecked = szBlob
   END
  */
   
   szWriteBuffer = "<%"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   strErrorMapValue = ^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   IF vDialog.CtrlMapView EXISTS
      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strRadioGroupValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

   szWriteBuffer = "   if ( StringUtils.equals( strRadioGroupValue, ^" +
                   vDialog.Control.RadioOrCheckboxValue + "^ ) )"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "      strErrorMapValue = ^checked=\^checked\^^;"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "%>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   CreateTabIndexString( vDialog, szTabIndex )

   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF szNoPositioning = ""
      CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
   END

   IF vDialog.Control.VisibleBorder = "Y"
      szPosition = szPosition + "border:solid;border-width:2px;border-style:groove;"
   END

   szStyle = "style=^" + szPosition + "^" + szTabIndex

   IF szNoPositioning = "S"
      szStyle = "" // No style
   END

   CreateDisabledString( vDialog, szDisabled )

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle = ""
      szTitleHTML = ""
   ELSE
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   IF vDialog.EventAct EXISTS
      szWriteBuffer = "<input type=^checkbox^ name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ " + szDisabled +
                      " value=^" + vDialog.Control.RadioOrCheckboxValue +
                      "^ <%=strErrorMapValue%> " + szTitleHTML + szStyle + " onclick=^" + vDialog.EventAct.Tag + "( )^>"
   ELSE
      szWriteBuffer = "<input type=^checkbox^ name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ " + szDisabled +
                      " value=^" + vDialog.Control.RadioOrCheckboxValue +
                      "^ <%=strErrorMapValue%> " + szTitleHTML + szStyle + ">"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
      // If we aren't putting in absolute positioning, make sure that there is a little space between
      // the checkbox and the text.
      szSpaces = "&nbsp "
   ELSE
   IF szNoPositioning = "S"
      szStyle = ""  // No style information.
      szSpaces = ""
   ELSE
      CreateAbsolStyleString( vDialog, szStyle, 30 + lOffsetX, lOffsetY, "" )
      szSpaces = ""
   END
   END
   szClass = vDialog.Control.CSS_Class

   IF szClass = ""
      szWriteBuffer = "<span " + szTitleHTML + szStyle + ">" + szSpaces + vDialog.Control.Text + "</span>"
   ELSE
      szWriteBuffer = "<span class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + szSpaces + vDialog.Control.Text + "</span>"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteComboBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteComboBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Combo boxes on OUTPUT

   // There are two kinds of combo boxes on output.
   // 1. Domain combo boxes, which need to get the individual table values
   //    from core calls.
   // 2. Select combo boxes (e.g.  Automatic Include, Set Foreign Key, etc.)
   //    which read the data values from an object, the same as a list box.
   // These two conditions are handled quite separately below, even though
   // the resulting HTML is basically the same.

   VIEW vList   BASED ON LOD TZWDLGSO  // identifies attribute mapping for list entries
   VIEW vEntity BASED ON LOD TZWDLGSO  // identifies entity mapping for list entries
   VIEW vScope  BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 100 ) szCtrlTagRG
   STRING ( 100 ) szInListCtrlTag
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szWidth
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 10 )  szDisabled
   DECIMAL        dDLUnits
   INTEGER        lSubtype
   SHORT          nRC

   szStyle = "width:" + szWidth + "px; height:" + szHeight + "px;"
   szClass = ""
   IF vDialog.Control.CSS_Class != ""
      szClass = "class=^" + vDialog.Control.CSS_Class + "^"
   END

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateTabIndexString( vDialog, szTabIndex )
   // We will set the height to the constant 20 px.
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   szHeight = "20"
   // The height used to be hard coded but we took that out!!!
   //szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"
   szStyle = "style=^width:" + szWidth + "px;"

   // If szNoPositioning is null then we are using absolute positioning.
   IF szNoPositioning = ""

      zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
      zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )

      szStyle = szStyle + "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
      // CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   ELSE
      szStyle = szStyle + "^ "
   END

   IF szNoPositioning = "S"
      szStyle = "" // No style information
   END
   szStyle = szStyle + szTabIndex

   szWriteBuffer = "<% strErrorMapValue = ^^;  %>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   lSubtype = vDialog.Control.Subtype
   nRC = AreBitsSetInFlag( lSubtype, 61440 ) // 0x0000F000
   IF nRC = 0   // IF vDialog.Control.Subtype < 12000  ==> Domain Combobox

      // Domain type combo box

      //szWriteBuffer = "<input name=^h" + szCtrlTag + szRepeatGrpKey + "^ id=^h" + szCtrlTag + szRepeatGrpKey + "^ type=^hidden^ value=^0^ >"
      //WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // The Select Action is either onfocusout or onchange depending on the following.
      // 1. If no Action, use onchange because this allows using keystrokes in the control.
      // 2. If Action is SelectChange, use onchange.
      // 3. If Action is SelectEnd, use onblur
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectAction   = "onchange"
            szSelectFunction = "OnChange"
         ELSE
            szSelectAction   = "onblur"
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectAction   = "onchange"
         szSelectFunction = "OnChange"
      END

      CreateDisabledString( vDialog, szDisabled )
      IF szRepeatGrpKey = ""
         szWriteBuffer = "<select " + szClass + " name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ size=^1^ " +
                         szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( )^" + ">"
      ELSE
         szCtrlTagRG = szRepeatGrpKey
         TraceLineS("***** szRepeatGrpKey -----> ", szRepeatGrpKey )
         zSearchAndReplace( szCtrlTagRG, 100, "::", "" )
         TraceLineS("***** szCtrlTagRG    -----> ", szCtrlTagRG )
         szWriteBuffer = "<select " + szClass + " name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ size=^1^ " +
                         szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( 'h" + szCtrlTag  + szRepeatGrpKey + "', this, '" + szCtrlTagRG + "' )^" + ">"
                         //szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( 'h" + szCtrlTag  + szRepeatGrpKey + ', this, <%=strEntityKeyRG%> )^" + ">"
      END

/*
      IF szClass = ""
         szWriteBuffer = "<select name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ size=^1^ " + szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" +
                         szCtrlTag + szSelectFunction + "( )^" + ">"
      ELSE
         szWriteBuffer = "<select class=^" + szClass + "^ name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ size=^1^ " +
                         szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( )^" + ">"
      END
*/      
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS
         // KJS 10/22/14 - If the value from the database is not part of the domain anymore, we will put that option in but
         // we will set it as disabled.
         szInListCtrlTag = "inList" + szCtrlTag

         szWriteBuffer = "   boolean " + szInListCtrlTag + " = false;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // We get each table value from a core call.
         IF vDialog.CtrlMapLOD_Attribute EXISTS

            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            szWriteBuffer = "      List<TableEntry> list = JspWebUtils.getTableDomainValues( " + vDialog.CtrlMapView.Name + " , ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^, ^" + vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // Get the current value of the combo box.
            szWriteBuffer = "         strComboCurrentValue = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                     vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^^ );"
                     // KJS 10/22/14 - Right now we are not adding the context name, we only want the default, which
                     // I am currently assuming has ALL the values (old and new) of this domain. When we get DGs domain fix
                     // I think we need to put this back!!!!!!!
                     //vDialog.CtrlMapER_Attribute.Name + "^, ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
            szWriteBuffer = "         if ( strComboCurrentValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            IF vDialog.CtrlMapER_Attribute.NotNull != "Y"
               // Generate code when attribute is NOT required.
               szWriteBuffer = "      // Code for NOT required attribute, which makes sure a blank entry exists."
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      if ( strComboCurrentValue == ^^ )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "         " + szInListCtrlTag + " = true;"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         <option selected=^selected^ value=^^></option>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      else"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      {"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "%>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         <option value=^^></option>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "<%"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "      }"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            szWriteBuffer = "      for ( TableEntry entry : list )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         String internalValue = entry.getInternalValue( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         String externalValue = entry.getExternalValue( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // Perhaps getInternalValue and getExternalValue should return an empty string, "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // but currently it returns null.  Set to empty string. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( externalValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            internalValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            externalValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            // The following if statement eliminates a null value, which would be the second null in the combo box.
            szWriteBuffer = "         if ( !StringUtils.isBlank( externalValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            if ( StringUtils.equals( strComboCurrentValue, externalValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "               " + szInListCtrlTag + " = true;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               <option selected=^selected^ value=^<%=externalValue%>^><%=externalValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               <option value=^<%=externalValue%>^><%=externalValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }  // for ( TableEntry entry"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            // KJS 10/22/14 - Add this value as disabled.
            szWriteBuffer = "      // The value from the database isn't in the domain, add it to the list as disabled."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( !" + szInListCtrlTag + " )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      { "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "         <option disabled selected=^selected^ value=^<%=strComboCurrentValue%>^><%=strComboCurrentValue%></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "      }  "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            
            
         END
      END

      szWriteBuffer = "   }  // if view != null"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</select>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + szRepeatGrpKey + "^ id=^h" + szCtrlTag + szRepeatGrpKey + "^ type=^hidden^ value=^<%=strComboCurrentValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   ELSE  
      // Select type combo box
      CreateViewFromViewForTask( vList, vDialog, 0 )
      SET CURSOR NEXT vList.CtrlMap
      CreateViewFromViewForTask( vEntity, vList, 0 )
      SET CURSOR NEXT vEntity.CtrlMap
      CreateViewFromViewForTask( vScope, vEntity, 0 )
      SET CURSOR NEXT vScope.CtrlMap

      // The Select Action is either onblur or onchange depending on the following.
      // 1. If no Action, use onchange because this allows using keystrokes in the control.
      // 2. If Action is SelectChange, use onchange.
      // 3. If Action is SelectEnd, use onfocusout.
      IF vDialog.Event EXISTS
         IF vDialog.Event.Type = 1
            szSelectAction   = "onchange"
            szSelectFunction = "OnChange"
         ELSE
            szSelectAction   = "onblur"
            szSelectFunction = "OnBlur"
         END
      ELSE
         szSelectAction = "onchange"
         szSelectFunction = "OnChange"
      END
      
      szWriteBuffer = "<select " + szClass + " name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ size=^1^" +
                      szTitleHTML + szStyle + szDisabled + szSelectAction + "=^" + szCtrlTag + szSelectFunction + "( )^" + ">"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS
         szWriteBuffer = "   " + vList.CtrlMapView.Name + " = " +
                         "task.getViewByName( ^" + vList.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( VmlOperation.isValid( " + vList.CtrlMapView.Name + " ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strComboCurrentValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      View v" + szCtrlTag + ";"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // If mapping is specified, set up the value to be used in selecting
         // the correct entry.
         IF vDialog.CtrlMapLOD_Attribute EXISTS
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " +
                            "task.getViewByName( ^" + vDialog.CtrlMapView.Name +
                            "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END
            szWriteBuffer = "            strComboCurrentValue = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                     vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                     vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
            szWriteBuffer = "            if ( strComboCurrentValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
         ELSE
            szWriteBuffer = "      strComboCurrentValue = ^^;"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // See if a list entity has been specified, and if so, use it.
         IF vEntity.CtrlMapLOD_Entity EXISTS
            szListEntityName = vEntity.CtrlMapLOD_Entity.Name
         ELSE
            szListEntityName = vList.CtrlMapRelatedEntity.Name
         END

         // See if a scoping entity has been specified, and if so, use it.
         lSubtype = vDialog.Control.Subtype
         lSubtype = IsFlagSequenceSet( lSubtype, zCOMBOBOX_SCOPE_OI )
         IF lSubtype = 0
            IF vScope.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
            ELSE
               szScopingEntityName = ""
            END
         END

         szWriteBuffer = "      v" + szCtrlTag + " = " + vList.CtrlMapView.Name + ".newView( );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      ComboCount = 0;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboSelectedValue = ^0^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         // Auto Include
         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            // For Auto Include, we are automatically putting a blank entry as the first entry in the
            // combobox.  With this in mind, there is code in DoInputMapping that assumes the first
            // entry in a combobox is null (or blank).  What if the user doesn't want a blank entry?
            // and wants to use the "No null in list" checkbox in the painter.  I would need to
            // change this code but I'm not sure how because I can't tell from DoInputMapping what
            // the value of combobox.selectedindex[0] is, I only know they selected the index 0.
            szWriteBuffer = "      // For Auto Include, always add a null entry to the combo box."
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      ComboCount++;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( StringUtils.isBlank( strComboCurrentValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         <option selected=^selected^></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         <option></option>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END

         IF lSubtype = 0
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" +
                                         szListEntityName + "^ ).setFirst( " + szScopingEntityName + " );"
         ELSE
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" + szListEntityName + "^ ).setFirstWithinOi( );"
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      while ( csrRC.isSet() )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vList.CtrlMapLOD_Attribute EXISTS
            IF vList.CtrlMapContext EXISTS
               szContextName = vList.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            szWriteBuffer = "         strErrorMapValue = v" + szCtrlTag + ".cursor( ^" +
                            vList.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                            vList.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                            szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
            szWriteBuffer = "         if ( strErrorMapValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

         // KJS 05/20/14 - There were some issues for auto include when the "list view" already had a blank entry, then
         // two blank entries were in the list and this caused errors. For auto include check if one of these entries is
         // blank, don't add it if it is.
         /*
         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = "      // For Auto Include, we have already created a blank entry for the combobox, check to make"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         // we don't add another blank entry. That will cause errors. "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( !StringUtils.isBlank( strErrorMapValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
          */
         szWriteBuffer = "         if ( StringUtils.equals( strComboCurrentValue, strErrorMapValue ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option selected=^selected^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         /*
         IF vDialog.Control.Subtype >= 20480 AND vDialog.Control.Subtype <= 21252   // IF Auto Include
            szWriteBuffer = "         } // if ( !StringUtils.isBlank( strErrorMapValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
         */
         szWriteBuffer = "         ComboCount++;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // IF lSubtype = 0  now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
            szWriteBuffer = "         csrRC =  v" + szCtrlTag +
                            ".cursor( ^" + szListEntityName +
                            "^ ).setNextContinue( );"
                            //"^ ).setNext( " + szScopingEntityName + " );"
      // ELSE
      //    szWriteBuffer = "         nRC =  v" + szCtrlTag +
      //                    ".cursor( ^" + szListEntityName + "^ ).setNextWithinOi( );"
      // END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         DropView( vList )
         DropView( vEntity )
         DropView( vScope )
      END

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "      v" + szCtrlTag + ".drop( );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "</select>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + szRepeatGrpKey + "^ id=^h" + szCtrlTag + szRepeatGrpKey + "^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   END

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteCtrlsRadio
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteCtrlsRadio( VIEW vDialog BASED ON LOD TZWDLGSO,
                       INTEGER          lFile,
                       STRING ( 10000 ) szWriteBuffer,
                       STRING ( 50 )    szIndent,
                       STRING ( 32 )    szRadioGroupName,
                       STRING ( 1 )     szNoPositioning,
                       INTEGER          lOffsetX,
                       INTEGER          lOffsetY,
                       STRING ( 100 )   szRepeatGrpKey )

   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szCtrlTag
   STRING ( 256 ) szTitleHTML
   STRING ( 10 )  szDisabled
   STRING ( 16 )  szPosition
   STRING ( 16 )  szTabIndex
   STRING ( 32 )  szActionName
   STRING ( 1 )   szFirstTimeThru
   INTEGER        nRC
   INTEGER        LastY_Pos
   // KJS 09/02/13 - Adding table around radio buttons. This was already done for C jsps...
   LastY_Pos = 0
   szFirstTimeThru = "Y"
   IF vDialog.Control EXISTS
      LastY_Pos = vDialog.Control.PSDLG_Y
   END
   szWriteBuffer = "   <table style=^margin:0px;padding:0px;^  name=^tbl" + szRadioGroupName + "^ id=tbl^" + szRadioGroupName + "^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   <tr style=^border:0px^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   
   // Process the individual Radio Buttons for a Radio Button Group.
   FOR EACH vDialog.Control
      szActionName = ""
      IF vDialog.EventAct EXISTS
         szActionName = vDialog.EventAct.Tag
         nRC = zstrcmpi( szActionName, "alt-f4" )
         IF nRC = 0
            szActionName = "AltF4"
         END
      END

      szCtrlTag = vDialog.Control.Tag

      szWriteBuffer = "<% strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( StringUtils.equals( strRadioGroupValue, ^" +
                               vDialog.Control.RadioOrCheckboxValue + "^ ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorMapValue = ^checked=\^checked\^^;  %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      CreateTabIndexString( vDialog, szTabIndex )

      // If this window is being generated with no positioning then
      // do not create the position in the style.
      IF szNoPositioning = ""
         CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
      END
      //CreateAbsolPosString( vDialog, szPosition, 0, 0 )
      CreateDisabledString( vDialog, szDisabled )
      FixStyleString( szStyle, szPosition, "", "" )

      IF szNoPositioning = "S"
         szStyle = "" // No style information
      END

      // If LastY_Pos = -100 then this is the first time thru...
      IF ( ( LastY_Pos < vDialog.Control.PSDLG_Y ) )
         szWriteBuffer = "   </tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   <tr style=^border:0px^>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      ELSE
      // KJS 07/22/10 - Currently for relative positioning, the radio buttons are being created one right after the other
      // (on the same line), no matter how I paint them on the screen).  Really to look at that but since we hardly ever
      // use them, I am for a fast fix going to append "&nbsp&nbsp&nbsp" after each button, to give some spacing.
         IF szNoPositioning = "Y" AND szFirstTimeThru = "N"
            szWriteBuffer = "      <td nowrap style=^border:0px;^>&nbsp&nbsp&nbsp</td>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
      END

      szStyle = szStyle + szTabIndex
   // szStyle = " style=^position:absolute;LEFT:" + szX + ";TOP:" + szY + ";^ "
      IF  szActionName != ""
         szWriteBuffer = "      <td style=^width:15px;border:0px;^><input type=^radio^ name=^" + szRadioGroupName + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey +
                         "^ value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " onclick=^" + szActionName + "( )^  ></td>"
      ELSE
         szWriteBuffer = "      <td style=^width:15px;border:0px;^><input type=^radio^ name=^" + szRadioGroupName + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey +
                         "^ value=^" + vDialog.Control.RadioOrCheckboxValue +
                         "^ <%=strErrorMapValue%> " + szStyle + szDisabled + " ></td>"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF szNoPositioning = "Y"
         CreateNoPosStyleString( vDialog, szStyle, "")
      ELSE
      IF szNoPositioning = "S"
         szStyle = "" // No style information.
      ELSE
         CreateAbsolStyleString( vDialog, szStyle, 30 + lOffsetX, lOffsetY, "" )
      END
      END

      //If we put a title on the control, when the mouse is hovered over the control, this text will display.
      szTitleHTML = ""
      szTitle = vDialog.Control.DIL_Text
      IF szTitle != ""
         szTitleHTML = " title=^" + szTitle + "^ "
      END

      szClass = vDialog.Control.CSS_Class
      IF szClass = ""
         szWriteBuffer = "      <td nowrap style=^border:0px;^><span " + szTitleHTML + szStyle + ">" + vDialog.Control.Text + "</span></td>"
      ELSE
         szWriteBuffer = "      <td nowrap style=^border:0px;^><span class=^" + szClass + "^ " + szTitleHTML + szStyle + ">" + vDialog.Control.Text + "</span></td>"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      LastY_Pos = vDialog.Control.PSDLG_Y
      szFirstTimeThru = "N"
   END
   szWriteBuffer = "   </tr>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
   szWriteBuffer = "   </table>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

END

/*************************************************************************************************
**
**    OPERATION: GenJSPJ_CrteGroupTable
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteGroupTable( VIEW vDialog BASED ON LOD TZWDLGSO,
                        VIEW vGroupParent BASED ON LOD TZWDLGSO,
                        VIEW vDialogRoot BASED ON LOD TZWDLGSO,
                        INTEGER          lFile,
                        STRING ( 10000 ) szWriteBuffer,
                        STRING ( 100 )   szIndent,
                        INTEGER          lTableRowCnt,
                        STRING ( 1 )     szNoPositioning,
                        STRING ( 100 )   szRepeatGrpKey )

   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        X_Pos
   INTEGER        Y_Pos
   INTEGER        LastY_Pos
   INTEGER        iHighestColCnt
   INTEGER        iColCnt
   INTEGER        nRC
   INTEGER        iColWidth
   INTEGER        lMaxStringLength
   INTEGER        lTemp
   INTEGER        lStyleX
   INTEGER        Size
   INTEGER        lOffsetX
   INTEGER        lOffsetY
   DECIMAL        dDLUnits
   STRING ( 10 )  szColCnt
   STRING ( 10 )  szWidth
   STRING ( 10 )  szHeight
   STRING ( 50 )  szCtrlTag
   STRING ( 50 )  szParentCtrlTag
   STRING ( 85 )  szHTMLCtrlID
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 100 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 32 )  szActionName
   STRING ( 50 )  szControlType
   STRING ( 16 )  szTabIndex
   STRING ( 256 ) szText
   STRING ( 32 )  szContextName
   STRING ( 10 )  szMaxStringLength
   STRING ( 32 )  szSize
   STRING ( 256 ) szAbsoluteStyle

   STRING ( 1 )   szNoHeightFlag
   STRING ( 1 )   szNoWidthFlag
   STRING ( 1 )   szSpanFlag
   STRING ( 1 )   szDivFlag
   STRING ( 1 )   szScrollableFlag
   STRING ( 1 )   szScrollingTable
   STRING ( 1 )   szGroupIsTable
   STRING ( 1 )   szreCAPTCHAFlag
   STRING ( 1 )   szTinyMCEFlag
   STRING ( 1 )   szToggleFlag
   STRING ( 100 ) szIndentGroup
   STRING ( 50 )  szWebCtrlType

   LastY_Pos = 0
   iColCnt = 0
   iHighestColCnt = 0
   szIndent = szIndent + "   "

   X_Size = vGroupParent.Control.SZDLG_X
   Y_Size = vGroupParent.Control.SZDLG_Y
   szParentCtrlTag = vGroupParent.Control.Tag

   IF vGroupParent.Control.CSS_Class != ""
      szClass = " class=^" + vGroupParent.Control.CSS_Class + "^"
   ELSE
      szClass = ""
   END

   IF vDialog.Control EXISTS
      SET CURSOR  FIRST vDialog.Control
      LastY_Pos = vDialog.Control.PSDLG_Y
   END

   // Loop through each Control within this group.  Determine what row has the largest
   // number of controls.  This will determine how many columns our table will have.
   FOR EACH vDialog.Control

      IF LastY_Pos < vDialog.Control.PSDLG_Y

         IF  iColCnt > iHighestColCnt
            iHighestColCnt = iColCnt
         END
         iColCnt = 0
      END

      iColCnt = iColCnt + 1

      LastY_Pos = vDialog.Control.PSDLG_Y
   END

   //TraceLineI("**** Highest Col Count *** ", iHighestColCnt )
   zIntegerToString( szColCnt, 10, iHighestColCnt )
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, X_Size * dDLUnits )
   zIntegerToString( szHeight, 10, Y_Size * dDLUnits )

   // 05/27/09 - Currently, we never put in a height.  Would we want to do this?????!!!.
   IF szNoPositioning = "Y"

      szNoWidthFlag = ""
      SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "No Width"
      IF RESULT >= zCURSOR_SET
         szNoWidthFlag = "Y"
      END
   END

   // Create a div around the whole table.  This should probably be float.
   //szWriteBuffer = "<div style=^float:left;width:" + szWidth + "px;height:" + szHeight + "px;^" + szClass + ">"
   // KJS 09/11/09 - Neither the table or the div had an id or name.  I am not sure whether I should put the
   // id on the <table we create or on the <div> but I will put it on the div.
   IF szNoPositioning = "S"
      szWriteBuffer = "<div id=^" + szParentCtrlTag + "^ name=^" + szParentCtrlTag + "^ "
   ELSE
      szWriteBuffer = "<div id=^" + szParentCtrlTag + "^ name=^" + szParentCtrlTag + "^ style=^float:left;"
      IF szNoWidthFlag = ""
         szWriteBuffer = szWriteBuffer + "width:" + szWidth + "px;^"
      END
   END
   szWriteBuffer = szWriteBuffer + " " + szClass + ">"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   // Now create the table with the proper number of columns.
   //szWriteBuffer = "<table cols=" szColCount + " name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^>"
   szWriteBuffer = "<table cols=" + szColCnt
   IF szNoWidthFlag = "" AND szNoPositioning != "S"
      szWriteBuffer = szWriteBuffer + " style=^width:" + szWidth + "px;^ "
   END
   szWriteBuffer = szWriteBuffer + " class=^grouptable^>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "<tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   LastY_Pos = 0
   IF  vDialog.Control EXISTS
      SET CURSOR  FIRST vDialog.Control
      LastY_Pos = vDialog.Control.PSDLG_Y
   END


   // Loop through the controls, placing each control in a different column.
   // When the Y_Pos has changed, we need to create a new row in the table.
   FOR EACH vDialog.Control

      // We are onto a new row
      IF  LastY_Pos < vDialog.Control.PSDLG_Y

         // If LastY_Pos is 0 then we are on the first control.
         // If this wasn't the very first row, then
         // create the end tag for the last row.
         //IF  LastY_Pos != 0
            // If the previous row didn't have as many controls as there are
            // table columns, then we need to create a blank column
            LOOP  WHILE iColCnt < iHighestColCnt
               szWriteBuffer = "<td>&nbsp</td>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               iColCnt = iColCnt + 1
            END
            szWriteBuffer = "</tr>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //END

         szWriteBuffer = "<tr>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         // Since we are on a new row, reset the column count.
         iColCnt = 0
      END

      szCtrlTag = vDialog.Control.Tag
      szHTMLCtrlID = " id=^" + szCtrlTag + "^ name=^" + szCtrlTag + "^ "
      szControlType = vDialog.ControlDef.Tag
      CreateNoPosStyleString( vDialog, szStyle, "" )

      X_Pos = vDialog.Control.PSDLG_X
      //TraceLineI("*** Control Start position *** ", vDialog.Control.PSDLG_X )
      LastY_Pos = vDialog.Control.PSDLG_Y

      // We want to find out how wide this column should bed
      nRC = SetCursorNextEntity( vDialog, "Control", "" )
      iColWidth = 0
      IF  nRC >= zCURSOR_SET AND LastY_Pos = vDialog.Control.PSDLG_Y
         //TraceLineI("*** Next Control Start position *** ", vDialog.Control.PSDLG_X )
         iColWidth = vDialog.Control.PSDLG_X - X_Pos
      END

      IF  nRC >= zCURSOR_SET
         nRC = SetCursorPrevEntity( vDialog, "Control", "" )
      END

      IF  iColWidth = 0
         //TraceLineI("*** Width is width of control *** ", vDialog.Control.SZDLG_X )
         iColWidth = vDialog.Control.SZDLG_X
      END

      szClass = vDialog.Control.CSS_Class
      IF vDialog.Control.CSS_Class != ""
         szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
      ELSE
         szClass = ""
      END

      //KELLY0210
      zIntegerToString( szWidth, 10, iColWidth * dDLUnits )
      IF szNoPositioning = "S"  // No style information
         szWriteBuffer = "<td valign=^top^ " + szClass + ">"
      ELSE 
         szWriteBuffer = "<td valign=^top^ " + szClass + "style=^width:" + szWidth + "px;^>"
      END
      //szWriteBuffer = "<td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      //****************************************************************************

      IF szControlType = "GroupBox"

         // Do I need to check if this is a groupbox and we are not using absolute positioning, then I want to
         // check if there are other groupboxes at this same PSDLG_Y.  If so, then these groups would need to
         // have a float:left applied to them.
         // Would I only want to do this once for the row?
         // Or, do I want to put a float on every div created and then create a <div style="clear:both;"</div> after
         // every row?
         //IF  szNoPositioning = "Y" AND szCheckedRowForGroups         //END


         // InitializeRepeatingGroup for GroupBox

         // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
         // as a table and try and position what is in this group box as a table.
         szGroupIsTable = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Table"
         IF RESULT >= zCURSOR_SET
            szGroupIsTable = "Y"
         END

         szNoHeightFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Height"
         IF RESULT >= zCURSOR_SET
            szNoHeightFlag = "Y"
         END

         szNoWidthFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Width"
         IF RESULT >= zCURSOR_SET
            szNoWidthFlag = "Y"
         END

         szreCAPTCHAFlag = ""
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "reCAPTCHA"
         IF RESULT >= zCURSOR_SET
            szreCAPTCHAFlag = "Y"
         END

         szToggleFlag = "" 
         SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Show/Hide Toggle"
         IF RESULT >= zCURSOR_SET
            szToggleFlag = "Y"
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET
               szDivFlag = "Y"
            END
         END

      END

      // Initialize the szAbsoluteStyle variable with X and Y values.
      IF  szNoPositioning = "Y"
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y" AND szNoWidthFlag = "Y"
            szAbsoluteStyle = ""
         ELSE
         IF szControlType = "GroupBox" AND szNoHeightFlag = "Y"
            // We might not want the groupbox to have a height (so it grows)
            zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
            szAbsoluteStyle = "style=^width:" + szWidth + ";^"
         ELSE
         IF szControlType = "GroupBox" AND szNoWidthFlag = "Y"
            // We might not want the groupbox to have a width (so it grows)
            zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
            szAbsoluteStyle = "style=^height:" + szHeight + ";^"
         ELSE
            CreateNoPosStyleString( vDialog, szAbsoluteStyle, "" )
         END
         END
         END
      ELSE
      IF szNoPositioning = "S"
         szAbsoluteStyle = "" // No style information.
      ELSE 
         CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
      END
      END

      szWriteBuffer = "<% /* " + szCtrlTag + ":" + szControlType + " */ %>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // Check to see if this GroupBox has a WebControlProperty of "Table".  If so, then we will create this
      // as a table and try and position what is in this group box as a table.
      IF szControlType = "GroupBox" AND szGroupIsTable = "Y"

         X_Size = vDialog.Control.SZDLG_X
         Y_Size = vDialog.Control.SZDLG_Y

         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         CreateViewFromView( vGroupParent, vDialog )

         // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndentGroup = szIndent
         GenJSPJ_CrteGroupTable( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, lTableRowCnt, szNoPositioning, szRepeatGrpKey )
         ResetViewFromSubobject( vDialog )
         DropView( vGroupParent )
         vGroupParent = 0
      END

      IF szControlType = "GroupBox" AND szGroupIsTable = ""

         // Set Group flags either from old szWebCtrlType or new WebControlProperty.
         IF szWebCtrlType = "Scrollable"
            szScrollableFlag = "Y"
         ELSE
            szScrollableFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Scrollable"
            IF RESULT >= zCURSOR_SET
               szScrollableFlag = "Y"
            END
         END
         IF szWebCtrlType = "Span"
            szSpanFlag = "Y"
         ELSE
            szSpanFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Span"
            IF RESULT >= zCURSOR_SET
               szSpanFlag = "Y"
            END
         END
         IF szWebCtrlType = "Div"
            szDivFlag = "Y"
         ELSE
            szDivFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Div"
            IF RESULT >= zCURSOR_SET
               szDivFlag = "Y"
            END
         END


         // Is this clear even working???!!!
         IF szWebCtrlType = "Clear"
            szWriteBuffer = "<div id='clear'></div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.PSDLG_X * dDLUnits + lOffsetX  // borrow these for a second
            Y_Size = vDialog.Control.PSDLG_Y * dDLUnits + lOffsetY
            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, X_Size, Y_Size, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szSpanFlag = "Y"

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<span" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<span" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</span>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szDivFlag = "Y"

            // Add Scrollable if requested.
            IF szScrollableFlag = "Y"
               zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )
            END

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            ELSE
            IF szNoPositioning = "S"
               szAbsoluteStyle = "" // No style information.             
            END
            END

            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
         IF szWebCtrlType = "DivScroll"
            // Div on a Group Control requests that all the controls inside the group line up one under the other.
            zAppendQuotedString( szAbsoluteStyle, "overflow:auto;", "style=", "^" )

            // If we are not using absolute positioning, then make all the divs
            // float left.
            IF szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            END
            IF szNoPositioning = "S"
               szAbsoluteStyle = "" // No style information.             
            END
            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0
            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         ELSE
            // Default Group is div for now

            // If we are not using absolute positioning, then make all the divs float left.
            IF szNoPositioning = "Y"
               zAppendQuotedString( szAbsoluteStyle, "float:left;", "style=", "^" )
            ELSE
            IF szNoPositioning = "S"
               szAbsoluteStyle = "" // No style information.             
            END
            END

            szClass = vDialog.Control.CSS_Class
            IF szClass = ""
               szWriteBuffer = "<div" + szHTMLCtrlID + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<div" + szHTMLCtrlID + "class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END
            /*IF szClass = ""
               szWriteBuffer = "<fieldset " + szAbsoluteStyle + ">"
            ELSE
               szWriteBuffer = "<fieldset class=^" + szClass + "^ " + szAbsoluteStyle + ">"
            END*/
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.Text != ""
               szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )

            // Create view for Group as a parent. This will be used in processing subcontrols to check for WebControlProperty.
            CreateViewFromView( vGroupParent, vDialog )
            SetViewToSubobject( vDialog, "CtrlCtrl" )
            szIndentGroup = szIndent + "   "
            GenJSPJ_CrteCtrlsRecurs( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndentGroup,
                                     lTableRowCnt, szNoPositioning, lOffsetX, lOffsetY, szRepeatGrpKey )
            ResetViewFromSubobject( vDialog )
            DropView( vGroupParent )
            vGroupParent = 0

            szWriteBuffer = "</div>  <!-- " + szCtrlTag + " --> "
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END
         END
         END
         END

      END  // Control is groupbox

      IF szControlType = "Text"  // TEXT
         GenJSPJ_CrteText( vDialog, vGroupParent, vDialogRoot, lFile, szWriteBuffer, szIndent, szCtrlTag,
                           "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "EditBox"  // EDITBOX
         GenJSPJ_CrteEditBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                              "", "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "Calendar"  // CALENDAR
         GenJSPJ_CrteCalendar( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                               "", "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "RadioGrp" // RADIO BUTTON GROUP
         szWriteBuffer = "<% strErrorMapValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         IF vDialog.CtrlMapView EXISTS
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                            "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strRadioGroupValue = " +
                            vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                            vDialog.CtrlMapER_Attribute.Name + "^ ).getString( );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         //KJS 11/14/07 - I don't think there should always be a box around radio buttons.
         //I'm going to do this like the way group box is (or was).  If there is text
         //to go on the box then we will create <fieldset.  If there is no text then
         //we will create a div.
         //KJS 10/07/09 - I added the id to this <div but then realized that the radio buttons also have this
         //id, so I am adding "gb" in front of the control tag.  Not sure how much we care that this div has
         //an id and name but think it should.
         IF vDialog.Control.Text = ""
            //szWriteBuffer = "<div " + szStyle + ">"
            szWriteBuffer = "<div id=^gb" + szCtrlTag + "^ name=^gb" + szCtrlTag + "^ " + szStyle + ">"
         ELSE
            szWriteBuffer = "<fieldset " + szStyle + ">"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         IF vDialog.Control.Text != ""
            szWriteBuffer = "<div>" + vDialog.Control.Text + "</div>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         END

         OrderEntityForView( vDialog, "CtrlCtrl", "PSDLG_Y A PSDLG_X A" )
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         szIndent = szIndent + "   "
         GenJSPJ_CrteCtrlsRadio( vDialog, lFile, szWriteBuffer, szIndent,
                                 szCtrlTag, szNoPositioning, 0, 0, szRepeatGrpKey )
         ResetViewFromSubobject( vDialog )
         IF vDialog.Control.Text = ""
            szWriteBuffer = "</div>"
         ELSE
            szWriteBuffer = "</fieldset>"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      END

      IF szControlType = "CheckBox"  // CHECKBOX
         GenJSPJ_CrteCheckBox( vDialog, lFile, szWriteBuffer, szIndent, szCtrlTag,
                               "", "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "PushBtn"  // PUSH BUTTON
         szActionName = ""
         IF vDialog.EventAct EXISTS
            szActionName = vDialog.EventAct.Tag
            nRC = zstrcmpi( szActionName, "alt-f4" )
            IF nRC = 0
               szActionName = "AltF4"
            END
         END

         CreateTabIndexString( vDialog, szTabIndex )
         szStyle = szStyle + szTabIndex

         szText = ""
         szText = vDialog.Control.Text
         // Set Class as either null or with Class value.
         IF vDialog.Control.CSS_Class = ""
            szClass = ""
         ELSE
            szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
         END

         //If we put a title on the control, when the mouse is hovered over the control, this text will display.
         szTitleHTML = ""
         szTitle = vDialog.Control.DIL_Text
         IF szTitle != ""
            szTitleHTML = " title=^" + szTitle + "^ "
         END

         szWriteBuffer = "<button type=^button^ " + szClass + szTitleHTML + szHTMLCtrlID
         IF szRepeatGrpKey = ""
            szWriteBuffer = szWriteBuffer + "value=^" + szText + "^ onclick=^" +
                            szActionName + "( )^ " + " " + szStyle + ">" + szText + "</button>"
         ELSE
            szWriteBuffer = szWriteBuffer + "value=^" + szText + "^ onclick=^" +
                            szActionName + "( '" + szCtrlTag + szRepeatGrpKey + "' )^ " + " " + szStyle + ">" + szText + "</button>"
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END  //End of PushBtn

      IF szControlType = "ComboBox"  // COMBOBOX
         GenJSPJ_CrteComboBox( vDialog, lFile, szWriteBuffer, szIndent,
                               szCtrlTag, "", szNoPositioning, 0, 0, szRepeatGrpKey )
      END

      IF szControlType = "Bitmap" OR szControlType = "BitmapBtn"  // BITMAP / JPG
         GenJSPJ_CrteJPG( vDialog, lFile, szWriteBuffer, szIndent,
                          szCtrlTag, szNoPositioning, 0, 0 )
      END

      IF szControlType = "ListBox"  // LISTBOX
         GenJSPJ_CrteListBox( vDialog, lFile, szWriteBuffer, szIndent,
                              szCtrlTag, szNoPositioning, 0, 0 )
      END  // IF szControlType = "ListBox"

      IF szControlType = "MLEdit"  // MLEDIT
         SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
         IF RESULT >= zCURSOR_SET
            szWriteBuffer = "<%"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   // " + szControlType + ": " + szCtrlTag
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   strErrorMapValue = VmlOperation.CheckError( ^" + szCtrlTag + "^, strError );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( !StringUtils.isBlank( strErrorMapValue ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         strErrorColor = ^color:red;^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      strErrorColor = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                            vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
               lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "254"
            END

            szWriteBuffer = "            strErrorMapValue = " +
                            vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                            vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                            szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.Control.WebCtrlType = "escapeHTML"
               szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " prior to unescape: ^ + strErrorMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               strErrorMapValue = StringEscapeUtils.unescapeHtml4( strErrorMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " after unescape: ^ + strErrorMapValue );"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            END

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
            szWriteBuffer = "            if ( strErrorMapValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "               strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

            szWriteBuffer = "            task.log( ).debug( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                            vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "         else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            task.log( ).debug( ^Entity does not exist for " + szCtrlTag + ": ^ + ^" +
                            vDialog.CtrlMapView.Name +
                            "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            lStyleX = vDialog.Control.ExtendedStyle
            lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
            IF lTemp != 0
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
               szWriteBuffer = "      if ( strErrorMapValue == ^^ )"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
            END

            // This doesn't work, but something like it may be necessary to remove special characters ... dks 2012.04.25
            // strErrorMapValue = strErrorMapValue.replace("/&/g", "&amp;").replace("/>/g", "&gt;").replace("/</g", "&lt;").replace("/\"/g", "&quot;").replace("/%/g", "&#037;");

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
            X_Size = vDialog.Control.SZDLG_X
            Size = X_Size / 4
            zIntegerToString( szSize, 10, Size )
            Y_Size = vDialog.Control.SZDLG_Y
            Size = Y_Size / 12
            zIntegerToString( szHeight, 10, Size )

            IF vDialog.Control.VisibleBorder = "Y"
               zAppendQuotedString( szStyle, "border:solid;border-width:4px;border-style:groove;", "style=", "^" )
            ELSE
               zAppendQuotedString( szStyle, "border:solid;border-width:2px;border-style:groove;", "style=", "^" )
            END
         // zAppendQuotedString( szStyle, szAbsoluteStyle, "style=", "^" ) already in

            szTinyMCEFlag = ""
            SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "wysiwyg TinyMCE"
            IF RESULT >= zCURSOR_SET
               szTinyMCEFlag = "Y"
            END

            IF vDialog.Control.WebCtrlType = "wysiwygEditor" OR szTinyMCEFlag = "Y"

            // CreateTabIndexString( vDialog, szTabIndex )
            // CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
            // szAbsoluteStyle = szAbsoluteStyle + szTabIndex

               szClass = vDialog.Control.CSS_Class
               IF szClass = ""
                  szClass = "mceSimple" // "mceSimple" is TinyMCE default
               END

               szWriteBuffer = "<textarea" + szHTMLCtrlID +
                               "class=^" + szClass + "^ " + szTitleHTML +
                               szStyle + ">" +
                            // "^ rows="15" cols="80" style="width: 80%">" +
                               "<%=strErrorMapValue%></textarea>"

            ELSE
               szClass = vDialog.Control.CSS_Class
               CreateTabIndexString( vDialog, szTabIndex )
               szWriteBuffer = "<textarea" + szHTMLCtrlID + szTitleHTML +
                               "class=^" + szClass + "^ " + 
                               szStyle + szTabIndex + " wrap=^wrap^>" +
                               "<%=strErrorMapValue%></textarea>"

            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
      END   //IF szControlType = "MLEdit"

      //****************************************************************************


      szWriteBuffer = "</td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      iColCnt = iColCnt + 1
   END

   // If the previous row didn't have as many controls as there are
   // table columns, then we need to create a blank column
   LOOP  WHILE iColCnt < iHighestColCnt
      szWriteBuffer = "<td>&nbsp</td>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      iColCnt = iColCnt + 1
   END

   szWriteBuffer = "</tr>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   szWriteBuffer = "</table>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   szWriteBuffer = "</div>  <!-- " + szParentCtrlTag + " --> "
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteEditBox
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteEditBox( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Format an EDITBOX control.

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 32 )  szContextName
   STRING ( 300 ) szValue
   STRING ( 600 ) szBlob
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 300 ) szType
   STRING ( 64 )  szWidget
   STRING ( 16 )  szTabIndex
   STRING ( 600 ) szEditActionCode
   STRING ( 32 )  szActionName
   STRING ( 10 )  szMaxStringLength
   STRING ( 10 )  szDisabled
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szCreateSessionVariable
   STRING ( 1 )   szNoOutputMapping
   STRING ( 1 )   szBrowseFile

   INTEGER        lMaxStringLength
   INTEGER        lStyleX
   INTEGER        lTemp
   SHORT          bMapping
   SHORT          nRC

   // For testing no height on input boxes
   STRING ( 10 )  szWidth
   DECIMAL        dDLUnits
   STRING ( 100 )  szSize
   STRING ( 100 )  szPosition

   TraceLineS("*** GenJSPJ_CrteEditBox *** ", "")

   CreateTabIndexString( vDialog, szTabIndex )
   //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "<%=strErrorColor%>" )
   // KJS 07/08 - We placed DOCTYPE at the top of our html pages now.  For some reason, because of this
   // even though the pixel height is exactly the same as before, it shows up higher in the browser.
   // Because of this we have taken out the height for now and the input height will be determined in the
   // CSS.
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   szSize = "width:" + szWidth + "px;"
   // If zNoPositioning is null then we are using absolute positioning for controls
   IF  szNoPositioning = ""
      CreateAbsolPosString( vDialog, szPosition, lOffsetX, lOffsetY )
   END

   IF szNoPositioning = "S" // No style information but I think we need the error color.
      szStyle = "style=^<%=strErrorColor%>^"
   ELSE 
      FixStyleString( szStyle, szSize, szPosition,  "<%=strErrorColor%>"  )
   END

   szStyle = szStyle + szTabIndex

   // If there is a WebControlProperty for "Create Session Variable", then create a session variable
   // with the value of this edit box with the Control Tag as the name.
   szCreateSessionVariable = "" 
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Create Session Variable"
   IF RESULT >= zCURSOR_SET
      szCreateSessionVariable = "Y"
   END

   // There may be times when we do not want to show the mapping of a field.  Like for instance a password field.  If the user types
   // in the wrong password, then we don't want to leave what was already typed we want the edit box to be blank.  This is
   // for xss problems (cross-scripting attacks).   
   szNoOutputMapping = "" 
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "No Output Mapping"
   IF RESULT >= zCURSOR_SET
      szNoOutputMapping = "Y"
   END

   // We have an Upload file on the group box, but what if we aren't uploading the file, we just want the user
   // to be able to select a directory/file name.
   szBrowseFile = "" 
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Browse File"
   IF RESULT >= zCURSOR_SET
      TraceLineS("*** Browse File is Y *** ", "" )
      szBrowseFile = "Y"
   END


// szWriteBuffer = "<% strErrorMapValue = ^^; %>"  extraneous???
// WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )           dks 2005.01.11

   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET AND szNoOutputMapping = ""
      bMapping = 1
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = VmlOperation.CheckError( ^" + szCtrlTag + "^, strError );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( !StringUtils.isBlank( strErrorMapValue ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorColor = ^color:red;^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorColor = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                      vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END
      
      /**********************************/
      // Add try/catch
      szWriteBuffer = "            try"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
         lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
         szMaxStringLength = lMaxStringLength
      ELSE
         szMaxStringLength = "254"
      END
      szWriteBuffer = "               strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.Control.WebCtrlType = "escapeHTML"
         szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " prior to unescape: ^ + strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               strErrorMapValue = StringEscapeUtils.unescapeHtml4( strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " after unescape: ^ + strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "            }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            catch (Exception e)"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               out.println(^There is an error on " + szCtrlTag + ": ^ + e.getMessage());"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               task.log().error( ^*** Error on ctrl " + szCtrlTag + "^, e );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      /***************** END OF try/catch **********************/

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "            if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "            task.log( ).debug( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // If there is a WebControlProperty for "Create Session Variable", then create a session variable
      // with the value of this edit box with the Control Tag as the name.
      IF szCreateSessionVariable = "Y" 
         szWriteBuffer = "            session.setAttribute(^" + szCtrlTag + "^, strErrorMapValue); "     
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log( ).debug( ^Entity does not exist for " + szCtrlTag + ": ^ + ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"

      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "      if ( strErrorMapValue == ^^ )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   ELSE
      bMapping = 0
   END

   // Get the format for the edit box if specified.
   lTemp = 600
   GetBlobFromAttribute( szBlob, lTemp, vDialog, "Control", "CtrlBOI" )
   lTemp = lTemp - (3 * zSIZEOFLONG)
   IF lTemp <= 0
      szBlob = ""
   ELSE
      lTemp = (3 * zSIZEOFLONG) + 1
      ZeidonCopyWithinString( szBlob, 1, lTemp, 600 )
   END

   //KJS 07/25/07
   //See if there is a WebControlProperty for "Hidden"
   //I don't think "hidden" is a webcontrolproperty for the editbox yet
   //but since I don't think this hurts I'm going to keep it in.
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Hidden"
   IF RESULT >= zCURSOR_SET
      szWCP_Hidden = "Y"
   ELSE
      szWCP_Hidden = "N"
   END

   IF vDialog.Control.WebCtrlType = "Hidden" OR szWCP_Hidden = "Y"
      szType = " type=^hidden^ "
   ELSE
   IF szBrowseFile = "Y"
      szType = " type=^file^ "
   ELSE
   //IF vDialog.CtrlMapER_Domain EXISTS AND vDialog.CtrlMapER_Domain.Name = "Password"
   IF vDialog.CtrlMapER_Domain EXISTS AND vDialog.Control.Subtype = 4
      szType = " type=^password^ "
   ELSE
      szType = " type=^text^ "
      IF szBlob != ""
         szType = szType + "mask=^"
         szType = szType + szBlob
         szType = szType + "^ onblur=^return onBlurMask(this);^ onfocus=^return onFocusMask(this);^ onkeydown=^return doMask(this);^ "
      END
   END
   END
   END

   // If there is an Event for the EditBox, build code to insert in <input statement.
   szEditActionCode = ""
   FOR EACH vDialog.Event
   IF vDialog.EventAct EXISTS
      szActionName = vDialog.EventAct.Tag
      IF vDialog.Event.Type = 16
            szEditActionCode = szEditActionCode + " onfocus=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 17
            szEditActionCode = szEditActionCode + " onblur=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 18
            szEditActionCode = szEditActionCode + " onchange=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 21
            szEditActionCode = szEditActionCode + " onkeydown=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 22
            szEditActionCode = szEditActionCode + " onkeyup=^" + szActionName + "( )^ "
      ELSE
      IF vDialog.Event.Type = 24
            szEditActionCode = szEditActionCode + " onclick=^" + szActionName + "( )^ "
      END
      END
      END
      END
      END
      END
      END
   END

      // If there is a Default button for the window, we must add some characters
      // to the end of the input statement.
      CreateViewFromView( vDialogRoot, vDialog )
      nRC = ResetViewFromSubobject( vDialogRoot )
      LOOP WHILE nRC = 0
         nRC = ResetViewFromSubobject( vDialogRoot )
      END
      IF vDialogRoot.Window.DfltButton != ""
      szEditActionCode = szEditActionCode + " onKeyPress=^return _OnEnter( event )^"
      END
      DropView( vDialogRoot )

   IF szNoOutputMapping = "Y"
         szValue = "value=^^"
   ELSE 
      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0 AND bMapping = 0
         szValue = "value=^" + vDialog.Control.Text + "^"
      ELSE
         szValue = "value=^<%=strErrorMapValue%>^"
      END
   END

   IF szNoOutputMapping = "Y"
         szValue = "value=^^"
   ELSE 
      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0 AND bMapping = 0
         szValue = "value=^" + vDialog.Control.Text + "^"
      ELSE
         szValue = "value=^<%=strErrorMapValue%>^"
      END
   END

   //KJS 10/19/07 - Added title.
   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateDisabledString( vDialog, szDisabled )
   szClass = vDialog.Control.CSS_Class
   IF szClass = ""
      szWriteBuffer = "<input name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ " + szDisabled + szTitleHTML + szStyle + szType +
                      szValue + szEditActionCode + " >"
   ELSE
      szWriteBuffer = "<input class=^" + szClass + "^ name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ " + szDisabled +
                      szTitleHTML + szStyle + szType + szValue + szEditActionCode + " >"
   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteText
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteText( VIEW vDialog      BASED ON LOD TZWDLGSO,
                  VIEW vGroupParent BASED ON LOD TZWDLGSO,
                  VIEW vDialogRoot  BASED ON LOD TZWDLGSO,
                  INTEGER          lFile,
                  STRING ( 10000 ) szWriteBuffer,
                  STRING ( 50 )    szIndent,
                  STRING ( 32 )    szCtrlTag,
                  STRING ( 20 )    szJustify,
                  STRING ( 1 )     szNoPositioning,
                  INTEGER          lOffsetX,
                  INTEGER          lOffsetY,
                  STRING ( 100 )   szRepeatGrpKey )

   // Format a TEXT control.

   STRING ( 32 )  szContextName
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClassHTML
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 1000 ) szText
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szMaxStringLength
   STRING ( 20 )  szGroupParentType
   STRING ( 256 ) szHTMLCtrlID
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   DECIMAL        dDLUnits
   INTEGER        lMaxStringLength
   INTEGER        lSubtypeX
   INTEGER        lSubtype
   INTEGER        lTemp
   SHORT          nMultiLineFlag
   SHORT          nBoldFlag
   SHORT          nItalicFlag
   SHORT          nStrikeoutFlag
   SHORT          nUnderlineFlag
   INTEGER        lJustify
   INTEGER        lFontSize
   INTEGER        lTextColor
   INTEGER        lTextBkColor
   INTEGER        lBorderStyle
   INTEGER        lBorderColor
   INTEGER        lEscapement
   INTEGER        lType
   STRING ( 32 )  szFaceName
   STRING ( 256 ) szLabelFor
   STRING ( 256 ) szDecoration
   STRING ( 256 ) szTempStyle
   STRING ( 1 )   szIsLabel
   SHORT          nRC

   szText = vDialog.Control.Text
   CreateTabIndexString( vDialog, szTabIndex )

   szHTMLCtrlID = " id=^" + szCtrlTag + szRepeatGrpKey + "^ name=^" + szCtrlTag + szRepeatGrpKey + "^ "

   IF  szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
   ELSE
   IF szNoPositioning = "S" // No style information
      szStyle = "" 
   ELSE 
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END
   END

   nRC = TX_GetTextRptCtrlBOI( vDialog, nMultiLineFlag, nBoldFlag,
                               nItalicFlag, nStrikeoutFlag,
                               nUnderlineFlag, lJustify,
                               lFontSize, lTextColor, lTextBkColor,
                               lBorderStyle, lBorderColor,
                               lEscapement, lType, szFaceName )

   // If the return code is <= 0, the CtrlBOI is null.
   szDecoration = ""
   IF nRC > 0

      IF nItalicFlag != 0
         szDecoration = szDecoration + "font-style:italic;"
      END

      IF nBoldFlag != 0
         szDecoration = szDecoration + "font-weight:bold;"
      END

      IF lJustify != 0
         nRC = IsFlagSequenceSet( lJustify, 2 )
         IF nRC != 0
            szDecoration = szDecoration + "text-align:center;"
         ELSE
            nRC = IsFlagSequenceSet( lJustify, 4 )
            IF nRC != 0
               szDecoration = szDecoration + "text-align:right;"
            END
         END
      END

      IF nUnderlineFlag != 0 AND nStrikeoutFlag != 0
         szDecoration = szDecoration + "text-decoration:underline line-through;"
      ELSE
         IF nUnderlineFlag != 0
            szDecoration = szDecoration + "text-decoration:underline;"
         END

         IF nStrikeoutFlag != 0
            szDecoration = szDecoration + "text-decoration:line-through;"
         END
      END
   END

   //KJS 10/19/07 - Added title.
   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   IF szNoPositioning != "S" 
      zAppendQuotedString( szStyle, szDecoration, "style=", "^" )
   END
   szStyle = szStyle + szTabIndex
   IF vDialog.Control.CSS_Class != ""
      szClassHTML = "class=^" + vDialog.Control.CSS_Class + "^ "
   END

   // Check if a Group control as parent of this control requests relative postioning either through the
   // older "Span" setting or the newer "RelativePos" request.
   szGroupParentType = ""
   IF vGroupParent != 0
      // Override Style if parent group requests relative positioning
      // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
      // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
      ///*
      SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
      IF RESULT >= zCURSOR_SET
         szGroupParentType = "RelativePos"
      ELSE
         szGroupParentType = vGroupParent.Control.WebCtrlType
      END
      //*/
      //szGroupParentType = vGroupParent.Control.WebCtrlType
      IF szGroupParentType = "RelativePos" OR szGroupParentType = "Span"
         szStyle = "style=^position:relative;^"
      END
   END

   // Process variable Text mapping.
   SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Displayed Text"
   IF RESULT < zCURSOR_SET
      SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
                 WHERE vDialog.CtrlMap.Tag = ""
   END
   IF RESULT >= zCURSOR_SET
      // There is mapping of the Display Text value.
      szWriteBuffer = "<% strTextDisplayValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END
      
      /**********************************/
      // Add try/catch
      szWriteBuffer = "      try"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF vDialog.CtrlMapER_Domain.DataType = "T" OR vDialog.CtrlMapER_Domain.DataType = "D"
         szWriteBuffer = "         strTextDisplayValue = " +
                         vDialog.CtrlMapView.Name + ".cursor( ^" +
                         vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                         vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                         szContextName + "^ );"
      ELSE
         IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
            lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
            szMaxStringLength = lMaxStringLength
         ELSE
            szMaxStringLength = "254"
         END

         szWriteBuffer = "         strTextDisplayValue = " +
                         vDialog.CtrlMapView.Name + ".cursor( ^" +
                         vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                         vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                         szContextName + "^ );"
      END

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      catch (Exception e)"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      //szWriteBuffer = "         strBuildPageError = e.getMessage();"
      szWriteBuffer = "         out.println(^There is an error on " + szCtrlTag + ": ^ + e.getMessage());"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log().info( ^*** Error on ctrl " + szCtrlTag + "^ + e.getMessage() );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      
      /***************** END OF try/catch **********************/

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "         if ( strTextDisplayValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strTextDisplayValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szText = "<%=strTextDisplayValue%>"

   END

   IF vDialog.EventAct EXISTS    // There is only one EventAct, which is HotText.
      IF vDialog.EventAct.Type = 45    // Type 45 is Hyperlink Action.
         // The Text triggers a Hyperlink to a constant or variable URL address
         SET CURSOR FIRST vDialog.CtrlMap WHERE vDialog.CtrlMap.Tag = "Hyperlink URL"
         IF RESULT >= zCURSOR_SET
            // There is mapping of the Hyperlink URL value.
            szWriteBuffer = "<% strTextURL_Value = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                            "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   else"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            ELSE
               szContextName = ""
            END

            IF vDialog.CtrlMapER_Domain.DataType = "T" OR vDialog.CtrlMapER_Domain.DataType = "D"
               szWriteBuffer = "         strTextURL_Value = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                               szContextName + "^ );"
            ELSE
               IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
                  lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
                  szMaxStringLength = lMaxStringLength
               ELSE
                  szMaxStringLength = "254"
               END

               szWriteBuffer = "         strTextURL_Value = " +
                               vDialog.CtrlMapView.Name + ".cursor( ^" +
                               vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                               vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                               szContextName + "^ );"
            END

            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
            szWriteBuffer = "         if ( strTextURL_Value == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strTextURL_Value = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "   }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "%>"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            //KJS 10/19/07 - Added title.

            // The Hyperlink URL value is a variable.
            szWriteBuffer = "<a href=^<%=strTextURL_Value%>^  " + szHTMLCtrlID + szClassHTML + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"
         ELSE

            // The Hyperlink URL value is a constant in the Action.
            SET CURSOR FIRST vDialogRoot.Action WHERE vDialogRoot.Action.ZKey = vDialog.EventAct.ZKey
            IF vDialogRoot.Action.WebHTML_TransferAddress = ""
               MessageSend( vDialog, "", "XSL Generation",
                            "A Hyperlink Action without URL mapping requires a 'Link to HTML Address' value.",
                            zMSGQ_OBJECT_CONSTRAINT_WARNING, 0 )
            END

            szWriteBuffer = ""
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            //KJS 10/19/07 - Added title.
            szWriteBuffer = "<a href=^" + vDialogRoot.Action.WebHTML_TransferAddress + "^  " + szHTMLCtrlID + szClassHTML + szTitleHTML + szStyle + " target=^_blank^>" + szText + "</a>"

         END
      ELSE
         // This is HotText with regular Action, rather than HyperLink.
         szWriteBuffer = ""
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         //KJS 10/17/2007 Jeff says we need "javascript:" before the action name for href actions.  I think this
         //is the place to put it but I confess I'm not exactly sure...
         //KJS 10/19/07 - Added title.
         //KJS 09/24/10 - Now realizing that Jeff was incorrect about the javascript: and it shouldn't be used (http://jibbering.com/faq/#FAQ4_24).
         //Changing them to use the # and onclick.
         IF szRepeatGrpKey = ""
            szWriteBuffer = "<a href=^#^" + szHTMLCtrlID + " onclick=^" + vDialog.EventAct.Tag + "( );^ " + szClassHTML + szTitleHTML + szStyle + ">" + szText + "</a>"
         ELSE
            szWriteBuffer = "<a href=^#^" + szHTMLCtrlID + "  onclick=^" + vDialog.EventAct.Tag + "( '" + szCtrlTag + szRepeatGrpKey + "' );^ " + szClassHTML + szTitleHTML + szStyle + ">" + szText + "</a>"
         END
      END
   ELSE
      // Regular Text Control (No HotText)
      szWriteBuffer = ""
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szIsLabel = ""
      szLabelFor = ""
      SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "Label"
      IF RESULT >= zCURSOR_SET
         szIsLabel = "Y"
         IF vDialog.Control.WebCtrlLabelLink != ""
            // Tie the label to an input control.
            szLabelFor = " for=^" + vDialog.Control.WebCtrlLabelLink + "^ " 
         END
      END

      // If szNoPositioning is null then we are using absolute positioning when creating controls.
      IF  szNoPositioning = ""

      // PIX_PER_DU( vDialog, dDLUnits )
      // zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
      // zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )
      // szTempStyle = "position:absolute;left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;^ "
         zAppendQuotedString( szStyle, szDecoration, "style=", "^" )
         szWriteBuffer = "<label " + szClassHTML + szHTMLCtrlID + szTitleHTML + szStyle + ">" + szText + "</label>"
      ELSE
   
         // If there is a "Label" web control property than make this a label, otherwise, just use <span>.
         IF szIsLabel = "Y"
            szWriteBuffer = "<label " + szClassHTML + szHTMLCtrlID + szLabelFor + szTitleHTML + szStyle + ">" + szText + "</label>"
         ELSE 
            szWriteBuffer = "<span " + szClassHTML + szHTMLCtrlID + szTitleHTML + szStyle + ">" + szText + "</span>"
         END

      END
   END

   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END

/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrteJPG
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrteJPG( VIEW vDialog BASED ON LOD TZWDLGSO,
                INTEGER          lFile,
                STRING ( 10000 ) szWriteBuffer,
                STRING ( 50 )    szIndent,
                STRING ( 32 )    szCtrlTag,
                STRING ( 1 )     szNoPositioning,
                INTEGER          lOffsetX,
                INTEGER          lOffsetY )

   // Format a BITMAP or JPG control.

   STRING ( 32 )  szContextName
   STRING ( 256 ) szClass
   STRING ( 256 ) szStyle
   STRING ( 16 )  szTabIndex
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) szText
   STRING ( 32 )  szActionName
   INTEGER        nRC

   CreateTabIndexString( vDialog, szTabIndex )

   // If this window is being generated with no positioning then
   // do not create the position in the style.
   IF szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
   ELSE
   IF szNoPositioning = "S"
      szStyle = "" // No style information.
   ELSE 
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END
   END

   //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   szStyle = szStyle + szTabIndex

   szActionName = ""
   IF vDialog.EventAct EXISTS
      szActionName = vDialog.EventAct.Tag
      nRC = zstrcmpi( szActionName, "alt-f4" )
      IF nRC = 0
         szActionName = "AltF4"
      END
   END

   szClass = ""
   IF vDialog.Control.CSS_Class != ""
      szClass = " class=^" + vDialog.Control.CSS_Class + "^ "
   END

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END
   szText = ""
   IF  vDialog.Control.Text != ""
      szText = " alt=^" + vDialog.Control.Text + "^ "
   END

   //There might be mapping for this control which means we should get the
   //image from the mapping, or there might be an image file name, so we wouldn't
   //use the mapping.
   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET

      szWriteBuffer = "<% strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                      "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name +
               ".log( ).debug( ^Invalid View: ^, ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorMapValue = " +
                      vDialog.CtrlMapView.Name +
                      ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to ""
      szWriteBuffer = "         if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      IF  szActionName = ""
         szWriteBuffer = "<img src=^<%=strErrorMapValue%>^ " + szStyle + szTitleHTML + szClass + szText + ">"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      ELSE
         szWriteBuffer = "<img src=^<%=strErrorMapValue%>^ onclick=^" + szActionName + "( )^ " + szStyle + szTitleHTML + szClass + szText + ">"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
   ELSE
      //Not getting image from mapping, a file name has been specified.
      IF vDialog.Control.WebFileName != ""
         IF szActionName = ""
         // szWriteBuffer = "<a href=^#^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ ><img src=^" +
         //    vDialog.Control.WebFileName + "^ " + szStyle + szTitleHTML + "></a>"
            szWriteBuffer = "<img src=^" + vDialog.Control.WebFileName + "^  name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ " +
                              szStyle + szTitleHTML + szClass + szText + ">"
         ELSE
            szWriteBuffer = "<img src=^" + vDialog.Control.WebFileName + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ onclick=^" +
                            szActionName + "( )^ " + szStyle + szTitleHTML + szClass + szText + ">"
         // szWriteBuffer = "<a href=^#^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ ^onclick=^" +
         //                 szActionName + "( )^><img src=^" + vDialog.Control.WebFileName + "^ " + szStyle + szTitleHTML + "></a>"
         END
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      ELSE
         //Neither mapping nor filename was specified.
         szWriteBuffer = "//There was no information on where to get the image.  Nothing created."
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      END
  END

END

/*************************************************************************************************
**
**    OPERATION: GenJSPJ_CrteListBox
**
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteListBox( VIEW vDialog,
                    INTEGER lFile,
                    STRING ( 10000 ) szWriteBuffer,
                    STRING ( 50 )    szIndent,
                    STRING ( 32 )    szCtrlTag,
                    STRING ( 1 )     szNoPositioning,
                    INTEGER lOffsetX,
                    INTEGER lOffsetY )

   VIEW vScope  BASED ON LOD TZWDLGSO  // identifies scoping entity for list entries
   STRING ( 32 )  szContextName
   STRING ( 32 )  szScopingEntityName
   STRING ( 32 )  szListEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 32 )  szEntityName
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 256 ) ListBoxDoubleClickAction
   STRING ( 16 )  szTabIndex
   STRING ( 10 )  szMaxStringLength
   STRING ( 10 )  szWidth
   STRING ( 10 )  szSelectAction
   STRING ( 10 )  szSelectFunction
   STRING ( 10 )  szHeight
   STRING ( 10 )  szX_Pos
   STRING ( 10 )  szY_Pos
   STRING ( 10 )  szDisabled
   DECIMAL        dDLUnits
   INTEGER        lSubtype
   INTEGER        lMaxStringLength

   szStyle = "width:" + szWidth + "px; height:" + szHeight + "px;"
   szClass = vDialog.Control.CSS_Class

   //If we put a title on the control, when the mouse is hovered over the control, this text will display.
   szTitleHTML = ""
   szTitle = vDialog.Control.DIL_Text
   IF szTitle != ""
      szTitleHTML = " title=^" + szTitle + "^ "
   END

   CreateTabIndexString( vDialog, szTabIndex )
   // We will set the height to the constant 20 px.
   PIX_PER_DU( vDialog, dDLUnits )
   zIntegerToString( szWidth, 10, vDialog.Control.SZDLG_X * dDLUnits )
   zIntegerToString( szHeight, 10, vDialog.Control.SZDLG_Y * dDLUnits )
   szStyle = "style=^width:" + szWidth + "px;height:" + szHeight + "px;"

   // If szNoPositioning is null then we are using absolute positioning on controls.
   IF szNoPositioning = ""

      zIntegerToString( szX_Pos, 10, vDialog.Control.PSDLG_X * dDLUnits )
      zIntegerToString( szY_Pos, 10, vDialog.Control.PSDLG_Y * dDLUnits )
      szStyle = szStyle + "position:absolute;" + "left:" + szX_Pos + "px;" + "top:" + szY_Pos + "px;"
      //CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   ELSE
   IF szNoPositioning = "S"
      szStyle = "" 
   END
   END

   szStyle = szStyle + "^ " + szTabIndex

   szWriteBuffer = "<% strErrorMapValue = ^^;  %>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   szSelectFunction = "OnClick"


      // Check if DoubleClick Event and Action exist and handle accordingly.
      ListBoxDoubleClickAction = ""
      SET CURSOR FIRST vDialog.Event WHERE vDialog.Event.Type = 2
      IF RESULT >= zCURSOR_SET AND vDialog.EventAct EXISTS
         ListBoxDoubleClickAction = " ondblclick=^" + vDialog.EventAct.Tag + "( )^ "
      END


      // Set cursor to the scoping entity if one exists
      CreateViewFromViewForTask( vScope, vDialog, 0 )
      SET CURSOR NEXT vScope.CtrlMap

      IF szClass = ""
         szWriteBuffer = "<select name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^4^ " + szTitleHTML +
                         szStyle + szDisabled + " onclick=^" + szCtrlTag + szSelectFunction + "( )^" + ListBoxDoubleClickAction + ">"
      ELSE
         szWriteBuffer = "<select class=^" + szClass + "^ name=^" + szCtrlTag + "^ id=^" + szCtrlTag + "^ size=^4^ " + szTitleHTML +
                         szStyle + szDisabled + " onclick=^" + szCtrlTag + szSelectFunction + "( )^" + ListBoxDoubleClickAction + ">"
      END
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapView EXISTS


         // See if a list entity has been specified, and if so, use it.
         // Since this is a listbox I believe this should always be specified.
         IF vDialog.CtrlMapLOD_Entity EXISTS
            szListEntityName = vDialog.CtrlMapLOD_Entity.Name
         END

         szWriteBuffer = "   " + vDialog.CtrlMapView.Name + " = " +
                         "task.getViewByName( ^" + vDialog.CtrlMapView.Name + "^ );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "   {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboCurrentValue = ^^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      View v" + szCtrlTag + ";"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szAttributeName = ""
         szEntityName = ""
         szContextName = ""

         // Set position on the text field inside the listbox.
         SetViewToSubobject( vDialog, "CtrlCtrl" )
         IF vDialog.CtrlMapLOD_Attribute EXISTS

            szAttributeName = vDialog.CtrlMapER_Attribute.Name
            szEntityName = vDialog.CtrlMapRelatedEntity.Name

            szWriteBuffer = "      nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                            szEntityName + "^ ).checkExistenceOfEntity( ).toInt();"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      if ( nRC >= 0 )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      {"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            IF vDialog.CtrlMapContext EXISTS
               szContextName = vDialog.CtrlMapContext.Name
            END

            IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
               lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
               szMaxStringLength = lMaxStringLength
            ELSE
               szMaxStringLength = "254"
            END


            szWriteBuffer = "         strComboCurrentValue = " + vDialog.CtrlMapView.Name +
                     ".cursor( ^" +
                     szEntityName + "^ ).getAttribute( ^" +
                     szAttributeName + "^ ).getString( ^" + szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to ""
            szWriteBuffer = "         if ( strComboCurrentValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "      }"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         ELSE
            szWriteBuffer = "      strComboCurrentValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         END
         ResetViewFromSubobject( vDialog )

         // See if a scoping entity has been specified, and if so, use it.
         szScopingEntityName = ""
         lSubtype = vDialog.Control.Subtype
         lSubtype = IsFlagSequenceSet( lSubtype, zLISTBOX_SCOPE_OI )
         IF lSubtype = 0
            IF vScope.CtrlMapLOD_Entity EXISTS
               szScopingEntityName = "^" + vScope.CtrlMapLOD_Entity.Name + "^"
            END
         END

         szWriteBuffer = "      v" + szCtrlTag + " = " + vDialog.CtrlMapView.Name + ".newView( );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "      ComboCount = 0;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      strComboSelectedValue = ^0^;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         IF lSubtype = 0
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" +
                                         szListEntityName + "^ ).setFirst( " + szScopingEntityName + " );"
         ELSE
            szWriteBuffer = "      csrRC = v" + szCtrlTag + ".cursor( ^" + szListEntityName + "^ ).setFirstWithinOi( );"
         END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      while ( csrRC.isSet() )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "      {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

         IF szAttributeName != ""

            szWriteBuffer = "         strErrorMapValue = v" + szCtrlTag +
                            ".cursor( ^" +
                            szEntityName + "^ ).getAttribute( ^" +
                            szAttributeName + "^ ).getString( ^" +
                            szContextName + "^ );"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

            // KJS 02/15/11 - Thinking I need to add code to change values returned as null to ""
            szWriteBuffer = "         if ( strErrorMapValue == null )"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
            szWriteBuffer = "            strErrorMapValue = ^^;"
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         END

         szWriteBuffer = "         if ( StringUtils.equals( strComboCurrentValue, strErrorMapValue ) )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option selected=^selected^><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            strComboSelectedValue = Integer.toString( ComboCount );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         else"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         {"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "%>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "            <option><%=strErrorMapValue%></option>"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "<%"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         }"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "         ComboCount++;"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      // IF lSubtype = 0  now always do setNextContinue here for performance reasons dks/dgc 2011.05.03
            szWriteBuffer = "         csrRC =  v" + szCtrlTag +
                            ".cursor( ^" + szListEntityName +
                            "^ ).setNextContinue( );"
                            //"^ ).setNext( " + szScopingEntityName + " );"
      // ELSE
      //    szWriteBuffer = "         nRC =  v" + szCtrlTag +
      //                    ".cursor( ^" + szListEntityName + "^ ).setNextWithinOi( );"
      // END

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         DropView( vScope )
      END

      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szWriteBuffer = "      v" + szCtrlTag + ".drop( );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "<input name=^h" + szCtrlTag + "^ id=^h" + szCtrlTag + "^ type=^hidden^ value=^<%=strComboSelectedValue%>^ >"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

   szWriteBuffer = "</select>"
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END


/*************************************************************************************************
**    
**    OPERATION: GenJSPJ_CrteMLEdit
**    JSP Java generation for MLE control
**    
*************************************************************************************************/
GLOBAL OPERATION
GenJSPJ_CrteMLEdit( VIEW vDialog BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   VIEW vLPLR    BASED ON LOD TZCMLPLO
   STRING ( 32 )  szLPLR_Name
   STRING ( 32 )  szContextName
   STRING ( 256 ) szClass
   STRING ( 50 )  szControlType
   STRING ( 50 )  szSize
   STRING ( 50 )  szHeight
   STRING ( 256 ) szAbsoluteStyle
   STRING ( 50 )  szTitleHTML
   STRING ( 50 )  szTabIndex
   STRING ( 50 )  szActionName
   STRING ( 500 ) szActionCode
   STRING ( 256 ) szText
   STRING ( 10 )  szMaxStringLength
   STRING ( 1 )   szTinyMCEFlag
   INTEGER        X_Size
   INTEGER        Y_Size
   INTEGER        Size
   INTEGER        lMaxStringLength
   INTEGER        lStyleX
   INTEGER        lTemp
   SHORT          nRC

   TraceLineS("**** GenJSPJ_CrteMLEdit **** ", "")

   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   // " + szControlType + ": " + szCtrlTag
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   strErrorMapValue = VmlOperation.CheckError( ^" + szCtrlTag + "^, strError );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   if ( !StringUtils.isBlank( strErrorMapValue ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( StringUtils.equals( strErrorFlag, ^Y^ ) )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         strErrorColor = ^color:red;^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      strErrorColor = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                      vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).info( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END

      IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
         lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
         szMaxStringLength = lMaxStringLength
      ELSE
         szMaxStringLength = "254"
      END

      szWriteBuffer = "            strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "            if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "            task.log( ).info( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log( ).info( ^Entity does not exist for " + szCtrlTag + ": ^ + ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "   }"
      lStyleX = vDialog.Control.ExtendedStyle
      lTemp = IsFlagSequenceSet( lStyleX, zCONTROLX_PREFILL )
      IF lTemp != 0
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
         szWriteBuffer = "      if ( strErrorMapValue.length( ) == 0 )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
      END

      // This doesn't work, but something like it may be necessary to remove special characters ... dks 2012.04.25
      // strErrorMapValue = strErrorMapValue.replace("/&/g", "&amp;").replace("/>/g", "&gt;").replace("/</g", "&lt;").replace("/\"/g", "&quot;").replace("/%/g", "&#037;");

      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

   END // SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   
   // *********************  NEW ******************
   
   // If there is an Event for the MLEdit, build code to insert in <textarea statement.
   szActionCode = ""
   FOR EACH vDialog.Event
      IF vDialog.EventAct EXISTS
         szActionName = vDialog.EventAct.Tag
         IF vDialog.Event.Type = 32
            szActionCode = szActionCode + " onfocus=^" + szActionName + "( )^ "
         ELSE
         IF vDialog.Event.Type = 64
            szActionCode = szActionCode + " onblur=^" + szActionName + "( )^ "
         ELSE
         IF vDialog.Event.Type = 1024
            szActionCode = szActionCode + " onchange=^" + szActionName + "( )^ "
         ELSE
         IF vDialog.Event.Type = 1
            szActionCode = szActionCode + " onkeydown=^" + szActionName + "( )^ "
         END
         END
         END
         END
      END
   END
   
   // *********************  END NEW ******************

   CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )

   X_Size = vDialog.Control.SZDLG_X
   Size = X_Size / 4
   zIntegerToString( szSize, 10, Size )
   Y_Size = vDialog.Control.SZDLG_Y
   Size = Y_Size / 12
   zIntegerToString( szHeight, 10, Size )

   IF vDialog.Control.VisibleBorder = "Y"
      zAppendQuotedString( szAbsoluteStyle, "border:solid;border-width:4px;border-style:groove;", "style=", "^" )
   ELSE
      zAppendQuotedString( szAbsoluteStyle, "border:solid;border-width:2px;border-style:groove;", "style=", "^" )
   END
   
   IF szNoPositioning = "S"
      szAbsoluteStyle = "" // No style information.    
   END

   szTinyMCEFlag = ""
   SET CURSOR FIRST vDialog.WebControlProperty WHERE vDialog.WebControlProperty.Name = "wysiwyg TinyMCE"
   IF RESULT >= zCURSOR_SET
      szTinyMCEFlag = "Y"
   END

   IF vDialog.Control.WebCtrlType = "wysiwygEditor" OR szTinyMCEFlag = "Y"

   // CreateTabIndexString( vDialog, szTabIndex )
   // CreateAbsolStyleString( vDialog, szAbsoluteStyle, lOffsetX, lOffsetY, "" )
   // szAbsoluteStyle = szAbsoluteStyle + szTabIndex

      GetViewByName( vLPLR, "TaskLPLR", vDialog, zLEVEL_TASK )
      szText = vLPLR.LPLR.Name
      szLPLR_Name = "[App." + szText + "]"
      SysReadZeidonIni( -1, szLPLR_Name, "TinyMCEClass", szClass )
      IF szClass = ""
         szClass = "mceSimple"  // "mceSimple" is TinyMCE default
      END

      IF vDialog.Control.CSS_Class != ""
         szClass = szClass + " " + vDialog.Control.CSS_Class
      END

      szWriteBuffer = "<textarea name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey +
                      "^ class=^" + szClass + "^ " + szTitleHTML +
                      szAbsoluteStyle + szActionCode + ">" +
                   // "^ rows="15" cols="80" style="width: 80%">" +
                      "<%=strErrorMapValue%></textarea>"

   ELSE
      szClass = ""
      IF vDialog.Control.CSS_Class != ""
         szClass = vDialog.Control.CSS_Class
         szClass = " class=^" + vDialog.Control.CSS_Class + "^"
      END
      CreateTabIndexString( vDialog, szTabIndex )
      szWriteBuffer = "<textarea name=^" + szCtrlTag + szRepeatGrpKey + "^ id=^" + szCtrlTag + szRepeatGrpKey + "^ " + szTitleHTML +
                      szAbsoluteStyle + szTabIndex + szClass + szActionCode + " wrap=^wrap^>" +
                      "<%=strErrorMapValue%></textarea>"

   END
   WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

END



/////////////////////////////////////////////////////////////////////////////
//
//  OPERATION: GenJSPJ_CrtePushButton
//
/////////////////////////////////////////////////////////////////////////////
GLOBAL OPERATION
GenJSPJ_CrtePushButton( VIEW vDialog BASED ON LOD TZWDLGSO,
                        VIEW vGroupParent BASED ON LOD TZWDLGSO,
                     INTEGER          lFile,
                     STRING ( 10000 ) szWriteBuffer,
                     STRING ( 50 )    szIndent,
                     STRING ( 32 )    szCtrlTag,
                     STRING ( 1 )     szTableRowFlag,
                     STRING ( 20 )    szJustify,
                     STRING ( 1 )     szNoPositioning,
                     INTEGER          lOffsetX,
                     INTEGER          lOffsetY,
                     STRING ( 100 )   szRepeatGrpKey )

   // Format an PushButton control.

   VIEW vDialogRoot BASED ON LOD TZWDLGSO
   STRING ( 32 )  szContextName
   STRING ( 300 ) szValue
   STRING ( 600 ) szBlob
   STRING ( 256 ) szStyle
   STRING ( 256 ) szClass
   STRING ( 256 ) szTitle
   STRING ( 256 ) szTitleHTML
   STRING ( 300 ) szType
   STRING ( 256 ) szText
   STRING ( 50 )  szParentWebType
   STRING ( 256 )  szTerm
   STRING ( 256 ) szAction
   STRING ( 64 )  szWidget
   STRING ( 16 )  szTabIndex
   STRING ( 600 ) szEditActionCode
   STRING ( 32 )  szActionName
   STRING ( 10 )  szMaxStringLength
   STRING ( 10 )  szDisabled
   STRING ( 1 )   szWCP_Hidden
   STRING ( 1 )   szCreateSessionVariable
   STRING ( 1 )   szBrowseFile
   INTEGER        lMaxStringLength
   INTEGER        lStyleX
   INTEGER        lTemp
   SHORT          bMapping
   SHORT          nRC

   // For testing no height on input boxes
   STRING ( 10 )  szWidth
   DECIMAL        dDLUnits
   STRING ( 100 )  szSize
   STRING ( 100 )  szPosition

   TraceLineS("*** GenJSPJ_CrtePushButton *** ", "")

   IF  szNoPositioning = "Y"
      CreateNoPosStyleString( vDialog, szStyle, "" )
   ELSE
   IF szNoPositioning = "S" // No style information
      szStyle = "" 
   ELSE 
      CreateAbsolStyleString( vDialog, szStyle, lOffsetX, lOffsetY, "" )
   END
   END
   
   /********************************** REAL CODE **********************/
            szActionName = ""
            IF vDialog.EventAct EXISTS
               szActionName = vDialog.EventAct.Tag
               nRC = zstrcmpi( szActionName, "alt-f4" )
               IF nRC = 0
                  szActionName = "AltF4"
               END
            END

            CreateTabIndexString( vDialog, szTabIndex )
            szStyle = szStyle + szTabIndex
            
            // KJS 10/20/15 - If there is mapping for the button text, we need to use that.kkk
   /************************************** NEW CODE *********************************/
   SET CURSOR FIRST vDialog.CtrlMapLOD_Attribute WITHIN vDialog.Control
   IF RESULT >= zCURSOR_SET 
      bMapping = 1
      szWriteBuffer = "<%"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      " + vDialog.CtrlMapView.Name + " = " + "task.getViewByName( ^" +
                      vDialog.CtrlMapView.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      if ( VmlOperation.isValid( " + vDialog.CtrlMapView.Name + " ) == false )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         task.log( ).debug( ^Invalid View: ^ + ^" + szCtrlTag + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         nRC = " + vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).checkExistenceOfEntity( ).toInt();"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         if ( nRC >= 0 )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.CtrlMapContext EXISTS
         szContextName = vDialog.CtrlMapContext.Name
      ELSE
         szContextName = ""
      END
      
      // Add try/catch
      szWriteBuffer = "            try"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      IF vDialog.CtrlMapER_Domain.MaxStringLth > 254
         lMaxStringLength = vDialog.CtrlMapER_Domain.MaxStringLth
         szMaxStringLength = lMaxStringLength
      ELSE
         szMaxStringLength = "254"
      END
      szWriteBuffer = "               strErrorMapValue = " +
                      vDialog.CtrlMapView.Name + ".cursor( ^" +
                      vDialog.CtrlMapRelatedEntity.Name + "^ ).getAttribute( ^" +
                      vDialog.CtrlMapER_Attribute.Name + "^ ).getString( ^" +
                      szContextName + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      IF vDialog.Control.WebCtrlType = "escapeHTML"
         szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " prior to unescape: ^ + strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               strErrorMapValue = StringEscapeUtils.unescapeHtml4( strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "               task.log().debug( ^" + szCtrlTag + " after unescape: ^ + strErrorMapValue );"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      END

      szWriteBuffer = "            }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            catch (Exception e)"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            {"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               out.println(^There is an error on " + szCtrlTag + ": ^ + e.getMessage());"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               task.log().error( ^*** Error on ctrl " + szCtrlTag + "^, e );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      /***************** END OF try/catch **********************/

      // KJS 02/15/11 - Thinking I need to add code to change values returned as null to "".
      szWriteBuffer = "            if ( strErrorMapValue == null )"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "               strErrorMapValue = ^^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

      szWriteBuffer = "            task.log( ).debug( ^" + vDialog.CtrlMapRelatedEntity.Name + "." +
                      vDialog.CtrlMapER_Attribute.Name + ": ^ + strErrorMapValue );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "         }"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "         else"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "            task.log( ).debug( ^Entity does not exist for " + szCtrlTag + ": ^ + ^" +
                      vDialog.CtrlMapView.Name +
                      "." + vDialog.CtrlMapRelatedEntity.Name + "^ );"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
      szWriteBuffer = "      }"

         WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )

         szWriteBuffer = "      if ( strErrorMapValue == ^^ )"
         WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
         szWriteBuffer = "         strErrorMapValue = ^" + vDialog.Control.Text + "^;"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )

      szWriteBuffer = "%>"
      WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
      szText = "<%=strErrorMapValue%>"
   ELSE
      szText = vDialog.Control.Text
   END


   /************************************** END OF NEW CODE *********************************/

            //szText = vDialog.Control.Text
            // Set Class as either null or with Class value.
            IF vDialog.Control.CSS_Class = ""
               szClass = ""
            ELSE
               szClass = "class=^" + vDialog.Control.CSS_Class + "^ "
            END

            //If we put a title on the control, when the mouse is hovered over the control, this text will display.
            szTitleHTML = ""
            szTitle = vDialog.Control.DIL_Text
            IF szTitle != ""
               szTitleHTML = " title=^" + szTitle + "^ "
            END

            szWidget = "<button type=^button^ " + szClass + szTitleHTML + "name=^"
            szTerm = szText + "</button>"
            szText = ""
               
            // Action is different if this is a repeating group.
            IF szRepeatGrpKey = ""
               szAction = szActionName + "( )"
            ELSE
               szAction = szActionName + "( '" + szCtrlTag + szRepeatGrpKey + "' )"
            END

            szParentWebType = ""
            // KJS 01/30/14 - I'm thinking "Relative Positioning" is old. I only use this in one pwd and when I take it
            // out and use "Div/No Height", the results look exactly the same so I am going to take this off grid controls.
            IF vGroupParent != 0
               //*
               SET CURSOR FIRST vGroupParent.WebControlProperty WHERE vGroupParent.WebControlProperty.Name = "Relative Positioning"
               IF RESULT >= zCURSOR_SET
                  szParentWebType = "RelativePos"
               ELSE
                  szParentWebType = vGroupParent.Control.WebCtrlType
               END
               //*/
               //szParentWebType = vGroupParent.Control.WebCtrlType
            END
            
            IF szParentWebType = "Div" OR szParentWebType = "DivScroll" OR
               szParentWebType = "Span"

               szWriteBuffer = "<p></p>"
               WL_QC( vDialog, lFile, szWriteBuffer, "^", 0 )
               CreateSizeString( vDialog, szSize )
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szAction + "^ " + "style=^" + szSize + "^>" + szTerm
            ELSE
               szWriteBuffer = szWidget + szCtrlTag + "^ id=^" + szCtrlTag + "^ value=^" + szText + "^ onclick=^" +
                               szAction + "^ " + szStyle + ">" + szTerm
            END
            WL_QC( vDialog, lFile, szWriteBuffer, "^", 1 )
   /************************ END OF REAL CODE ********************************************/
END
