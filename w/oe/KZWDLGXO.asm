; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24213.1 

	TITLE	c:\10c\A\oe\KZWDLGXO.C
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG13364 DB	01H DUP (?)
$SG13371 DB	01H DUP (?)
$SG13373 DB	01H DUP (?)
$SG13375 DB	01H DUP (?)
$SG13405 DB	01H DUP (?)
$SG13410 DB	01H DUP (?)
$SG13412 DB	01H DUP (?)
$SG13414 DB	01H DUP (?)
$SG13437 DB	01H DUP (?)
$SG13444 DB	01H DUP (?)
$SG13446 DB	01H DUP (?)
$SG13448 DB	01H DUP (?)
$SG13475 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG13365 DB	'NLS', 00H
$SG13366 DB	'Ctrl', 00H
	ORG $+3
$SG13369 DB	'Text', 00H
	ORG $+3
$SG13370 DB	'Ctrl', 00H
	ORG $+3
$SG13372 DB	'NLS', 00H
$SG13374 DB	'NLS', 00H
$SG13376 DB	'LI', 00H
	ORG $+1
$SG13377 DB	'NLS_Text', 00H
	ORG $+3
$SG13380 DB	'Text', 00H
	ORG $+3
$SG13381 DB	'NLS_Text', 00H
	ORG $+3
$SG13382 DB	'Text', 00H
	ORG $+3
$SG13383 DB	'Ctrl', 00H
	ORG $+3
$SG13406 DB	'NLS', 00H
$SG13407 DB	'Opt', 00H
$SG13411 DB	'NLS', 00H
$SG13413 DB	'NLS', 00H
$SG13415 DB	'LI', 00H
	ORG $+1
$SG13416 DB	'NLS_Text', 00H
	ORG $+3
$SG13419 DB	'Text', 00H
	ORG $+3
$SG13420 DB	'NLS_Text', 00H
	ORG $+3
$SG13438 DB	'NLS', 00H
$SG13439 DB	'Wnd', 00H
$SG13442 DB	'Caption', 00H
$SG13443 DB	'Wnd', 00H
$SG13445 DB	'NLS', 00H
$SG13447 DB	'NLS', 00H
$SG13449 DB	'LI', 00H
	ORG $+1
$SG13450 DB	'NLS_Text', 00H
	ORG $+3
$SG13453 DB	'Text', 00H
	ORG $+3
$SG13454 DB	'NLS_Text', 00H
	ORG $+3
$SG13455 DB	'Caption', 00H
$SG13456 DB	'Wnd', 00H
$SG13474 DB	'NLS_DIL_Text', 00H
	ORG $+3
$SG13476 DB	'LI', 00H
	ORG $+1
$SG13477 DB	'NLS_DIL_Text', 00H
	ORG $+3
$SG13480 DB	'Text', 00H
	ORG $+3
$SG13481 DB	'NLS_DIL_Text', 00H
	ORG $+3
$SG13482 DB	'Msg', 00H
$SG13483 DB	'DIL', 00H
$SG13484 DB	'Msg', 00H
$SG13485 DB	'DIL', 00H
_DATA	ENDS
PUBLIC	_oKZWDLGXO_DerivedControlText@16
PUBLIC	_oKZWDLGXO_DerivedOptionText@16
PUBLIC	_oKZWDLGXO_DerivedCaption@16
PUBLIC	_oKZWDLGXO_DerivedDIL_Msg@16
EXTRN	___report_rangecheckfailure:PROC
EXTRN	_CreateViewFromViewForTask@12:PROC
EXTRN	_DropView@4:PROC
EXTRN	_ResetViewFromSubobject@4:PROC
EXTRN	_CheckExistenceOfEntity@8:PROC
EXTRN	_SetCursorFirstEntity@12:PROC
EXTRN	_SetCursorFirstEntityByInteger@20:PROC
EXTRN	_SetCursorRelativeEntity@16:PROC
EXTRN	_GetVariableFromAttribute@36:PROC
EXTRN	_SysGetLanguageCode@4:PROC
EXTRN	_GetAddrForAttribute@16:PROC
EXTRN	_StoreValueInRecord@20:PROC
; Function compile flags: /Odtp
; File c:\10c\a\oe\kzwdlgxo.c
_TEXT	SEGMENT
_pchAttr$ = -12						; size = 4
_nRC$ = -8						; size = 2
_LanguageIndex$ = -4					; size = 2
_vXWD$ = 8						; size = 4
_lpEntity$ = 12						; size = 4
_lpAttribute$ = 16					; size = 4
_GetOrSetFlag$ = 20					; size = 2
_oKZWDLGXO_DerivedDIL_Msg@16 PROC

; 129  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 130  :    zPCHAR  pchAttr;
; 131  :    zSHORT  LanguageIndex;
; 132  :    zSHORT  nRC;
; 133  : 
; 134  : 
; 135  :    if ( CheckExistenceOfEntity( vXWD, "NLS_DIL_Text" ) >= zCURSOR_SET )

	push	OFFSET $SG13474
	mov	eax, DWORD PTR _vXWD$[ebp]
	push	eax
	call	_CheckExistenceOfEntity@8
	movsx	ecx, ax
	test	ecx, ecx
	jl	SHORT $LN2@oKZWDLGXO_

; 136  :    {
; 137  :       SysGetLanguageCode( &LanguageIndex );

	lea	edx, DWORD PTR _LanguageIndex$[ebp]
	push	edx
	call	_SysGetLanguageCode@4

; 138  :       nRC = SetCursorFirstEntityByInteger( vXWD, "NLS_DIL_Text", "LI", (zLONG) LanguageIndex, "" );

	push	OFFSET $SG13475
	movsx	eax, WORD PTR _LanguageIndex$[ebp]
	push	eax
	push	OFFSET $SG13476
	push	OFFSET $SG13477
	mov	ecx, DWORD PTR _vXWD$[ebp]
	push	ecx
	call	_SetCursorFirstEntityByInteger@20
	mov	WORD PTR _nRC$[ebp], ax

; 139  :       if ( nRC >= zCURSOR_SET )

	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jl	SHORT $LN4@oKZWDLGXO_

; 140  :          GetAddrForAttribute( &pchAttr, vXWD, "NLS_DIL_Text", "Text" );

	push	OFFSET $SG13480
	push	OFFSET $SG13481
	mov	eax, DWORD PTR _vXWD$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchAttr$[ebp]
	push	ecx
	call	_GetAddrForAttribute@16
	jmp	SHORT $LN5@oKZWDLGXO_
$LN4@oKZWDLGXO_:

; 141  :       else
; 142  :          GetAddrForAttribute( &pchAttr, vXWD, "DIL", "Msg" );

	push	OFFSET $SG13482
	push	OFFSET $SG13483
	mov	edx, DWORD PTR _vXWD$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchAttr$[ebp]
	push	eax
	call	_GetAddrForAttribute@16
$LN5@oKZWDLGXO_:

; 143  :    }

	jmp	SHORT $LN3@oKZWDLGXO_
$LN2@oKZWDLGXO_:

; 144  :    else
; 145  :       GetAddrForAttribute( &pchAttr, vXWD, "DIL", "Msg" );

	push	OFFSET $SG13484
	push	OFFSET $SG13485
	mov	ecx, DWORD PTR _vXWD$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pchAttr$[ebp]
	push	edx
	call	_GetAddrForAttribute@16
$LN3@oKZWDLGXO_:

; 146  : 
; 147  :    StoreValueInRecord( vXWD, lpEntity, lpAttribute, (zPVOID) pchAttr, 0 );

	push	0
	mov	eax, DWORD PTR _pchAttr$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpAttribute$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpEntity$[ebp]
	push	edx
	mov	eax, DWORD PTR _vXWD$[ebp]
	push	eax
	call	_StoreValueInRecord@20

; 148  : 
; 149  :    return( 0 );

	xor	eax, eax

; 150  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_oKZWDLGXO_DerivedDIL_Msg@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\10c\a\oe\kzwdlgxo.c
_TEXT	SEGMENT
_lNLS$ = -16						; size = 4
_pchAttr$ = -12						; size = 4
_LanguageIndex$ = -8					; size = 2
_nRC$ = -4						; size = 2
_vXWD$ = 8						; size = 4
_lpEntity$ = 12						; size = 4
_lpAttribute$ = 16					; size = 4
_GetOrSetFlag$ = 20					; size = 2
_oKZWDLGXO_DerivedCaption@16 PROC

; 94   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H

; 95   :    zPCHAR  pchAttr;
; 96   :    zLONG   lNLS;
; 97   :    zSHORT  LanguageIndex;
; 98   :    zSHORT  nRC;
; 99   : 
; 100  :    nRC = GetVariableFromAttribute( &lNLS, 0, zTYPE_INTEGER, 0,

	push	1
	push	OFFSET $SG13437
	push	OFFSET $SG13438
	push	OFFSET $SG13439
	mov	eax, DWORD PTR _vXWD$[ebp]
	push	eax
	push	0
	push	76					; 0000004cH
	push	0
	lea	ecx, DWORD PTR _lNLS$[ebp]
	push	ecx
	call	_GetVariableFromAttribute@36
	mov	WORD PTR _nRC$[ebp], ax

; 101  :                                    vXWD, "Wnd", "NLS", "", zACCEPT_NULL_ENTITY );
; 102  :    if ( nRC < 0 )

	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jge	SHORT $LN2@oKZWDLGXO_

; 103  :    {
; 104  :       GetAddrForAttribute( &pchAttr, vXWD, "Wnd", "Caption" );

	push	OFFSET $SG13442
	push	OFFSET $SG13443
	mov	eax, DWORD PTR _vXWD$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchAttr$[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 105  :    }

	jmp	$LN3@oKZWDLGXO_
$LN2@oKZWDLGXO_:

; 106  :    else
; 107  :    {
; 108  :       SetCursorFirstEntity( vXWD, "NLS", "" );

	push	OFFSET $SG13444
	push	OFFSET $SG13445
	mov	edx, DWORD PTR _vXWD$[ebp]
	push	edx
	call	_SetCursorFirstEntity@12

; 109  :       SetCursorRelativeEntity( vXWD, "NLS", lNLS, "" );

	push	OFFSET $SG13446
	mov	eax, DWORD PTR _lNLS$[ebp]
	push	eax
	push	OFFSET $SG13447
	mov	ecx, DWORD PTR _vXWD$[ebp]
	push	ecx
	call	_SetCursorRelativeEntity@16

; 110  :       SysGetLanguageCode( &LanguageIndex );

	lea	edx, DWORD PTR _LanguageIndex$[ebp]
	push	edx
	call	_SysGetLanguageCode@4

; 111  :       nRC = SetCursorFirstEntityByInteger( vXWD, "NLS_Text", "LI", (zLONG) LanguageIndex, "" );

	push	OFFSET $SG13448
	movsx	eax, WORD PTR _LanguageIndex$[ebp]
	push	eax
	push	OFFSET $SG13449
	push	OFFSET $SG13450
	mov	ecx, DWORD PTR _vXWD$[ebp]
	push	ecx
	call	_SetCursorFirstEntityByInteger@20
	mov	WORD PTR _nRC$[ebp], ax

; 112  :       if ( nRC >= zCURSOR_SET )

	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jl	SHORT $LN4@oKZWDLGXO_

; 113  :          GetAddrForAttribute( &pchAttr, vXWD, "NLS_Text", "Text" );

	push	OFFSET $SG13453
	push	OFFSET $SG13454
	mov	eax, DWORD PTR _vXWD$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchAttr$[ebp]
	push	ecx
	call	_GetAddrForAttribute@16
	jmp	SHORT $LN3@oKZWDLGXO_
$LN4@oKZWDLGXO_:

; 114  :       else
; 115  :          GetAddrForAttribute( &pchAttr, vXWD, "Wnd", "Caption" );

	push	OFFSET $SG13455
	push	OFFSET $SG13456
	mov	edx, DWORD PTR _vXWD$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchAttr$[ebp]
	push	eax
	call	_GetAddrForAttribute@16
$LN3@oKZWDLGXO_:

; 116  :    }
; 117  : 
; 118  :    StoreValueInRecord( vXWD, lpEntity, lpAttribute, (zPVOID) pchAttr, 0 );

	push	0
	mov	ecx, DWORD PTR _pchAttr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpAttribute$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpEntity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vXWD$[ebp]
	push	ecx
	call	_StoreValueInRecord@20

; 119  : 
; 120  :    return( 0 );

	xor	eax, eax

; 121  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_oKZWDLGXO_DerivedCaption@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\10c\a\oe\kzwdlgxo.c
_TEXT	SEGMENT
_lNLS$ = -28						; size = 4
$T1 = -24						; size = 4
_pchAttr$ = -20						; size = 4
_vXWD2$ = -16						; size = 4
_LanguageIndex$ = -12					; size = 2
_szNullString$ = -8					; size = 2
_nRC$ = -4						; size = 2
_vXWD$ = 8						; size = 4
_lpEntity$ = 12						; size = 4
_lpAttribute$ = 16					; size = 4
_GetOrSetFlag$ = 20					; size = 2
_oKZWDLGXO_DerivedOptionText@16 PROC

; 51   : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 52   :    zVIEW   vXWD2;
; 53   :    zPCHAR  pchAttr;
; 54   :    zCHAR   szNullString[ 2 ];
; 55   :    zLONG   lNLS;
; 56   :    zSHORT  LanguageIndex;
; 57   :    zSHORT  nRC;
; 58   : 
; 59   :    szNullString[ 0 ] = 0;

	mov	eax, 1
	imul	ecx, eax, 0
	mov	DWORD PTR $T1[ebp], ecx
	cmp	DWORD PTR $T1[ebp], 2
	jae	SHORT $LN9@oKZWDLGXO_
	jmp	SHORT $LN10@oKZWDLGXO_
$LN9@oKZWDLGXO_:
	call	___report_rangecheckfailure
$LN10@oKZWDLGXO_:
	mov	edx, DWORD PTR $T1[ebp]
	mov	BYTE PTR _szNullString$[ebp+edx], 0

; 60   : 
; 61   :    nRC = GetVariableFromAttribute( &lNLS, 0, zTYPE_INTEGER, 0,

	push	1
	push	OFFSET $SG13405
	push	OFFSET $SG13406
	push	OFFSET $SG13407
	mov	eax, DWORD PTR _vXWD$[ebp]
	push	eax
	push	0
	push	76					; 0000004cH
	push	0
	lea	ecx, DWORD PTR _lNLS$[ebp]
	push	ecx
	call	_GetVariableFromAttribute@36
	mov	WORD PTR _nRC$[ebp], ax

; 62   :                                    vXWD, "Opt", "NLS", "", zACCEPT_NULL_ENTITY );
; 63   :    if ( nRC < 0 )

	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jge	SHORT $LN4@oKZWDLGXO_

; 64   :       pchAttr = szNullString;

	lea	eax, DWORD PTR _szNullString$[ebp]
	mov	DWORD PTR _pchAttr$[ebp], eax
	jmp	$LN5@oKZWDLGXO_
$LN4@oKZWDLGXO_:

; 65   :    else
; 66   :    {
; 67   :       CreateViewFromViewForTask( &vXWD2, vXWD, 0 );

	push	0
	mov	ecx, DWORD PTR _vXWD$[ebp]
	push	ecx
	lea	edx, DWORD PTR _vXWD2$[ebp]
	push	edx
	call	_CreateViewFromViewForTask@12

; 68   :       nRC = ResetViewFromSubobject( vXWD2 );

	mov	eax, DWORD PTR _vXWD2$[ebp]
	push	eax
	call	_ResetViewFromSubobject@4
	mov	WORD PTR _nRC$[ebp], ax
$LN2@oKZWDLGXO_:

; 69   :       while ( nRC == 0 )

	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jne	SHORT $LN3@oKZWDLGXO_

; 70   :          nRC = ResetViewFromSubobject( vXWD2 );

	mov	edx, DWORD PTR _vXWD2$[ebp]
	push	edx
	call	_ResetViewFromSubobject@4
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $LN2@oKZWDLGXO_
$LN3@oKZWDLGXO_:

; 71   :       SetCursorFirstEntity( vXWD2, "NLS", "" );

	push	OFFSET $SG13410
	push	OFFSET $SG13411
	mov	eax, DWORD PTR _vXWD2$[ebp]
	push	eax
	call	_SetCursorFirstEntity@12

; 72   :       SetCursorRelativeEntity( vXWD2, "NLS", lNLS, "" );

	push	OFFSET $SG13412
	mov	ecx, DWORD PTR _lNLS$[ebp]
	push	ecx
	push	OFFSET $SG13413
	mov	edx, DWORD PTR _vXWD2$[ebp]
	push	edx
	call	_SetCursorRelativeEntity@16

; 73   :       SysGetLanguageCode( &LanguageIndex );

	lea	eax, DWORD PTR _LanguageIndex$[ebp]
	push	eax
	call	_SysGetLanguageCode@4

; 74   :       nRC = SetCursorFirstEntityByInteger( vXWD2, "NLS_Text", "LI", (zLONG) LanguageIndex, "" );

	push	OFFSET $SG13414
	movsx	ecx, WORD PTR _LanguageIndex$[ebp]
	push	ecx
	push	OFFSET $SG13415
	push	OFFSET $SG13416
	mov	edx, DWORD PTR _vXWD2$[ebp]
	push	edx
	call	_SetCursorFirstEntityByInteger@20
	mov	WORD PTR _nRC$[ebp], ax

; 75   :       if ( nRC >= zCURSOR_SET )

	movsx	eax, WORD PTR _nRC$[ebp]
	test	eax, eax
	jl	SHORT $LN6@oKZWDLGXO_

; 76   :          GetAddrForAttribute( &pchAttr, vXWD2, "NLS_Text", "Text" );

	push	OFFSET $SG13419
	push	OFFSET $SG13420
	mov	ecx, DWORD PTR _vXWD2$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pchAttr$[ebp]
	push	edx
	call	_GetAddrForAttribute@16
	jmp	SHORT $LN7@oKZWDLGXO_
$LN6@oKZWDLGXO_:

; 77   :       else
; 78   :          pchAttr = szNullString;

	lea	eax, DWORD PTR _szNullString$[ebp]
	mov	DWORD PTR _pchAttr$[ebp], eax
$LN7@oKZWDLGXO_:

; 79   : 
; 80   :       DropView( vXWD2 );

	mov	ecx, DWORD PTR _vXWD2$[ebp]
	push	ecx
	call	_DropView@4
$LN5@oKZWDLGXO_:

; 81   :    }
; 82   : 
; 83   :    StoreValueInRecord( vXWD, lpEntity, lpAttribute, (zPVOID) pchAttr, 0 );

	push	0
	mov	edx, DWORD PTR _pchAttr$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpAttribute$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lpEntity$[ebp]
	push	ecx
	mov	edx, DWORD PTR _vXWD$[ebp]
	push	edx
	call	_StoreValueInRecord@20

; 84   : 
; 85   :    return( 0 );

	xor	eax, eax
$LN8@oKZWDLGXO_:

; 86   : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_oKZWDLGXO_DerivedOptionText@16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\10c\a\oe\kzwdlgxo.c
_TEXT	SEGMENT
_lNLS$ = -20						; size = 4
_pchAttr$ = -16						; size = 4
_vXWD2$ = -12						; size = 4
_LanguageIndex$ = -8					; size = 2
_nRC$ = -4						; size = 2
_vXWD$ = 8						; size = 4
_lpEntity$ = 12						; size = 4
_lpAttribute$ = 16					; size = 4
_GetOrSetFlag$ = 20					; size = 2
_oKZWDLGXO_DerivedControlText@16 PROC

; 8    : {

	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H

; 9    :    zVIEW   vXWD2;
; 10   :    zPCHAR  pchAttr;
; 11   :    zLONG   lNLS;
; 12   :    zSHORT  LanguageIndex;
; 13   :    zSHORT  nRC;
; 14   : 
; 15   :    nRC = GetVariableFromAttribute( &lNLS, 0, zTYPE_INTEGER, 0,

	push	1
	push	OFFSET $SG13364
	push	OFFSET $SG13365
	push	OFFSET $SG13366
	mov	eax, DWORD PTR _vXWD$[ebp]
	push	eax
	push	0
	push	76					; 0000004cH
	push	0
	lea	ecx, DWORD PTR _lNLS$[ebp]
	push	ecx
	call	_GetVariableFromAttribute@36
	mov	WORD PTR _nRC$[ebp], ax

; 16   :                                    vXWD, "Ctrl", "NLS", "", zACCEPT_NULL_ENTITY );
; 17   :    if ( nRC < 0 )

	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jge	SHORT $LN4@oKZWDLGXO_

; 18   :    {
; 19   :       GetAddrForAttribute( &pchAttr, vXWD, "Ctrl", "Text" );

	push	OFFSET $SG13369
	push	OFFSET $SG13370
	mov	eax, DWORD PTR _vXWD$[ebp]
	push	eax
	lea	ecx, DWORD PTR _pchAttr$[ebp]
	push	ecx
	call	_GetAddrForAttribute@16

; 20   :    }

	jmp	$LN5@oKZWDLGXO_
$LN4@oKZWDLGXO_:

; 21   :    else
; 22   :    {
; 23   :       CreateViewFromViewForTask( &vXWD2, vXWD, 0 );

	push	0
	mov	edx, DWORD PTR _vXWD$[ebp]
	push	edx
	lea	eax, DWORD PTR _vXWD2$[ebp]
	push	eax
	call	_CreateViewFromViewForTask@12

; 24   :       nRC = ResetViewFromSubobject( vXWD2 );

	mov	ecx, DWORD PTR _vXWD2$[ebp]
	push	ecx
	call	_ResetViewFromSubobject@4
	mov	WORD PTR _nRC$[ebp], ax
$LN2@oKZWDLGXO_:

; 25   :       while ( nRC == 0 )

	movsx	edx, WORD PTR _nRC$[ebp]
	test	edx, edx
	jne	SHORT $LN3@oKZWDLGXO_

; 26   :          nRC = ResetViewFromSubobject( vXWD2 );

	mov	eax, DWORD PTR _vXWD2$[ebp]
	push	eax
	call	_ResetViewFromSubobject@4
	mov	WORD PTR _nRC$[ebp], ax
	jmp	SHORT $LN2@oKZWDLGXO_
$LN3@oKZWDLGXO_:

; 27   : 
; 28   :       SetCursorFirstEntity( vXWD2, "NLS", "" );

	push	OFFSET $SG13371
	push	OFFSET $SG13372
	mov	ecx, DWORD PTR _vXWD2$[ebp]
	push	ecx
	call	_SetCursorFirstEntity@12

; 29   :       SetCursorRelativeEntity( vXWD2, "NLS", lNLS, "" );

	push	OFFSET $SG13373
	mov	edx, DWORD PTR _lNLS$[ebp]
	push	edx
	push	OFFSET $SG13374
	mov	eax, DWORD PTR _vXWD2$[ebp]
	push	eax
	call	_SetCursorRelativeEntity@16

; 30   :       SysGetLanguageCode( &LanguageIndex );

	lea	ecx, DWORD PTR _LanguageIndex$[ebp]
	push	ecx
	call	_SysGetLanguageCode@4

; 31   :       nRC = SetCursorFirstEntityByInteger( vXWD2, "NLS_Text", "LI", (zLONG) LanguageIndex, "" );

	push	OFFSET $SG13375
	movsx	edx, WORD PTR _LanguageIndex$[ebp]
	push	edx
	push	OFFSET $SG13376
	push	OFFSET $SG13377
	mov	eax, DWORD PTR _vXWD2$[ebp]
	push	eax
	call	_SetCursorFirstEntityByInteger@20
	mov	WORD PTR _nRC$[ebp], ax

; 32   :       if ( nRC >= zCURSOR_SET )

	movsx	ecx, WORD PTR _nRC$[ebp]
	test	ecx, ecx
	jl	SHORT $LN6@oKZWDLGXO_

; 33   :          GetAddrForAttribute( &pchAttr, vXWD2, "NLS_Text", "Text" );

	push	OFFSET $SG13380
	push	OFFSET $SG13381
	mov	edx, DWORD PTR _vXWD2$[ebp]
	push	edx
	lea	eax, DWORD PTR _pchAttr$[ebp]
	push	eax
	call	_GetAddrForAttribute@16
	jmp	SHORT $LN7@oKZWDLGXO_
$LN6@oKZWDLGXO_:

; 34   :       else
; 35   :       {
; 36   :          GetAddrForAttribute( &pchAttr, vXWD, "Ctrl", "Text" );

	push	OFFSET $SG13382
	push	OFFSET $SG13383
	mov	ecx, DWORD PTR _vXWD$[ebp]
	push	ecx
	lea	edx, DWORD PTR _pchAttr$[ebp]
	push	edx
	call	_GetAddrForAttribute@16
$LN7@oKZWDLGXO_:

; 37   :       }
; 38   : 
; 39   :       DropView( vXWD2 );

	mov	eax, DWORD PTR _vXWD2$[ebp]
	push	eax
	call	_DropView@4
$LN5@oKZWDLGXO_:

; 40   :    }
; 41   : 
; 42   :    StoreValueInRecord( vXWD, lpEntity, lpAttribute, pchAttr, 0 );

	push	0
	mov	ecx, DWORD PTR _pchAttr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _lpAttribute$[ebp]
	push	edx
	mov	eax, DWORD PTR _lpEntity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _vXWD$[ebp]
	push	ecx
	call	_StoreValueInRecord@20

; 43   :    return( 0 );

	xor	eax, eax

; 44   : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_oKZWDLGXO_DerivedControlText@16 ENDP
_TEXT	ENDS
END
